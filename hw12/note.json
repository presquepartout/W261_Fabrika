{
  "paragraphs": [
    {
      "text": "%md\nMIDS W261 Machine Learning at Scale\nHomework 12\n",
      "authenticationInfo": {},
      "dateUpdated": "Apr 14, 2016 9:11:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460692167980_-1285124036",
      "id": "20160414-204927_1462306721",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eMIDS W261 Machine Learning at Scale\n\u003cbr  /\u003eHomework 12\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 14, 2016 8:49:27 PM",
      "dateStarted": "Apr 14, 2016 9:11:37 PM",
      "dateFinished": "Apr 14, 2016 9:11:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n![ML Logo](http://www.berkeley.edu/brand/img/seals/ucbseal_139_540.png)\n# **Click-Through Rate Prediction Lab**\n#### This lab covers the steps for creating a click-through rate (CTR) prediction pipeline.  You will work with the [Criteo Labs](http://labs.criteo.com/) dataset that was used for a recent [Kaggle competition](https://www.kaggle.com/c/criteo-display-ad-challenge).\n#### ** This lab will cover: **\n+  ####*Part 1:* Featurize categorical data using one-hot-encoding (OHE)\n+  ####*Part 2:* Construct an OHE dictionary\n+  ####*Part 3:* Parse CTR data and generate OHE features\n + #### *Visualization 1:* Feature frequency\n+  ####*Part 4:* CTR prediction and logloss evaluation\n + #### *Visualization 2:* ROC curve\n+  ####*Part 5:* Reduce feature dimension via feature hashing\n + #### *Visualization 3:* Hyperparameter heat map\n \n#### Note that, for reference, you can look up the details of the relevant Spark methods in [Spark\u0027s Python API](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD) and the relevant NumPy methods in the [NumPy Reference](http://docs.scipy.org/doc/numpy/reference/index.html)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 14, 2016 9:11:55 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460693497720_-788316327",
      "id": "20160414-211137_1101873984",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"http://www.berkeley.edu/brand/img/seals/ucbseal_139_540.png\" alt\u003d\"ML Logo\" /\u003e\u003c/p\u003e\n\u003ch1\u003e\u003cstrong\u003eClick-Through Rate Prediction Lab\u003c/strong\u003e\u003c/h1\u003e\n\u003ch4\u003eThis lab covers the steps for creating a click-through rate (CTR) prediction pipeline.  You will work with the \u003ca href\u003d\"http://labs.criteo.com/\"\u003eCriteo Labs\u003c/a\u003e dataset that was used for a recent \u003ca href\u003d\"https://www.kaggle.com/c/criteo-display-ad-challenge\"\u003eKaggle competition\u003c/a\u003e.\u003c/h4\u003e\n\u003ch4\u003e\u003cem\u003e\u003c/em\u003e This lab will cover: \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ch4\u003e\u003cem\u003ePart 1:\u003c/em\u003e Featurize categorical data using one-hot-encoding (OHE)\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e\u003cem\u003ePart 2:\u003c/em\u003e Construct an OHE dictionary\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e\u003cem\u003ePart 3:\u003c/em\u003e Parse CTR data and generate OHE features\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e\u003cem\u003eVisualization 1:\u003c/em\u003e Feature frequency\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e\u003cem\u003ePart 4:\u003c/em\u003e CTR prediction and logloss evaluation\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e\u003cem\u003eVisualization 2:\u003c/em\u003e ROC curve\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e\u003cem\u003ePart 5:\u003c/em\u003e Reduce feature dimension via feature hashing\u003c/h4\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ch4\u003e\u003cem\u003eVisualization 3:\u003c/em\u003e Hyperparameter heat map\u003c/h4\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNote that, for reference, you can look up the details of the relevant Spark methods in \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD\"\u003eSpark\u0027s Python API\u003c/a\u003e and the relevant NumPy methods in the \u003ca href\u003d\"http://docs.scipy.org/doc/numpy/reference/index.html\"\u003eNumPy Reference\u003c/a\u003e\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 14, 2016 9:11:37 PM",
      "dateStarted": "Apr 14, 2016 9:11:49 PM",
      "dateFinished": "Apr 14, 2016 9:11:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nlabVersion \u003d \u0027MIDS_MLS_week12_v_0_9\u0027",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:24:56 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460693509877_-1235932540",
      "id": "20160414-211149_1353546394",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 14, 2016 9:11:49 PM",
      "dateStarted": "Apr 15, 2016 8:24:56 PM",
      "dateFinished": "Apr 15, 2016 8:24:56 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Part 1: Featurize categorical data using one-hot encoding\n#### ** (1a) One-hot-encoding **\n#### We would like to develop code to convert categorical features to numerical ones, and to build intuition, we will work with a sample unlabeled dataset with three data points, with each data point representing an animal. The first feature indicates the type of animal (bear, cat, mouse); the second feature describes the animal\u0027s color (black, tabby); and the third (optional) feature describes what the animal eats (mouse, salmon).\n#### In a one-hot-encoding (OHE) scheme, we want to represent each tuple of `(featureID, category)` via its own binary feature.  We can do this in Python by creating a dictionary that maps each tuple to a distinct integer, where the integer corresponds to a binary feature. To start, manually enter the entries in the OHE dictionary associated with the sample dataset by mapping the tuples to consecutive integers starting from zero,  ordering the tuples first by featureID and next by category.\n#### Later in this lab, we\u0027ll use OHE dictionaries to transform data points into compact lists of features that can be used in machine learning algorithms.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 14, 2016 9:13:31 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460693557648_2056055670",
      "id": "20160414-211237_858584033",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch2\u003ePart 1: Featurize categorical data using one-hot encoding\u003c/h2\u003e\n\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (1a) One-hot-encoding \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eWe would like to develop code to convert categorical features to numerical ones, and to build intuition, we will work with a sample unlabeled dataset with three data points, with each data point representing an animal. The first feature indicates the type of animal (bear, cat, mouse); the second feature describes the animal\u0027s color (black, tabby); and the third (optional) feature describes what the animal eats (mouse, salmon).\u003c/h4\u003e\n\u003ch4\u003eIn a one-hot-encoding (OHE) scheme, we want to represent each tuple of \u003ccode\u003e(featureID, category)\u003c/code\u003e via its own binary feature.  We can do this in Python by creating a dictionary that maps each tuple to a distinct integer, where the integer corresponds to a binary feature. To start, manually enter the entries in the OHE dictionary associated with the sample dataset by mapping the tuples to consecutive integers starting from zero,  ordering the tuples first by featureID and next by category.\u003c/h4\u003e\n\u003ch4\u003eLater in this lab, we\u0027ll use OHE dictionaries to transform data points into compact lists of features that can be used in machine learning algorithms.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 14, 2016 9:12:37 PM",
      "dateStarted": "Apr 14, 2016 9:13:26 PM",
      "dateFinished": "Apr 14, 2016 9:13:26 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# Data for manual OHE\n# Note: the first data point does not include any value for the optional third feature\nsampleOne \u003d [(0, \u0027mouse\u0027), (1, \u0027black\u0027)]\nsampleTwo \u003d [(0, \u0027cat\u0027), (1, \u0027tabby\u0027), (2, \u0027mouse\u0027)]\nsampleThree \u003d  [(0, \u0027bear\u0027), (1, \u0027black\u0027), (2, \u0027salmon\u0027)]\nsampleDataRDD \u003d sc.parallelize([sampleOne, sampleTwo, sampleThree])",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:31:44 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460693606636_-931257384",
      "id": "20160414-211326_1045757184",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 14, 2016 9:13:26 PM",
      "dateStarted": "Apr 15, 2016 10:31:44 PM",
      "dateFinished": "Apr 15, 2016 10:31:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\nsampleOHEDictManual \u003d {}\nsampleOHEDictManual[(0,\u0027bear\u0027)] \u003d 0\nsampleOHEDictManual[(0,\u0027cat\u0027)] \u003d 1\nsampleOHEDictManual[(0,\u0027mouse\u0027)] \u003d 2\nsampleOHEDictManual[(1,\u0027black\u0027)] \u003d 3\nsampleOHEDictManual[(1,\u0027tabby\u0027)] \u003d 4\nsampleOHEDictManual[(2,\u0027mouse\u0027)] \u003d 5\nsampleOHEDictManual[(2,\u0027salmon\u0027)] \u003d 6",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:25:02 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460693678932_1472700240",
      "id": "20160414-211438_1719095135",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 14, 2016 9:14:38 PM",
      "dateStarted": "Apr 15, 2016 8:25:02 PM",
      "dateFinished": "Apr 15, 2016 8:25:02 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# A testing helper \n#https://pypi.python.org/pypi/test_helper/0.2\nimport hashlib\n\nclass TestFailure(Exception):\n  pass\nclass PrivateTestFailure(Exception):\n  pass\n\nclass Test(object):\n  passed \u003d 0\n  numTests \u003d 0\n  failFast \u003d False\n  private \u003d False\n\n  @classmethod\n  def setFailFast(cls):\n    cls.failFast \u003d True\n\n  @classmethod\n  def setPrivateMode(cls):\n    cls.private \u003d True\n\n  @classmethod\n  def assertTrue(cls, result, msg\u003d\"\"):\n    cls.numTests +\u003d 1\n    if result \u003d\u003d True:\n      cls.passed +\u003d 1\n      print \"1 test passed.\"\n    else:\n      print \"1 test failed. \" + msg\n      if cls.failFast:\n        if cls.private:\n          raise PrivateTestFailure(msg)\n        else:\n          raise TestFailure(msg)\n\n  @classmethod\n  def assertEquals(cls, var, val, msg\u003d\"\"):\n    cls.assertTrue(var \u003d\u003d val, msg)\n\n  @classmethod\n  def assertEqualsHashed(cls, var, hashed_val, msg\u003d\"\"):\n    cls.assertEquals(cls._hash(var), hashed_val, msg)\n\n  @classmethod\n  def printStats(cls):\n    print \"{0} / {1} test(s) passed.\".format(cls.passed, cls.numTests)\n\n  @classmethod\n  def _hash(cls, x):\n    return hashlib.sha1(str(x)).hexdigest()",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:25:05 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460694049069_-1867921217",
      "id": "20160414-212049_105708269",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 14, 2016 9:20:49 PM",
      "dateStarted": "Apr 15, 2016 8:25:05 PM",
      "dateFinished": "Apr 15, 2016 8:25:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST One-hot-encoding (1a)\n#from test_helper import Test\n\nTest.assertEqualsHashed(sampleOHEDictManual[(0,\u0027bear\u0027)],\n                        \u0027b6589fc6ab0dc82cf12099d1c2d40ab994e8410c\u0027,\n                        \"incorrect value for sampleOHEDictManual[(0,\u0027bear\u0027)]\")\nTest.assertEqualsHashed(sampleOHEDictManual[(0,\u0027cat\u0027)],\n                        \u0027356a192b7913b04c54574d18c28d46e6395428ab\u0027,\n                        \"incorrect value for sampleOHEDictManual[(0,\u0027cat\u0027)]\")\nTest.assertEqualsHashed(sampleOHEDictManual[(0,\u0027mouse\u0027)],\n                        \u0027da4b9237bacccdf19c0760cab7aec4a8359010b0\u0027,\n                        \"incorrect value for sampleOHEDictManual[(0,\u0027mouse\u0027)]\")\nTest.assertEqualsHashed(sampleOHEDictManual[(1,\u0027black\u0027)],\n                        \u002777de68daecd823babbb58edb1c8e14d7106e83bb\u0027,\n                        \"incorrect value for sampleOHEDictManual[(1,\u0027black\u0027)]\")\nTest.assertEqualsHashed(sampleOHEDictManual[(1,\u0027tabby\u0027)],\n                        \u00271b6453892473a467d07372d45eb05abc2031647a\u0027,\n                        \"incorrect value for sampleOHEDictManual[(1,\u0027tabby\u0027)]\")\nTest.assertEqualsHashed(sampleOHEDictManual[(2,\u0027mouse\u0027)],\n                        \u0027ac3478d69a3c81fa62e60f5c3696165a4e5e6ac4\u0027,\n                        \"incorrect value for sampleOHEDictManual[(2,\u0027mouse\u0027)]\")\nTest.assertEqualsHashed(sampleOHEDictManual[(2,\u0027salmon\u0027)],\n                        \u0027c1dfd96eea8cc2b62785275bca38ac261256e278\u0027,\n                        \"incorrect value for sampleOHEDictManual[(2,\u0027salmon\u0027)]\")\nTest.assertEquals(len(sampleOHEDictManual.keys()), 7,\n                  \u0027incorrect number of keys in sampleOHEDictManual\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:25:08 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460694112606_-1207029876",
      "id": "20160414-212152_1406979299",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 14, 2016 9:21:52 PM",
      "dateStarted": "Apr 15, 2016 8:25:08 PM",
      "dateFinished": "Apr 15, 2016 8:25:08 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### ** (1b) Sparse vectors **\n#### Data points can typically be represented with a small number of non-zero OHE features relative to the total number of features that occur in the dataset.  By leveraging this sparsity and using sparse vector representations of OHE data, we can reduce storage and computational burdens.  Below are a few sample vectors represented as dense numpy arrays.  Use [SparseVector](https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.linalg.SparseVector) to represent them in a sparse fashion, and verify that both the sparse and dense representations yield the same results when computing [dot products](http://en.wikipedia.org/wiki/Dot_product) (we will later use MLlib to train classifiers via gradient descent, and MLlib will need to compute dot products between SparseVectors and dense parameter vectors).\n#### Use `SparseVector(size, *args)` to create a new sparse vector where size is the length of the vector and args is either a dictionary, a list of (index, value) pairs, or two separate arrays of indices and values (sorted by index).  You\u0027ll need to create a sparse vector representation of each dense vector `aDense` and `bDense`.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 14, 2016 9:35:07 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460694307157_781427416",
      "id": "20160414-212507_631746771",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (1b) Sparse vectors \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eData points can typically be represented with a small number of non-zero OHE features relative to the total number of features that occur in the dataset.  By leveraging this sparsity and using sparse vector representations of OHE data, we can reduce storage and computational burdens.  Below are a few sample vectors represented as dense numpy arrays.  Use \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.linalg.SparseVector\"\u003eSparseVector\u003c/a\u003e to represent them in a sparse fashion, and verify that both the sparse and dense representations yield the same results when computing \u003ca href\u003d\"http://en.wikipedia.org/wiki/Dot_product\"\u003edot products\u003c/a\u003e (we will later use MLlib to train classifiers via gradient descent, and MLlib will need to compute dot products between SparseVectors and dense parameter vectors).\u003c/h4\u003e\n\u003ch4\u003eUse \u003ccode\u003eSparseVector(size, *args)\u003c/code\u003e to create a new sparse vector where size is the length of the vector and args is either a dictionary, a list of (index, value) pairs, or two separate arrays of indices and values (sorted by index).  You\u0027ll need to create a sparse vector representation of each dense vector \u003ccode\u003eaDense\u003c/code\u003e and \u003ccode\u003ebDense\u003c/code\u003e.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 14, 2016 9:25:07 PM",
      "dateStarted": "Apr 14, 2016 9:35:02 PM",
      "dateFinished": "Apr 14, 2016 9:35:02 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport numpy as np\nfrom pyspark.mllib.linalg import SparseVector",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:25:21 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460694902965_112035493",
      "id": "20160414-213502_944451876",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 14, 2016 9:35:02 PM",
      "dateStarted": "Apr 15, 2016 8:25:21 PM",
      "dateFinished": "Apr 15, 2016 8:25:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\naDense \u003d np.array([0., 3., 0., 4.])\naSparse \u003dSparseVector(4,{1:3., 3:4.} ) \n\nbDense \u003d np.array([0., 0., 0., 1.])\nbSparse \u003d SparseVector(4, {3:1.})\n\nw \u003d np.array([0.4, 3.1, -1.4, -.5])\nprint aDense.dot(w)\nprint aSparse.dot(w)\nprint bDense.dot(w)\nprint bSparse.dot(w)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:29:00 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460777121136_-1846516927",
      "id": "20160415-202521_1071392062",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "7.3\n7.3\n-0.5\n-0.5\n"
      },
      "dateCreated": "Apr 15, 2016 8:25:21 PM",
      "dateStarted": "Apr 15, 2016 8:29:00 PM",
      "dateFinished": "Apr 15, 2016 8:29:00 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Sparse Vectors (1b)\nTest.assertTrue(isinstance(aSparse, SparseVector), \u0027aSparse needs to be an instance of SparseVector\u0027)\nTest.assertTrue(isinstance(bSparse, SparseVector), \u0027aSparse needs to be an instance of SparseVector\u0027)\nTest.assertTrue(aDense.dot(w) \u003d\u003d aSparse.dot(w),\n                \u0027dot product of aDense and w should equal dot product of aSparse and w\u0027)\nTest.assertTrue(bDense.dot(w) \u003d\u003d bSparse.dot(w),\n                \u0027dot product of bDense and w should equal dot product of bSparse and w\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:29:36 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460777216041_583727336",
      "id": "20160415-202656_1111076561",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 15, 2016 8:26:56 PM",
      "dateStarted": "Apr 15, 2016 8:29:36 PM",
      "dateFinished": "Apr 15, 2016 8:29:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **(1c) OHE features as sparse vectors **\n#### Now let\u0027s see how we can represent the OHE features for points in our sample dataset.  Using the mapping defined by the OHE dictionary from Part (1a), manually define OHE features for the three sample data points using SparseVector format.  Any feature that occurs in a point should have the value 1.0.  For example, the `DenseVector` for a point with features 2 and 4 would be `[0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0]`.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:30:45 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460777376562_240328814",
      "id": "20160415-202936_1304644161",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003e(1c) OHE features as sparse vectors \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eNow let\u0027s see how we can represent the OHE features for points in our sample dataset.  Using the mapping defined by the OHE dictionary from Part (1a), manually define OHE features for the three sample data points using SparseVector format.  Any feature that occurs in a point should have the value 1.0.  For example, the \u003ccode\u003eDenseVector\u003c/code\u003e for a point with features 2 and 4 would be \u003ccode\u003e[0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0]\u003c/code\u003e.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 15, 2016 8:29:36 PM",
      "dateStarted": "Apr 15, 2016 8:30:19 PM",
      "dateFinished": "Apr 15, 2016 8:30:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nReminder of the sample features\nsampleOne \u003d [(0, \u0027mouse\u0027), (1, \u0027black\u0027)]\nsampleTwo \u003d [(0, \u0027cat\u0027), (1, \u0027tabby\u0027), (2, \u0027mouse\u0027)]\nsampleThree \u003d  [(0, \u0027bear\u0027), (1, \u0027black\u0027), (2, \u0027salmon\u0027)]\nsampleOHEDictManual \u003d {}\nsampleOHEDictManual[(0,\u0027bear\u0027)] \u003d 0\nsampleOHEDictManual[(0,\u0027cat\u0027)] \u003d 1\nsampleOHEDictManual[(0,\u0027mouse\u0027)] \u003d 2\nsampleOHEDictManual[(1,\u0027black\u0027)] \u003d 3\nsampleOHEDictManual[(1,\u0027tabby\u0027)] \u003d 4\nsampleOHEDictManual[(2,\u0027mouse\u0027)] \u003d 5\nsampleOHEDictManual[(2,\u0027salmon\u0027)] \u003d 6",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:34:43 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460777419894_-991359684",
      "id": "20160415-203019_1220485920",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eReminder of the sample features\n\u003cbr  /\u003esampleOne \u003d [(0, \u0027mouse\u0027), (1, \u0027black\u0027)]\n\u003cbr  /\u003esampleTwo \u003d [(0, \u0027cat\u0027), (1, \u0027tabby\u0027), (2, \u0027mouse\u0027)]\n\u003cbr  /\u003esampleThree \u003d  [(0, \u0027bear\u0027), (1, \u0027black\u0027), (2, \u0027salmon\u0027)]\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 15, 2016 8:30:19 PM",
      "dateStarted": "Apr 15, 2016 8:31:43 PM",
      "dateFinished": "Apr 15, 2016 8:31:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\nsampleOneOHEFeatManual \u003d SparseVector(7,[sampleOHEDictManual[k] for k in sampleOne], [1.]*len(sampleOne))\nsampleTwoOHEFeatManual \u003d SparseVector(7, [sampleOHEDictManual[k] for k in sampleTwo], [1.]*len(sampleTwo)) \nsampleThreeOHEFeatManual \u003d  SparseVector(7, [sampleOHEDictManual[k] for k in sampleThree], [1.]*len(sampleThree)) ",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:43:22 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460777503542_1848025902",
      "id": "20160415-203143_1533389576",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 15, 2016 8:31:43 PM",
      "dateStarted": "Apr 15, 2016 8:43:22 PM",
      "dateFinished": "Apr 15, 2016 8:43:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST OHE Features as sparse vectors (1c)\nTest.assertTrue(isinstance(sampleOneOHEFeatManual, SparseVector),\n                \u0027sampleOneOHEFeatManual needs to be a SparseVector\u0027)\nTest.assertTrue(isinstance(sampleTwoOHEFeatManual, SparseVector),\n                \u0027sampleTwoOHEFeatManual needs to be a SparseVector\u0027)\nTest.assertTrue(isinstance(sampleThreeOHEFeatManual, SparseVector),\n                \u0027sampleThreeOHEFeatManual needs to be a SparseVector\u0027)\nTest.assertEqualsHashed(sampleOneOHEFeatManual,\n                        \u0027ecc00223d141b7bd0913d52377cee2cf5783abd6\u0027,\n                        \u0027incorrect value for sampleOneOHEFeatManual\u0027)\nTest.assertEqualsHashed(sampleTwoOHEFeatManual,\n                        \u002726b023f4109e3b8ab32241938e2e9b9e9d62720a\u0027,\n                        \u0027incorrect value for sampleTwoOHEFeatManual\u0027)\nTest.assertEqualsHashed(sampleThreeOHEFeatManual,\n                        \u0027c04134fd603ae115395b29dcabe9d0c66fbdc8a7\u0027,\n                        \u0027incorrect value for sampleThreeOHEFeatManual\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:43:49 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460778188328_703149972",
      "id": "20160415-204308_1439265753",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 15, 2016 8:43:08 PM",
      "dateStarted": "Apr 15, 2016 8:43:49 PM",
      "dateFinished": "Apr 15, 2016 8:43:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **(1d) Define a OHE function **\n#### Next we will use the OHE dictionary from Part (1a) to programatically generate OHE features from the original categorical data.  First write a function called `oneHotEncoding` that creates OHE feature vectors in `SparseVector` format.  Then use this function to create OHE features for the first sample data point and verify that the result matches the result from Part (1c).",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 8:45:08 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460778229659_-2004666815",
      "id": "20160415-204349_55718059",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003e(1d) Define a OHE function \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eNext we will use the OHE dictionary from Part (1a) to programatically generate OHE features from the original categorical data.  First write a function called \u003ccode\u003eoneHotEncoding\u003c/code\u003e that creates OHE feature vectors in \u003ccode\u003eSparseVector\u003c/code\u003e format.  Then use this function to create OHE features for the first sample data point and verify that the result matches the result from Part (1c).\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 15, 2016 8:43:49 PM",
      "dateStarted": "Apr 15, 2016 8:45:06 PM",
      "dateFinished": "Apr 15, 2016 8:45:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\ndef oneHotEncoding(rawFeats, OHEDict, numOHEFeats):\n    \"\"\"Produce a one-hot-encoding from a list of features and an OHE dictionary.\n\n    Note:\n        You should ensure that the indices used to create a SparseVector are sorted.\n\n    Args:\n        rawFeats (list of (int, str)): The features corresponding to a single observation.  Each\n            feature consists of a tuple of featureID and the feature\u0027s value. (e.g. sampleOne)\n        OHEDict (dict): A mapping of (featureID, value) to unique integer.\n        numOHEFeats (int): The total number of unique OHE features (combinations of featureID and\n            value).\n\n    Returns:\n        SparseVector: A SparseVector of length numOHEFeats with indicies equal to the unique\n            identifiers for the (featureID, value) combinations that occur in the observation and\n            with values equal to 1.0.\n    \"\"\"\n    ivalues \u003d []\n    outlist \u003d []\n    for e in rawFeats:\n        if OHEDict.get(e) is not None:\n            ivalues.append(OHEDict[e])\n            outlist.append(e)\n        \n        \n    # ensure that the indices used to create SparseVector are sorted:\n    indices \u003d sorted(ivalues)\n   \n    return SparseVector(numOHEFeats, indices, [1.]*len(outlist))\n    \n\n# Calculate the number of features in sampleOHEDictManual\nnumSampleOHEFeats \u003d len(sampleOHEDictManual)\n\n# Run oneHotEnoding on sampleOne\nsampleOneOHEFeat \u003d oneHotEncoding(sampleOne, sampleOHEDictManual, numSampleOHEFeats)\n\nprint sampleOneOHEFeat",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:45:58 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460778306512_1852161785",
      "id": "20160415-204506_1464899808",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "(7,[2,3],[1.0,1.0])\n"
      },
      "dateCreated": "Apr 15, 2016 8:45:06 PM",
      "dateStarted": "Apr 16, 2016 10:45:58 PM",
      "dateFinished": "Apr 16, 2016 10:45:58 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Define an OHE Function (1d)\nTest.assertTrue(sampleOneOHEFeat \u003d\u003d sampleOneOHEFeatManual,\n                \u0027sampleOneOHEFeat should equal sampleOneOHEFeatManual\u0027)\nTest.assertEquals(sampleOneOHEFeat, SparseVector(7, [2,3], [1.0,1.0]),\n                  \u0027incorrect value for sampleOneOHEFeat\u0027)\nTest.assertEquals(oneHotEncoding([(1, \u0027black\u0027), (0, \u0027mouse\u0027)], sampleOHEDictManual,\n                                 numSampleOHEFeats), SparseVector(7, [2,3], [1.0,1.0]),\n                  \u0027incorrect definition for oneHotEncoding\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:46:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460783803855_257267559",
      "id": "20160415-221643_1741280137",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 15, 2016 10:16:43 PM",
      "dateStarted": "Apr 16, 2016 10:46:01 PM",
      "dateFinished": "Apr 16, 2016 10:46:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **(1e) Apply OHE to a dataset **\n#### Finally, use the function from Part (1d) to create OHE features for all 3 data points in the sample dataset.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:30:00 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460784387628_-120189202",
      "id": "20160415-222627_1979414522",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003e(1e) Apply OHE to a dataset \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eFinally, use the function from Part (1d) to create OHE features for all 3 data points in the sample dataset.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 15, 2016 10:26:27 PM",
      "dateStarted": "Apr 15, 2016 10:29:58 PM",
      "dateFinished": "Apr 15, 2016 10:29:58 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\nsampleOHEData \u003d sampleDataRDD.map(lambda x: oneHotEncoding(x, sampleOHEDictManual, numSampleOHEFeats))\nprint sampleOHEData.collect()",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:33:08 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460784598963_-1093312759",
      "id": "20160415-222958_2014052655",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[SparseVector(7, {2: 1.0, 3: 1.0}), SparseVector(7, {1: 1.0, 4: 1.0, 5: 1.0}), SparseVector(7, {0: 1.0, 3: 1.0, 6: 1.0})]\n"
      },
      "dateCreated": "Apr 15, 2016 10:29:58 PM",
      "dateStarted": "Apr 15, 2016 10:33:08 PM",
      "dateFinished": "Apr 15, 2016 10:33:08 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Apply OHE to a dataset (1e)\nsampleOHEDataValues \u003d sampleOHEData.collect()\nTest.assertTrue(len(sampleOHEDataValues) \u003d\u003d 3, \u0027sampleOHEData should have three elements\u0027)\nTest.assertEquals(sampleOHEDataValues[0], SparseVector(7, {2: 1.0, 3: 1.0}),\n                  \u0027incorrect OHE for first sample\u0027)\nTest.assertEquals(sampleOHEDataValues[1], SparseVector(7, {1: 1.0, 4: 1.0, 5: 1.0}),\n                  \u0027incorrect OHE for second sample\u0027)\nTest.assertEquals(sampleOHEDataValues[2], SparseVector(7, {0: 1.0, 3: 1.0, 6: 1.0}),\n                  \u0027incorrect OHE for third sample\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:33:46 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460784633311_152165403",
      "id": "20160415-223033_1663276302",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 15, 2016 10:30:33 PM",
      "dateStarted": "Apr 15, 2016 10:33:46 PM",
      "dateFinished": "Apr 15, 2016 10:33:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### ** Part 2: Construct an OHE dictionary **\n#### **(2a) Pair RDD of `(featureID, category)` **\n#### To start, create an RDD of distinct `(featureID, category)` tuples. In our sample dataset, the 7 items in the resulting RDD are `(0, \u0027bear\u0027)`, `(0, \u0027cat\u0027)`, `(0, \u0027mouse\u0027)`, `(1, \u0027black\u0027)`, `(1, \u0027tabby\u0027)`, `(2, \u0027mouse\u0027)`, `(2, \u0027salmon\u0027)`. Notably `\u0027black\u0027` appears twice in the dataset but only contributes one item to the RDD: `(1, \u0027black\u0027)`, while `\u0027mouse\u0027` also appears twice and contributes two items: `(0, \u0027mouse\u0027)` and `(2, \u0027mouse\u0027)`.  Use [flatMap](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.flatMap) and [distinct](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.distinct).",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:39:30 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460784826883_2066800167",
      "id": "20160415-223346_1359937567",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003e\u003cem\u003e\u003c/em\u003e Part 2: Construct an OHE dictionary \u003cem\u003e\u003c/em\u003e\u003c/h3\u003e\n\u003ch4\u003e*\u003cem\u003e(2a) Pair RDD of \u003ccode\u003e(featureID, category)\u003c/code\u003e \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eTo start, create an RDD of distinct \u003ccode\u003e(featureID, category)\u003c/code\u003e tuples. In our sample dataset, the 7 items in the resulting RDD are \u003ccode\u003e(0, \u0027bear\u0027)\u003c/code\u003e, \u003ccode\u003e(0, \u0027cat\u0027)\u003c/code\u003e, \u003ccode\u003e(0, \u0027mouse\u0027)\u003c/code\u003e, \u003ccode\u003e(1, \u0027black\u0027)\u003c/code\u003e, \u003ccode\u003e(1, \u0027tabby\u0027)\u003c/code\u003e, \u003ccode\u003e(2, \u0027mouse\u0027)\u003c/code\u003e, \u003ccode\u003e(2, \u0027salmon\u0027)\u003c/code\u003e. Notably \u003ccode\u003e\u0027black\u0027\u003c/code\u003e appears twice in the dataset but only contributes one item to the RDD: \u003ccode\u003e(1, \u0027black\u0027)\u003c/code\u003e, while \u003ccode\u003e\u0027mouse\u0027\u003c/code\u003e also appears twice and contributes two items: \u003ccode\u003e(0, \u0027mouse\u0027)\u003c/code\u003e and \u003ccode\u003e(2, \u0027mouse\u0027)\u003c/code\u003e.  Use \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.flatMap\"\u003eflatMap\u003c/a\u003e and \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.distinct\"\u003edistinct\u003c/a\u003e.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 15, 2016 10:33:46 PM",
      "dateStarted": "Apr 15, 2016 10:39:25 PM",
      "dateFinished": "Apr 15, 2016 10:39:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\nsampleDistinctFeats \u003d sampleDataRDD.flatMap(lambda x: x).distinct()",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:50:02 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460785165800_845261281",
      "id": "20160415-223925_5448091",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 15, 2016 10:39:25 PM",
      "dateStarted": "Apr 15, 2016 10:50:02 PM",
      "dateFinished": "Apr 15, 2016 10:50:02 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Pair RDD of (featureID, category) (2a)\nTest.assertEquals(sorted(sampleDistinctFeats.collect()),\n                  [(0, \u0027bear\u0027), (0, \u0027cat\u0027), (0, \u0027mouse\u0027), (1, \u0027black\u0027),\n                   (1, \u0027tabby\u0027), (2, \u0027mouse\u0027), (2, \u0027salmon\u0027)],\n                  \u0027incorrect value for sampleDistinctFeats\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:50:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460785636107_-1999464818",
      "id": "20160415-224716_1462042847",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n"
      },
      "dateCreated": "Apr 15, 2016 10:47:16 PM",
      "dateStarted": "Apr 15, 2016 10:50:33 PM",
      "dateFinished": "Apr 15, 2016 10:50:34 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### ** (2b) OHE Dictionary from distinct features **\n#### Next, create an `RDD` of key-value tuples, where each `(featureID, category)` tuple in `sampleDistinctFeats` is a key and the values are distinct integers ranging from 0 to (number of keys - 1).  Then convert this `RDD` into a dictionary, which can be done using the `collectAsMap` action.  Note that there is no unique mapping from keys to values, as all we require is that each `(featureID, category)` key be mapped to a unique integer between 0 and the number of keys.  In this exercise, any valid mapping is acceptable.  Use [zipWithIndex](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.zipWithIndex) followed by [collectAsMap](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.collectAsMap).\n#### In our sample dataset, one valid list of key-value tuples is: `[((0, \u0027bear\u0027), 0), ((2, \u0027salmon\u0027), 1), ((1, \u0027tabby\u0027), 2), ((2, \u0027mouse\u0027), 3), ((0, \u0027mouse\u0027), 4), ((0, \u0027cat\u0027), 5), ((1, \u0027black\u0027), 6)]`. The dictionary defined in Part (1a) illustrates another valid mapping between keys and integers.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:53:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460785833570_249082731",
      "id": "20160415-225033_878167158",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (2b) OHE Dictionary from distinct features \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eNext, create an \u003ccode\u003eRDD\u003c/code\u003e of key-value tuples, where each \u003ccode\u003e(featureID, category)\u003c/code\u003e tuple in \u003ccode\u003esampleDistinctFeats\u003c/code\u003e is a key and the values are distinct integers ranging from 0 to (number of keys - 1).  Then convert this \u003ccode\u003eRDD\u003c/code\u003e into a dictionary, which can be done using the \u003ccode\u003ecollectAsMap\u003c/code\u003e action.  Note that there is no unique mapping from keys to values, as all we require is that each \u003ccode\u003e(featureID, category)\u003c/code\u003e key be mapped to a unique integer between 0 and the number of keys.  In this exercise, any valid mapping is acceptable.  Use \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.zipWithIndex\"\u003ezipWithIndex\u003c/a\u003e followed by \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.collectAsMap\"\u003ecollectAsMap\u003c/a\u003e.\u003c/h4\u003e\n\u003ch4\u003eIn our sample dataset, one valid list of key-value tuples is: \u003ccode\u003e[((0, \u0027bear\u0027), 0), ((2, \u0027salmon\u0027), 1), ((1, \u0027tabby\u0027), 2), ((2, \u0027mouse\u0027), 3), ((0, \u0027mouse\u0027), 4), ((0, \u0027cat\u0027), 5), ((1, \u0027black\u0027), 6)]\u003c/code\u003e. The dictionary defined in Part (1a) illustrates another valid mapping between keys and integers.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 15, 2016 10:50:33 PM",
      "dateStarted": "Apr 15, 2016 10:52:58 PM",
      "dateFinished": "Apr 15, 2016 10:52:58 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\nsampleOHEDict \u003d sampleDistinctFeats.zipWithIndex().collectAsMap()\n#print sampleOHEDict.first()\nprint sampleOHEDict",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 10:58:50 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460785977965_-1649112932",
      "id": "20160415-225257_1904426907",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "{(2, \u0027mouse\u0027): 1, (0, \u0027cat\u0027): 5, (0, \u0027bear\u0027): 0, (2, \u0027salmon\u0027): 2, (1, \u0027tabby\u0027): 3, (1, \u0027black\u0027): 6, (0, \u0027mouse\u0027): 4}\n"
      },
      "dateCreated": "Apr 15, 2016 10:52:57 PM",
      "dateStarted": "Apr 15, 2016 10:58:50 PM",
      "dateFinished": "Apr 15, 2016 10:58:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST OHE Dictionary from distinct features (2b)\nTest.assertEquals(sorted(sampleOHEDict.keys()),\n                  [(0, \u0027bear\u0027), (0, \u0027cat\u0027), (0, \u0027mouse\u0027), (1, \u0027black\u0027),\n                   (1, \u0027tabby\u0027), (2, \u0027mouse\u0027), (2, \u0027salmon\u0027)],\n                  \u0027sampleOHEDict has unexpected keys\u0027)\nTest.assertEquals(sorted(sampleOHEDict.values()), range(7), \u0027sampleOHEDict has unexpected values\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 11:00:02 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460786300504_1573065517",
      "id": "20160415-225820_1958641475",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 15, 2016 10:58:20 PM",
      "dateStarted": "Apr 15, 2016 11:00:02 PM",
      "dateFinished": "Apr 15, 2016 11:00:02 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **(2c) Automated creation of an OHE dictionary **\n#### Now use the code from Parts (2a) and (2b) to write a function that takes an input dataset and outputs an OHE dictionary.  Then use this function to create an OHE dictionary for the sample dataset, and verify that it matches the dictionary from Part (2b).",
      "authenticationInfo": {},
      "dateUpdated": "Apr 15, 2016 11:01:07 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460786402227_-865919058",
      "id": "20160415-230002_299237216",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003e(2c) Automated creation of an OHE dictionary \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eNow use the code from Parts (2a) and (2b) to write a function that takes an input dataset and outputs an OHE dictionary.  Then use this function to create an OHE dictionary for the sample dataset, and verify that it matches the dictionary from Part (2b).\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 15, 2016 11:00:02 PM",
      "dateStarted": "Apr 15, 2016 11:01:05 PM",
      "dateFinished": "Apr 15, 2016 11:01:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\ndef createOneHotDict(inputData):\n    \"\"\"Creates a one-hot-encoder dictionary based on the input data.\n\n    Args:\n        inputData (RDD of lists of (int, str)): An RDD of observations where each observation is\n            made up of a list of (featureID, value) tuples.\n\n    Returns:\n        dict: A dictionary where the keys are (featureID, value) tuples and map to values that are\n            unique integers.\n    \"\"\"\n    inputUniqueFeats \u003d inputData.flatMap(lambda x: x).distinct()\n    sampleOHEDict \u003d inputUniqueFeats.zipWithIndex().collectAsMap()\n    return sampleOHEDict\n    \n\nsampleOHEDictAuto \u003d createOneHotDict(sampleDataRDD)\nprint sampleOHEDictAuto",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:14:21 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460786465680_-2052625872",
      "id": "20160415-230105_334505237",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "{(2, \u0027mouse\u0027): 1, (0, \u0027cat\u0027): 5, (0, \u0027bear\u0027): 0, (2, \u0027salmon\u0027): 2, (1, \u0027tabby\u0027): 3, (1, \u0027black\u0027): 6, (0, \u0027mouse\u0027): 4}\n"
      },
      "dateCreated": "Apr 15, 2016 11:01:05 PM",
      "dateStarted": "Apr 16, 2016 10:14:21 PM",
      "dateFinished": "Apr 16, 2016 10:14:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Automated creation of an OHE dictionary (2c)\nTest.assertEquals(sorted(sampleOHEDictAuto.keys()),\n                  [(0, \u0027bear\u0027), (0, \u0027cat\u0027), (0, \u0027mouse\u0027), (1, \u0027black\u0027),\n                   (1, \u0027tabby\u0027), (2, \u0027mouse\u0027), (2, \u0027salmon\u0027)],\n                  \u0027sampleOHEDictAuto has unexpected keys\u0027)\nTest.assertEquals(sorted(sampleOHEDictAuto.values()), range(7),\n                  \u0027sampleOHEDictAuto has unexpected values\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:14:24 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460786687812_-763562171",
      "id": "20160415-230447_562839793",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 15, 2016 11:04:47 PM",
      "dateStarted": "Apr 16, 2016 10:14:25 PM",
      "dateFinished": "Apr 16, 2016 10:14:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### **Part 3: Parse CTR data and generate OHE features**\n#### Before we can proceed, you\u0027ll first need to obtain the data from Criteo.  If you have already completed this step in the setup lab, just run the cells below and the data will be loaded into the `rawData` variable.\n#### Below is Criteo\u0027s data sharing agreement.  After you accept the agreement, you can obtain the download URL by right-clicking on the \"Download Sample\" button and clicking \"Copy link address\" or \"Copy Link Location\", depending on your browser.  Paste the URL into the `# TODO` cell below.  The file is 8.4 MB compressed.  The script below will download the file to the virtual machine (VM) and then extract the data.\n#### If running the cell below does not render a webpage, open the [Criteo agreement](http://labs.criteo.com/downloads/2014-kaggle-display-advertising-challenge-dataset/) in a separate browser tab.  After you accept the agreement, you can obtain the download URL by right-clicking on the \"Download Sample\" button and clicking \"Copy link address\" or \"Copy Link Location\", depending on your browser.  Paste the URL into the `# TODO` cell below.\n#### Note that the download could take a few minutes, depending upon your connection speed.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 2:45:16 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460786721366_-361302000",
      "id": "20160415-230521_1016414741",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003e\u003cstrong\u003ePart 3: Parse CTR data and generate OHE features\u003c/strong\u003e\u003c/h3\u003e\n\u003ch4\u003eBefore we can proceed, you\u0027ll first need to obtain the data from Criteo.  If you have already completed this step in the setup lab, just run the cells below and the data will be loaded into the \u003ccode\u003erawData\u003c/code\u003e variable.\u003c/h4\u003e\n\u003ch4\u003eBelow is Criteo\u0027s data sharing agreement.  After you accept the agreement, you can obtain the download URL by right-clicking on the \u0026ldquo;Download Sample\u0026rdquo; button and clicking \u0026ldquo;Copy link address\u0026rdquo; or \u0026ldquo;Copy Link Location\u0026rdquo;, depending on your browser.  Paste the URL into the \u003ccode\u003e# TODO\u003c/code\u003e cell below.  The file is 8.4 MB compressed.  The script below will download the file to the virtual machine (VM) and then extract the data.\u003c/h4\u003e\n\u003ch4\u003eIf running the cell below does not render a webpage, open the \u003ca href\u003d\"http://labs.criteo.com/downloads/2014-kaggle-display-advertising-challenge-dataset/\"\u003eCriteo agreement\u003c/a\u003e in a separate browser tab.  After you accept the agreement, you can obtain the download URL by right-clicking on the \u0026ldquo;Download Sample\u0026rdquo; button and clicking \u0026ldquo;Copy link address\u0026rdquo; or \u0026ldquo;Copy Link Location\u0026rdquo;, depending on your browser.  Paste the URL into the \u003ccode\u003e# TODO\u003c/code\u003e cell below.\u003c/h4\u003e\n\u003ch4\u003eNote that the download could take a few minutes, depending upon your connection speed.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 15, 2016 11:05:21 PM",
      "dateStarted": "Apr 16, 2016 2:45:11 PM",
      "dateFinished": "Apr 16, 2016 2:45:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrawData \u003d (sc.textFile(\"dac_sample.txt\", 2)\n               .map(lambda x: x.replace(\u0027\\t\u0027, \u0027,\u0027)))  # work with either \u0027,\u0027 or \u0027\\t\u0027 separated data\nprint rawData.take(1)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 3:32:39 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460843111396_-92292773",
      "id": "20160416-144511_2040051602",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[u\u00270,1,1,5,0,1382,4,15,2,181,1,2,,2,68fd1e64,80e26c9b,fb936136,7b4723c4,25c83c98,7e0ccccf,de7995b8,1f89b562,a73ee510,a8cd5504,b2cb9c98,37c9c164,2824a5f6,1adce6ef,8ba8b39a,891b62e7,e5ba7672,f54016b9,21ddcdc9,b1252a9d,07b5194c,,3a171ecb,c5c50484,e8b83407,9727dd16\u0027]\n"
      },
      "dateCreated": "Apr 16, 2016 2:45:11 PM",
      "dateStarted": "Apr 16, 2016 3:32:39 PM",
      "dateFinished": "Apr 16, 2016 3:32:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **(3a) Loading and splitting the data **\n#### We are now ready to start working with the actual CTR data, and our first task involves splitting it into training, validation, and test sets.  Use the [randomSplit method](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.randomSplit) with the specified weights and seed to create RDDs storing each of these datasets, and then [cache](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.cache) each of these RDDs, as we will be accessing them multiple times in the remainder of this lab. Finally, compute the size of each dataset.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 3:39:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460845959896_-1161652818",
      "id": "20160416-153239_1375171109",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003e(3a) Loading and splitting the data \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eWe are now ready to start working with the actual CTR data, and our first task involves splitting it into training, validation, and test sets.  Use the \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.randomSplit\"\u003erandomSplit method\u003c/a\u003e with the specified weights and seed to create RDDs storing each of these datasets, and then \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.cache\"\u003ecache\u003c/a\u003e each of these RDDs, as we will be accessing them multiple times in the remainder of this lab. Finally, compute the size of each dataset.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 3:32:39 PM",
      "dateStarted": "Apr 16, 2016 3:33:11 PM",
      "dateFinished": "Apr 16, 2016 3:33:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\nweights \u003d [.8, .1, .1]\nseed \u003d 42\n# Use randomSplit with weights and seed\nrawTrainData, rawValidationData, rawTestData \u003d rawData.randomSplit(weights, seed)\n# Cache the data\nrawTrainData.cache()\nrawValidationData.cache()\nrawTestData.cache()\n\nnTrain \u003d rawTrainData.count()\nnVal \u003d rawValidationData.count()\nnTest \u003d rawTestData.count()\nprint nTrain, nVal, nTest, nTrain + nVal + nTest\nprint rawData.take(1)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:42:15 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460845991584_-2056917536",
      "id": "20160416-153311_1657116089",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "79911 10075 10014 100000\n[u\u00270,1,1,5,0,1382,4,15,2,181,1,2,,2,68fd1e64,80e26c9b,fb936136,7b4723c4,25c83c98,7e0ccccf,de7995b8,1f89b562,a73ee510,a8cd5504,b2cb9c98,37c9c164,2824a5f6,1adce6ef,8ba8b39a,891b62e7,e5ba7672,f54016b9,21ddcdc9,b1252a9d,07b5194c,,3a171ecb,c5c50484,e8b83407,9727dd16\u0027]\n"
      },
      "dateCreated": "Apr 16, 2016 3:33:11 PM",
      "dateStarted": "Apr 16, 2016 11:42:15 PM",
      "dateFinished": "Apr 16, 2016 11:42:17 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Loading and splitting the data (3a)\nTest.assertTrue(all([rawTrainData.is_cached, rawValidationData.is_cached, rawTestData.is_cached]),\n                \u0027you must cache the split data\u0027)\nTest.assertEquals(nTrain, 79911, \u0027incorrect value for nTrain\u0027)\nTest.assertEquals(nVal, 10075, \u0027incorrect value for nVal\u0027)\nTest.assertEquals(nTest, 10014, \u0027incorrect value for nTest\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 3:40:27 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460846367571_1499100365",
      "id": "20160416-153927_1760910054",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 3:39:27 PM",
      "dateStarted": "Apr 16, 2016 3:40:27 PM",
      "dateFinished": "Apr 16, 2016 3:40:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### ** (3b) Extract features **\n#### We will now parse the raw training data to create an RDD that we can subsequently use to create an OHE dictionary. Note from the `take()` command in Part (3a) that each raw data point is a string containing several fields separated by some delimiter.  For now, we will ignore the first field (which is the 0-1 label), and parse the remaining fields (or raw features).  To do this, complete the implemention of the `parsePoint` function.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 3:46:32 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460846427781_161990668",
      "id": "20160416-154027_1832438401",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (3b) Extract features \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eWe will now parse the raw training data to create an RDD that we can subsequently use to create an OHE dictionary. Note from the \u003ccode\u003etake()\u003c/code\u003e command in Part (3a) that each raw data point is a string containing several fields separated by some delimiter.  For now, we will ignore the first field (which is the 0-1 label), and parse the remaining fields (or raw features).  To do this, complete the implemention of the \u003ccode\u003eparsePoint\u003c/code\u003e function.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 3:40:27 PM",
      "dateStarted": "Apr 16, 2016 3:46:27 PM",
      "dateFinished": "Apr 16, 2016 3:46:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\ndef parsePoint(point):\n    \"\"\"Converts a comma separated string into a list of (featureID, value) tuples.\n\n    Note:\n        featureIDs should start at 0 and increase to the number of features - 1.\n\n    Args:\n        point (str): A comma separated string where the first value is the label and the rest\n            are features.\n\n    Returns:\n        list: A list of (featureID, value) tuples.\n    \"\"\"\n    rec \u003d point.split(\",\")\n    n \u003d len(rec) - 1 \n    output \u003d [(id, rec[id+1]) for id in range(0, n)] #id goes from 0 to len(rec) - 2\n    return output\n\nparsedTrainFeat \u003d rawTrainData.map(parsePoint)\n\nnumCategories \u003d (parsedTrainFeat\n                 .flatMap(lambda x: x)\n                 .distinct()\n                 .map(lambda x: (x[0], 1))\n                 .reduceByKey(lambda x, y: x + y)\n                 .sortByKey()\n                 .collect())\n\nprint numCategories[2][1]",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 3:52:51 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460846787481_-972573663",
      "id": "20160416-154627_1940569272",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "855\n"
      },
      "dateCreated": "Apr 16, 2016 3:46:27 PM",
      "dateStarted": "Apr 16, 2016 3:52:51 PM",
      "dateFinished": "Apr 16, 2016 3:52:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Extract features (3b)\nTest.assertEquals(numCategories[2][1], 855, \u0027incorrect implementation of parsePoint\u0027)\nTest.assertEquals(numCategories[32][1], 4, \u0027incorrect implementation of parsePoint\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 3:53:16 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460847171777_-935084453",
      "id": "20160416-155251_1101233724",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 3:52:51 PM",
      "dateStarted": "Apr 16, 2016 3:53:16 PM",
      "dateFinished": "Apr 16, 2016 3:53:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **(3c) Create an OHE dictionary from the dataset **\n#### Note that parsePoint returns a data point as a list of `(featureID, category)` tuples, which is the same format as the sample dataset studied in Parts 1 and 2 of this lab.  Using this observation, create an OHE dictionary using the function implemented in Part (2c). Note that we will assume for simplicity that all features in our CTR dataset are categorical.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 4:00:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460847196812_1207829003",
      "id": "20160416-155316_1306930108",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003e(3c) Create an OHE dictionary from the dataset \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eNote that parsePoint returns a data point as a list of \u003ccode\u003e(featureID, category)\u003c/code\u003e tuples, which is the same format as the sample dataset studied in Parts 1 and 2 of this lab.  Using this observation, create an OHE dictionary using the function implemented in Part (2c). Note that we will assume for simplicity that all features in our CTR dataset are categorical.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 3:53:16 PM",
      "dateStarted": "Apr 16, 2016 4:00:47 PM",
      "dateFinished": "Apr 16, 2016 4:00:47 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom pyspark.mllib.regression import LabeledPoint",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 4:02:03 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460847647123_1070501005",
      "id": "20160416-160047_2068187204",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 16, 2016 4:00:47 PM",
      "dateStarted": "Apr 16, 2016 4:02:03 PM",
      "dateFinished": "Apr 16, 2016 4:02:03 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nctrOHEDict \u003d createOneHotDict(parsedTrainFeat)\nnumCtrOHEFeats \u003d len(ctrOHEDict.keys())\nprint numCtrOHEFeats",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:34:05 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460853005857_-1108273485",
      "id": "20160416-173005_2128434693",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "233286\n"
      },
      "dateCreated": "Apr 16, 2016 5:30:05 PM",
      "dateStarted": "Apr 16, 2016 10:34:05 PM",
      "dateFinished": "Apr 16, 2016 10:34:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\ndef parseOHEPoint(point, OHEDict, numOHEFeats):\n    \"\"\"Obtain the label and feature vector for this raw observation.\n\n    Note:\n        You must use the function `oneHotEncoding` in this implementation or later portions\n        of this lab may not function as expected.\n\n    Args:\n        point (str): A comma separated string where the first value is the label and the rest\n            are features.\n        OHEDict (dict of (int, str) to int): Mapping of (featureID, value) to unique integer.\n        numOHEFeats (int): The number of unique features in the training dataset.\n\n    Returns:\n        LabeledPoint: Contains the label for the observation and the one-hot-encoding of the\n            raw features based on the provided OHE dictionary.\n    \"\"\"\n    rec \u003d point.split(\",\")\n    ptLabel \u003d rec[0]\n   \n    ptTuples \u003d parsePoint(point)\n    #sortPtTuples \u003d sorted(ptTuples)\n    \n    ctrSparseVector \u003d oneHotEncoding(ptTuples, OHEDict, numOHEFeats)\n    return LabeledPoint(ptLabel, ctrSparseVector)\n\n\nOHETrainData \u003d rawTrainData.map(lambda point: parseOHEPoint(point, ctrOHEDict, numCtrOHEFeats))\nOHETrainData.cache()\nprint OHETrainData.take(1)\n\n# Check that oneHotEncoding function was used in parseOHEPoint\nbackupOneHot \u003d oneHotEncoding\noneHotEncoding \u003d None\nwithOneHot \u003d False\ntry: parseOHEPoint(rawTrainData.take(1)[0], ctrOHEDict, numCtrOHEFeats)\nexcept TypeError: withOneHot \u003d True\noneHotEncoding \u003d backupOneHot",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:34:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460847723574_-117280147",
      "id": "20160416-160203_104749925",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[LabeledPoint(0.0, (233286,[386,3077,6799,8264,8862,11800,12802,16125,17551,18566,29331,33132,39525,55794,61786,81396,82659,93573,96929,100677,109699,110646,112132,120260,128596,132397,132803,140620,160675,185498,190370,191146,195925,202664,204273,206055,222737,225958,229942],[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]))]\n"
      },
      "dateCreated": "Apr 16, 2016 4:02:03 PM",
      "dateStarted": "Apr 16, 2016 10:34:17 PM",
      "dateFinished": "Apr 16, 2016 10:34:24 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Apply OHE to the dataset (3d)\nnumNZ \u003d sum(parsedTrainFeat.map(lambda x: len(x)).take(5))\nnumNZAlt \u003d sum(OHETrainData.map(lambda lp: len(lp.features.indices)).take(5))\nTest.assertEquals(numNZ, numNZAlt, \u0027incorrect implementation of parseOHEPoint\u0027)\nTest.assertTrue(withOneHot, \u0027oneHotEncoding not present in parseOHEPoint\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:34:30 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460852696778_1512622343",
      "id": "20160416-172456_1632056146",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 5:24:56 PM",
      "dateStarted": "Apr 16, 2016 10:34:30 PM",
      "dateFinished": "Apr 16, 2016 10:34:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **Visualization 1: Feature frequency **\n#### We will now visualize the number of times each of the 233,286 OHE features appears in the training data. We first compute the number of times each feature appears, then bucket the features by these counts.  The buckets are sized by powers of 2, so the first bucket corresponds to features that appear exactly once ( $ \\scriptsize 2^0 $ ), the second to features that appear twice ( $ \\scriptsize 2^1 $ ), the third to features that occur between three and four ( $ \\scriptsize 2^2 $ ) times, the fifth bucket is five to eight ( $ \\scriptsize 2^3 $ ) times and so on. The scatter plot below shows the logarithm of the bucket thresholds versus the logarithm of the number of features that have counts that fall in the buckets.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:19:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460870345601_795272565",
      "id": "20160416-221905_1473933037",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003eVisualization 1: Feature frequency \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eWe will now visualize the number of times each of the 233,286 OHE features appears in the training data. We first compute the number of times each feature appears, then bucket the features by these counts.  The buckets are sized by powers of 2, so the first bucket corresponds to features that appear exactly once ( $ \\scriptsize 2\u003csup\u003e0 $ ), the second to features that appear twice ( $ \\scriptsize 2\u003c/sup\u003e1 $ ), the third to features that occur between three and four ( $ \\scriptsize 2\u003csup\u003e2 $ ) times, the fifth bucket is five to eight ( $ \\scriptsize 2\u003c/sup\u003e3 $ ) times and so on. The scatter plot below shows the logarithm of the bucket thresholds versus the logarithm of the number of features that have counts that fall in the buckets.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 10:19:05 PM",
      "dateStarted": "Apr 16, 2016 10:19:31 PM",
      "dateFinished": "Apr 16, 2016 10:19:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndef bucketFeatByCount(featCount):\n    \"\"\"Bucket the counts by powers of two.\"\"\"\n    for i in range(11):\n        size \u003d 2 ** i\n        if featCount \u003c\u003d size:\n            return size\n    return -1\n\nfeatCounts \u003d (OHETrainData\n              .flatMap(lambda lp: lp.features.indices)\n              .map(lambda x: (x, 1))\n              .reduceByKey(lambda x, y: x + y))\nfeatCountsBuckets \u003d (featCounts\n                     .map(lambda x: (bucketFeatByCount(x[1]), 1))\n                     .filter(lambda (k, v): k !\u003d -1)\n                     .reduceByKey(lambda x, y: x + y)\n                     .collect())\nprint featCountsBuckets",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:34:41 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460870371714_915729619",
      "id": "20160416-221931_611855605",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[(256, 748), (1024, 255), (2, 24076), (4, 16639), (32, 4755), (8, 11440), (64, 2627), (128, 1476), (16, 7752), (512, 414), (1, 162813)]\n"
      },
      "dateCreated": "Apr 16, 2016 10:19:31 PM",
      "dateStarted": "Apr 16, 2016 10:34:41 PM",
      "dateFinished": "Apr 16, 2016 10:34:48 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n#code for plotting\nimport matplotlib\nmatplotlib.use(\u0027Agg\u0027)\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport StringIO\n\ndef showMPL(plot):\n    img \u003d StringIO.StringIO()\n    plot.savefig(img, format\u003d\u0027svg\u0027)\n    img.seek(0)\n    print \"%html \u003cdiv style\u003d\u0027width:600px\u0027\u003e\" + img.buf + \"\u003c/div\u003e\"\n    plt.close()\n",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:34:51 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460870578149_-236469098",
      "id": "20160416-222258_700038652",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 16, 2016 10:22:58 PM",
      "dateStarted": "Apr 16, 2016 10:34:51 PM",
      "dateFinished": "Apr 16, 2016 10:34:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport matplotlib.pyplot as plt\n\nx, y \u003d zip(*featCountsBuckets)\nx, y \u003d np.log(x), np.log(y)\n\ndef preparePlot(xticks, yticks, figsize\u003d(10.5, 6), hideLabels\u003dFalse, gridColor\u003d\u0027#999999\u0027,\n                gridWidth\u003d1.0):\n    \"\"\"Template for generating the plot layout.\"\"\"\n    plt.close()\n    fig, ax \u003d plt.subplots(figsize\u003dfigsize, facecolor\u003d\u0027white\u0027, edgecolor\u003d\u0027white\u0027)\n    ax.axes.tick_params(labelcolor\u003d\u0027#999999\u0027, labelsize\u003d\u002710\u0027)\n    for axis, ticks in [(ax.get_xaxis(), xticks), (ax.get_yaxis(), yticks)]:\n        axis.set_ticks_position(\u0027none\u0027)\n        axis.set_ticks(ticks)\n        axis.label.set_color(\u0027#999999\u0027)\n        if hideLabels: axis.set_ticklabels([])\n    plt.grid(color\u003dgridColor, linewidth\u003dgridWidth, linestyle\u003d\u0027-\u0027)\n    map(lambda position: ax.spines[position].set_visible(False), [\u0027bottom\u0027, \u0027top\u0027, \u0027left\u0027, \u0027right\u0027])\n    return fig, ax\n\n# generate layout and plot data\nfig, ax \u003d preparePlot(np.arange(0, 10, 1), np.arange(4, 14, 2))\nax.set_xlabel(r\u0027$\\log_e(bucketSize)$\u0027), ax.set_ylabel(r\u0027$\\log_e(countInBucket)$\u0027)\nplt.scatter(x, y, s\u003d14**2, c\u003d\u0027#d6ebf2\u0027, edgecolors\u003d\u0027#8cbfd0\u0027, alpha\u003d0.75)\nshowMPL(plt)\npass",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:34:54 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460870441799_-344784398",
      "id": "20160416-222041_257218840",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cdiv style\u003d\u0027width:600px\u0027\u003e\u003c?xml version\u003d\"1.0\" encoding\u003d\"utf-8\" standalone\u003d\"no\"?\u003e\n\u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e\n\u003c!-- Created with matplotlib (http://matplotlib.org/) --\u003e\n\u003csvg height\u003d\"432pt\" version\u003d\"1.1\" viewBox\u003d\"0 0 756 432\" width\u003d\"756pt\" xmlns\u003d\"http://www.w3.org/2000/svg\" xmlns:xlink\u003d\"http://www.w3.org/1999/xlink\"\u003e\n \u003cdefs\u003e\n  \u003cstyle type\u003d\"text/css\"\u003e\n*{stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:100000;}\n  \u003c/style\u003e\n \u003c/defs\u003e\n \u003cg id\u003d\"figure_1\"\u003e\n  \u003cg id\u003d\"patch_1\"\u003e\n   \u003cpath d\u003d\"M 0 432 \nL 756 432 \nL 756 0 \nL 0 0 \nz\n\" style\u003d\"fill:#ffffff;\"/\u003e\n  \u003c/g\u003e\n  \u003cg id\u003d\"axes_1\"\u003e\n   \u003cg id\u003d\"patch_2\"\u003e\n    \u003cpath d\u003d\"M 94.5 388.8 \nL 680.4 388.8 \nL 680.4 43.2 \nL 94.5 43.2 \nz\n\" style\u003d\"fill:#ffffff;\"/\u003e\n   \u003c/g\u003e\n   \u003cg id\u003d\"PathCollection_1\"\u003e\n    \u003cdefs\u003e\n     \u003cpath d\u003d\"M 0 7 \nC 1.856422 7 3.637059 6.262436 4.949747 4.949747 \nC 6.262436 3.637059 7 1.856422 7 0 \nC 7 -1.856422 6.262436 -3.637059 4.949747 -4.949747 \nC 3.637059 -6.262436 1.856422 -7 0 -7 \nC -1.856422 -7 -3.637059 -6.262436 -4.949747 -4.949747 \nC -6.262436 -3.637059 -7 -1.856422 -7 0 \nC -7 1.856422 -6.262436 3.637059 -4.949747 4.949747 \nC -3.637059 6.262436 -1.856422 7 0 7 \nz\n\" id\u003d\"m80e6487bea\" style\u003d\"stroke:#8cbfd0;stroke-opacity:0.75;\"/\u003e\n    \u003c/defs\u003e\n    \u003cg clip-path\u003d\"url(#p02db8d27eb)\"\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"542.900251536\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"314.100817145\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"646.53375256\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"363.125515686\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"180.182997952\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"155.949782611\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"231.999748464\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"172.78121391\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"387.45\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"229.842607426\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"283.816498976\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"189.848042389\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"439.266750512\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"256.873500613\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"491.083501024\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"283.136892193\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"335.633249488\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"207.576880945\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"594.717002048\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"341.048926674\"/\u003e\n     \u003cuse style\u003d\"fill:#d6ebf2;fill-opacity:0.75;stroke:#8cbfd0;stroke-opacity:0.75;\" x\u003d\"128.36624744\" xlink:href\u003d\"#m80e6487bea\" y\u003d\"68.8744843135\"/\u003e\n    \u003c/g\u003e\n   \u003c/g\u003e\n   \u003cg id\u003d\"matplotlib.axis_1\"\u003e\n    \u003cg id\u003d\"xtick_1\"\u003e\n     \u003cg id\u003d\"line2d_1\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 128.366247 388.8 \nL 128.366247 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_1\"\u003e\n      \u003c!-- 0 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 31.78125 66.40625 \nQ 24.171875 66.40625 20.328125 58.90625 \nQ 16.5 51.421875 16.5 36.375 \nQ 16.5 21.390625 20.328125 13.890625 \nQ 24.171875 6.390625 31.78125 6.390625 \nQ 39.453125 6.390625 43.28125 13.890625 \nQ 47.125 21.390625 47.125 36.375 \nQ 47.125 51.421875 43.28125 58.90625 \nQ 39.453125 66.40625 31.78125 66.40625 \nM 31.78125 74.21875 \nQ 44.046875 74.21875 50.515625 64.515625 \nQ 56.984375 54.828125 56.984375 36.375 \nQ 56.984375 17.96875 50.515625 8.265625 \nQ 44.046875 -1.421875 31.78125 -1.421875 \nQ 19.53125 -1.421875 13.0625 8.265625 \nQ 6.59375 17.96875 6.59375 36.375 \nQ 6.59375 54.828125 13.0625 64.515625 \nQ 19.53125 74.21875 31.78125 74.21875 \n\" id\u003d\"BitstreamVeraSans-Roman-30\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(125.18499744 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_2\"\u003e\n     \u003cg id\u003d\"line2d_2\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 203.122016 388.8 \nL 203.122016 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_2\"\u003e\n      \u003c!-- 1 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 12.40625 8.296875 \nL 28.515625 8.296875 \nL 28.515625 63.921875 \nL 10.984375 60.40625 \nL 10.984375 69.390625 \nL 28.421875 72.90625 \nL 38.28125 72.90625 \nL 38.28125 8.296875 \nL 54.390625 8.296875 \nL 54.390625 0 \nL 12.40625 0 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-31\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(199.940766438 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-31\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_3\"\u003e\n     \u003cg id\u003d\"line2d_3\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 277.877785 388.8 \nL 277.877785 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_3\"\u003e\n      \u003c!-- 2 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 19.1875 8.296875 \nL 53.609375 8.296875 \nL 53.609375 0 \nL 7.328125 0 \nL 7.328125 8.296875 \nQ 12.9375 14.109375 22.625 23.890625 \nQ 32.328125 33.6875 34.8125 36.53125 \nQ 39.546875 41.84375 41.421875 45.53125 \nQ 43.3125 49.21875 43.3125 52.78125 \nQ 43.3125 58.59375 39.234375 62.25 \nQ 35.15625 65.921875 28.609375 65.921875 \nQ 23.96875 65.921875 18.8125 64.3125 \nQ 13.671875 62.703125 7.8125 59.421875 \nL 7.8125 69.390625 \nQ 13.765625 71.78125 18.9375 73 \nQ 24.125 74.21875 28.421875 74.21875 \nQ 39.75 74.21875 46.484375 68.546875 \nQ 53.21875 62.890625 53.21875 53.421875 \nQ 53.21875 48.921875 51.53125 44.890625 \nQ 49.859375 40.875 45.40625 35.40625 \nQ 44.1875 33.984375 37.640625 27.21875 \nQ 31.109375 20.453125 19.1875 8.296875 \n\" id\u003d\"BitstreamVeraSans-Roman-32\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(274.696535437 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-32\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_4\"\u003e\n     \u003cg id\u003d\"line2d_4\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 352.633554 388.8 \nL 352.633554 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_4\"\u003e\n      \u003c!-- 3 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 40.578125 39.3125 \nQ 47.65625 37.796875 51.625 33 \nQ 55.609375 28.21875 55.609375 21.1875 \nQ 55.609375 10.40625 48.1875 4.484375 \nQ 40.765625 -1.421875 27.09375 -1.421875 \nQ 22.515625 -1.421875 17.65625 -0.515625 \nQ 12.796875 0.390625 7.625 2.203125 \nL 7.625 11.71875 \nQ 11.71875 9.328125 16.59375 8.109375 \nQ 21.484375 6.890625 26.8125 6.890625 \nQ 36.078125 6.890625 40.9375 10.546875 \nQ 45.796875 14.203125 45.796875 21.1875 \nQ 45.796875 27.640625 41.28125 31.265625 \nQ 36.765625 34.90625 28.71875 34.90625 \nL 20.21875 34.90625 \nL 20.21875 43.015625 \nL 29.109375 43.015625 \nQ 36.375 43.015625 40.234375 45.921875 \nQ 44.09375 48.828125 44.09375 54.296875 \nQ 44.09375 59.90625 40.109375 62.90625 \nQ 36.140625 65.921875 28.71875 65.921875 \nQ 24.65625 65.921875 20.015625 65.03125 \nQ 15.375 64.15625 9.8125 62.3125 \nL 9.8125 71.09375 \nQ 15.4375 72.65625 20.34375 73.4375 \nQ 25.25 74.21875 29.59375 74.21875 \nQ 40.828125 74.21875 47.359375 69.109375 \nQ 53.90625 64.015625 53.90625 55.328125 \nQ 53.90625 49.265625 50.4375 45.09375 \nQ 46.96875 40.921875 40.578125 39.3125 \n\" id\u003d\"BitstreamVeraSans-Roman-33\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(349.452304436 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-33\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_5\"\u003e\n     \u003cg id\u003d\"line2d_5\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 427.389323 388.8 \nL 427.389323 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_5\"\u003e\n      \u003c!-- 4 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 37.796875 64.3125 \nL 12.890625 25.390625 \nL 37.796875 25.390625 \nz\nM 35.203125 72.90625 \nL 47.609375 72.90625 \nL 47.609375 25.390625 \nL 58.015625 25.390625 \nL 58.015625 17.1875 \nL 47.609375 17.1875 \nL 47.609375 0 \nL 37.796875 0 \nL 37.796875 17.1875 \nL 4.890625 17.1875 \nL 4.890625 26.703125 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-34\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(424.208073435 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-34\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_6\"\u003e\n     \u003cg id\u003d\"line2d_6\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 502.145092 388.8 \nL 502.145092 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_6\"\u003e\n      \u003c!-- 5 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 10.796875 72.90625 \nL 49.515625 72.90625 \nL 49.515625 64.59375 \nL 19.828125 64.59375 \nL 19.828125 46.734375 \nQ 21.96875 47.46875 24.109375 47.828125 \nQ 26.265625 48.1875 28.421875 48.1875 \nQ 40.625 48.1875 47.75 41.5 \nQ 54.890625 34.8125 54.890625 23.390625 \nQ 54.890625 11.625 47.5625 5.09375 \nQ 40.234375 -1.421875 26.90625 -1.421875 \nQ 22.3125 -1.421875 17.546875 -0.640625 \nQ 12.796875 0.140625 7.71875 1.703125 \nL 7.71875 11.625 \nQ 12.109375 9.234375 16.796875 8.0625 \nQ 21.484375 6.890625 26.703125 6.890625 \nQ 35.15625 6.890625 40.078125 11.328125 \nQ 45.015625 15.765625 45.015625 23.390625 \nQ 45.015625 31 40.078125 35.4375 \nQ 35.15625 39.890625 26.703125 39.890625 \nQ 22.75 39.890625 18.8125 39.015625 \nQ 14.890625 38.140625 10.796875 36.28125 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-35\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(498.963842433 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-35\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_7\"\u003e\n     \u003cg id\u003d\"line2d_7\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 576.900861 388.8 \nL 576.900861 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_7\"\u003e\n      \u003c!-- 6 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 33.015625 40.375 \nQ 26.375 40.375 22.484375 35.828125 \nQ 18.609375 31.296875 18.609375 23.390625 \nQ 18.609375 15.53125 22.484375 10.953125 \nQ 26.375 6.390625 33.015625 6.390625 \nQ 39.65625 6.390625 43.53125 10.953125 \nQ 47.40625 15.53125 47.40625 23.390625 \nQ 47.40625 31.296875 43.53125 35.828125 \nQ 39.65625 40.375 33.015625 40.375 \nM 52.59375 71.296875 \nL 52.59375 62.3125 \nQ 48.875 64.0625 45.09375 64.984375 \nQ 41.3125 65.921875 37.59375 65.921875 \nQ 27.828125 65.921875 22.671875 59.328125 \nQ 17.53125 52.734375 16.796875 39.40625 \nQ 19.671875 43.65625 24.015625 45.921875 \nQ 28.375 48.1875 33.59375 48.1875 \nQ 44.578125 48.1875 50.953125 41.515625 \nQ 57.328125 34.859375 57.328125 23.390625 \nQ 57.328125 12.15625 50.6875 5.359375 \nQ 44.046875 -1.421875 33.015625 -1.421875 \nQ 20.359375 -1.421875 13.671875 8.265625 \nQ 6.984375 17.96875 6.984375 36.375 \nQ 6.984375 53.65625 15.1875 63.9375 \nQ 23.390625 74.21875 37.203125 74.21875 \nQ 40.921875 74.21875 44.703125 73.484375 \nQ 48.484375 72.75 52.59375 71.296875 \n\" id\u003d\"BitstreamVeraSans-Roman-36\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(573.719611432 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-36\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_8\"\u003e\n     \u003cg id\u003d\"line2d_8\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 651.65663 388.8 \nL 651.65663 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_8\"\u003e\n      \u003c!-- 7 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 8.203125 72.90625 \nL 55.078125 72.90625 \nL 55.078125 68.703125 \nL 28.609375 0 \nL 18.3125 0 \nL 43.21875 64.59375 \nL 8.203125 64.59375 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-37\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(648.475380431 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-37\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"text_9\"\u003e\n     \u003c!-- $\\log_e(bucketSize)$ --\u003e\n     \u003cdefs\u003e\n      \u003cpath d\u003d\"M 5.328125 1.8125 \nQ 5.328125 2.390625 5.421875 2.6875 \nL 19.921875 60.5 \nQ 20.3125 62.203125 20.40625 63.1875 \nQ 20.40625 64.796875 13.921875 64.796875 \nQ 12.890625 64.796875 12.890625 66.109375 \nQ 12.9375 66.359375 13.109375 66.984375 \nQ 13.28125 67.625 13.546875 67.96875 \nQ 13.8125 68.3125 14.3125 68.3125 \nL 27.78125 69.390625 \nL 28.078125 69.390625 \nQ 28.078125 69.28125 28.421875 69.109375 \nQ 28.765625 68.953125 28.8125 68.890625 \nQ 29 68.40625 29 68.109375 \nL 18.5 26.3125 \nQ 22.125 27.828125 27.609375 33.515625 \nQ 33.109375 39.203125 36.203125 41.6875 \nQ 39.3125 44.1875 44 44.1875 \nQ 46.78125 44.1875 48.734375 42.28125 \nQ 50.6875 40.375 50.6875 37.59375 \nQ 50.6875 35.84375 49.953125 34.34375 \nQ 49.21875 32.859375 47.890625 31.921875 \nQ 46.578125 31 44.828125 31 \nQ 43.21875 31 42.109375 32 \nQ 41.015625 33.015625 41.015625 34.625 \nQ 41.015625 37.015625 42.703125 38.640625 \nQ 44.390625 40.28125 46.78125 40.28125 \nQ 45.796875 41.609375 43.796875 41.609375 \nQ 40.828125 41.609375 38.0625 39.890625 \nQ 35.296875 38.1875 32.09375 34.984375 \nQ 28.90625 31.78125 26.265625 29.125 \nQ 23.640625 26.46875 21.390625 25.09375 \nQ 27.296875 24.421875 31.640625 22 \nQ 35.984375 19.578125 35.984375 14.59375 \nQ 35.984375 13.578125 35.59375 12.015625 \nQ 34.71875 8.25 34.71875 6 \nQ 34.71875 1.515625 37.796875 1.515625 \nQ 41.40625 1.515625 43.28125 5.46875 \nQ 45.171875 9.421875 46.390625 14.703125 \nQ 46.578125 15.28125 47.21875 15.28125 \nL 48.390625 15.28125 \nQ 48.78125 15.28125 49.046875 15.03125 \nQ 49.3125 14.796875 49.3125 14.40625 \nQ 49.3125 14.3125 49.21875 14.109375 \nQ 45.453125 -1.125 37.59375 -1.125 \nQ 34.765625 -1.125 32.59375 0.1875 \nQ 30.421875 1.515625 29.25 3.78125 \nQ 28.078125 6.0625 28.078125 8.890625 \nQ 28.078125 10.5 28.515625 12.203125 \nQ 28.8125 13.375 28.8125 14.40625 \nQ 28.8125 18.265625 25.390625 20.265625 \nQ 21.96875 22.265625 17.578125 22.703125 \nL 12.5 2.296875 \nQ 12.109375 0.78125 10.984375 -0.171875 \nQ 9.859375 -1.125 8.40625 -1.125 \nQ 7.125 -1.125 6.21875 -0.265625 \nQ 5.328125 0.59375 5.328125 1.8125 \n\" id\u003d\"Cmmi10-6b\"/\u003e\n      \u003cpath d\u003d\"M 31 -24.8125 \nQ 25.4375 -20.40625 21.40625 -14.71875 \nQ 17.390625 -9.03125 14.8125 -2.578125 \nQ 12.25 3.859375 10.984375 10.890625 \nQ 9.71875 17.921875 9.71875 25 \nQ 9.71875 32.171875 10.984375 39.203125 \nQ 12.25 46.234375 14.859375 52.734375 \nQ 17.484375 59.234375 21.53125 64.890625 \nQ 25.59375 70.5625 31 74.8125 \nQ 31 75 31.5 75 \nL 32.421875 75 \nQ 32.71875 75 32.953125 74.734375 \nQ 33.203125 74.46875 33.203125 74.125 \nQ 33.203125 73.6875 33.015625 73.484375 \nQ 28.125 68.703125 24.875 63.234375 \nQ 21.625 57.765625 19.640625 51.578125 \nQ 17.671875 45.40625 16.796875 38.78125 \nQ 15.921875 32.171875 15.921875 25 \nQ 15.921875 -6.78125 32.90625 -23.296875 \nQ 33.203125 -23.578125 33.203125 -24.125 \nQ 33.203125 -24.359375 32.9375 -24.671875 \nQ 32.671875 -25 32.421875 -25 \nL 31.5 -25 \nQ 31 -25 31 -24.8125 \n\" id\u003d\"Cmr10-28\"/\u003e\n      \u003cpath d\u003d\"M 6.5 -25 \nQ 5.609375 -25 5.609375 -24.125 \nQ 5.609375 -23.6875 5.8125 -23.484375 \nQ 22.90625 -6.78125 22.90625 25 \nQ 22.90625 56.78125 6 73.296875 \nQ 5.609375 73.53125 5.609375 74.125 \nQ 5.609375 74.46875 5.875 74.734375 \nQ 6.15625 75 6.5 75 \nL 7.421875 75 \nQ 7.71875 75 7.90625 74.8125 \nQ 15.09375 69.140625 19.875 61.03125 \nQ 24.65625 52.9375 26.875 43.75 \nQ 29.109375 34.578125 29.109375 25 \nQ 29.109375 17.921875 27.90625 11.0625 \nQ 26.703125 4.203125 24.09375 -2.453125 \nQ 21.484375 -9.125 17.484375 -14.765625 \nQ 13.484375 -20.40625 7.90625 -24.8125 \nQ 7.71875 -25 7.421875 -25 \nz\n\" id\u003d\"Cmr10-29\"/\u003e\n      \u003cpath d\u003d\"M 25 -1.125 \nQ 19 -1.125 13.859375 1.921875 \nQ 8.734375 4.984375 5.75 10.109375 \nQ 2.78125 15.234375 2.78125 21.296875 \nQ 2.78125 25.875 4.421875 30.125 \nQ 6.0625 34.375 9.109375 37.71875 \nQ 12.15625 41.0625 16.203125 42.9375 \nQ 20.265625 44.828125 25 44.828125 \nQ 31.15625 44.828125 36.203125 41.578125 \nQ 41.265625 38.328125 44.1875 32.875 \nQ 47.125 27.4375 47.125 21.296875 \nQ 47.125 15.28125 44.140625 10.125 \nQ 41.15625 4.984375 36.046875 1.921875 \nQ 30.953125 -1.125 25 -1.125 \nM 25 1.8125 \nQ 33.015625 1.8125 35.6875 7.609375 \nQ 38.375 13.421875 38.375 22.40625 \nQ 38.375 27.4375 37.84375 30.734375 \nQ 37.3125 34.03125 35.5 36.71875 \nQ 34.375 38.375 32.640625 39.625 \nQ 30.90625 40.875 28.96875 41.53125 \nQ 27.046875 42.1875 25 42.1875 \nQ 21.875 42.1875 19.0625 40.765625 \nQ 16.265625 39.359375 14.40625 36.71875 \nQ 12.546875 33.890625 12.03125 30.484375 \nQ 11.53125 27.09375 11.53125 22.40625 \nQ 11.53125 16.796875 12.5 12.328125 \nQ 13.484375 7.859375 16.4375 4.828125 \nQ 19.390625 1.8125 25 1.8125 \n\" id\u003d\"Cmr10-6f\"/\u003e\n      \u003cpath d\u003d\"M 6.109375 -2.203125 \nQ 5.8125 -2.203125 5.5625 -1.859375 \nQ 5.328125 -1.515625 5.328125 -1.21875 \nL 11.078125 22.125 \nQ 11.28125 22.703125 11.921875 22.703125 \nL 13.09375 22.703125 \nQ 13.484375 22.703125 13.703125 22.40625 \nQ 13.921875 22.125 13.921875 21.6875 \nQ 13.09375 18.265625 13.09375 15.578125 \nQ 13.09375 8.34375 18.0625 4.828125 \nQ 23.046875 1.3125 30.609375 1.3125 \nQ 33.890625 1.3125 37.0625 2.921875 \nQ 40.234375 4.546875 42.59375 7.125 \nQ 44.96875 9.71875 46.375 12.90625 \nQ 47.796875 16.109375 47.796875 19.390625 \nQ 47.796875 22.90625 45.9375 25.65625 \nQ 44.09375 28.421875 40.828125 29.203125 \nL 28.609375 32.421875 \nQ 23.6875 33.734375 20.75 37.71875 \nQ 17.828125 41.703125 17.828125 46.6875 \nQ 17.828125 52.6875 21.390625 58.25 \nQ 24.953125 63.8125 30.6875 67.15625 \nQ 36.421875 70.515625 42.390625 70.515625 \nQ 46.96875 70.515625 50.796875 68.828125 \nQ 54.640625 67.140625 56.6875 63.484375 \nL 62.40625 70.21875 \nQ 62.984375 70.515625 63.09375 70.515625 \nL 63.71875 70.515625 \nQ 64.109375 70.515625 64.34375 70.171875 \nQ 64.59375 69.828125 64.59375 69.484375 \nL 58.796875 46.296875 \nQ 58.640625 45.609375 58.015625 45.609375 \nL 56.78125 45.609375 \nQ 55.90625 45.609375 55.90625 46.6875 \nQ 56.390625 49.859375 56.390625 52.203125 \nQ 56.390625 56.84375 54.796875 60.28125 \nQ 53.21875 63.71875 50.015625 65.5 \nQ 46.828125 67.28125 42.09375 67.28125 \nQ 38.09375 67.28125 34.125 64.984375 \nQ 30.171875 62.703125 27.734375 58.890625 \nQ 25.296875 55.078125 25.296875 50.984375 \nQ 25.296875 47.75 27.171875 45.265625 \nQ 29.046875 42.78125 32.171875 41.890625 \nL 44.390625 38.71875 \nQ 47.703125 37.84375 50.171875 35.625 \nQ 52.640625 33.40625 53.90625 30.34375 \nQ 55.171875 27.296875 55.171875 23.6875 \nQ 55.171875 18.953125 53.171875 14.328125 \nQ 51.171875 9.71875 47.578125 5.90625 \nQ 44 2.09375 39.453125 -0.046875 \nQ 34.90625 -2.203125 30.171875 -2.203125 \nQ 18.265625 -2.203125 13.09375 4.78125 \nL 7.515625 -1.90625 \nQ 6.9375 -2.203125 6.78125 -2.203125 \nz\n\" id\u003d\"Cmmi10-53\"/\u003e\n      \u003cpath d\u003d\"M 3.078125 0 \nL 3.078125 3.515625 \nQ 6.5 3.515625 8.6875 4.046875 \nQ 10.890625 4.59375 10.890625 6.6875 \nL 10.890625 59.1875 \nQ 10.890625 61.859375 10.078125 63.0625 \nQ 9.28125 64.265625 7.765625 64.53125 \nQ 6.25 64.796875 3.078125 64.796875 \nL 3.078125 68.3125 \nL 17.921875 69.390625 \nL 17.921875 6.6875 \nQ 17.921875 4.59375 20.109375 4.046875 \nQ 22.3125 3.515625 25.6875 3.515625 \nL 25.6875 0 \nz\n\" id\u003d\"Cmr10-6c\"/\u003e\n      \u003cpath d\u003d\"M 11.71875 11.921875 \nQ 11.71875 7.5625 13.9375 4.53125 \nQ 16.15625 1.515625 20.3125 1.515625 \nQ 26.265625 1.515625 31.75 4.25 \nQ 37.25 6.984375 40.71875 11.8125 \nQ 41.015625 12.109375 41.5 12.109375 \nQ 42 12.109375 42.5 11.546875 \nQ 43.015625 10.984375 43.015625 10.5 \nQ 43.015625 10.109375 42.828125 9.90625 \nQ 39.15625 4.78125 32.953125 1.828125 \nQ 26.765625 -1.125 20.125 -1.125 \nQ 15.328125 -1.125 11.671875 1.140625 \nQ 8.015625 3.421875 6 7.21875 \nQ 4 11.03125 4 15.828125 \nQ 4 22.5625 7.765625 29.203125 \nQ 11.53125 35.84375 17.78125 40.015625 \nQ 24.03125 44.1875 30.90625 44.1875 \nQ 35.40625 44.1875 38.984375 42.015625 \nQ 42.578125 39.84375 42.578125 35.59375 \nQ 42.578125 32.859375 40.984375 30.921875 \nQ 39.40625 29 36.71875 29 \nQ 35.109375 29 34 30 \nQ 32.90625 31 32.90625 32.625 \nQ 32.90625 34.96875 34.609375 36.625 \nQ 36.328125 38.28125 38.625 38.28125 \nL 38.8125 38.28125 \nQ 37.640625 39.984375 35.421875 40.796875 \nQ 33.203125 41.609375 30.8125 41.609375 \nQ 24.953125 41.609375 20.546875 36.59375 \nQ 16.15625 31.59375 13.9375 24.625 \nQ 11.71875 17.671875 11.71875 11.921875 \n\" id\u003d\"Cmmi10-63\"/\u003e\n      \u003cpath d\u003d\"M 17.28125 -1.125 \nQ 11.234375 -1.125 7.859375 3.609375 \nQ 4.5 8.34375 4.5 14.703125 \nQ 4.5 15.625 4.953125 18.328125 \nQ 5.421875 21.046875 5.421875 21.6875 \nL 15.09375 60.5 \nQ 15.484375 62.203125 15.578125 63.1875 \nQ 15.578125 64.796875 9.078125 64.796875 \nQ 8.109375 64.796875 8.109375 66.109375 \nQ 8.15625 66.359375 8.328125 66.984375 \nQ 8.5 67.625 8.765625 67.96875 \nQ 9.03125 68.3125 9.515625 68.3125 \nL 23 69.390625 \nQ 24.21875 69.390625 24.21875 68.109375 \nL 16.796875 38.625 \nQ 22.46875 44.1875 28.21875 44.1875 \nQ 32.46875 44.1875 35.515625 41.9375 \nQ 38.578125 39.703125 40.09375 36.03125 \nQ 41.609375 32.375 41.609375 28.21875 \nQ 41.609375 23.390625 39.71875 18.234375 \nQ 37.84375 13.09375 34.515625 8.671875 \nQ 31.203125 4.25 26.75 1.5625 \nQ 22.3125 -1.125 17.28125 -1.125 \nM 17.484375 1.515625 \nQ 20.90625 1.515625 23.875 4.375 \nQ 26.859375 7.234375 28.71875 10.796875 \nQ 30.71875 14.796875 32.453125 21.65625 \nQ 34.1875 28.515625 34.1875 32.625 \nQ 34.1875 36.1875 32.6875 38.890625 \nQ 31.203125 41.609375 27.984375 41.609375 \nQ 24.359375 41.609375 21.0625 38.9375 \nQ 17.78125 36.28125 15.28125 32.625 \nL 12.5 21.296875 \nQ 10.890625 14.984375 10.796875 11.1875 \nQ 10.796875 7.421875 12.421875 4.46875 \nQ 14.0625 1.515625 17.484375 1.515625 \n\" id\u003d\"Cmmi10-62\"/\u003e\n      \u003cpath d\u003d\"M 20.125 -1.125 \nQ 15.328125 -1.125 11.734375 1.359375 \nQ 8.15625 3.859375 6.265625 8.078125 \nQ 4.390625 12.3125 4.390625 17 \nQ 4.390625 24.125 7.984375 30.390625 \nQ 11.578125 36.671875 17.71875 40.421875 \nQ 23.875 44.1875 30.90625 44.1875 \nQ 35.203125 44.1875 38.40625 41.96875 \nQ 41.609375 39.75 41.609375 35.59375 \nQ 41.609375 29.828125 37.015625 27.015625 \nQ 32.421875 24.21875 26.65625 23.5625 \nQ 20.90625 22.90625 13.921875 22.90625 \nL 13.625 22.90625 \nQ 12.015625 16.9375 12.015625 12.703125 \nQ 12.015625 8.25 14.0625 4.875 \nQ 16.109375 1.515625 20.3125 1.515625 \nQ 26.265625 1.515625 31.75 4.25 \nQ 37.25 6.984375 40.71875 11.8125 \nQ 41.015625 12.109375 41.5 12.109375 \nQ 42 12.109375 42.5 11.546875 \nQ 43.015625 10.984375 43.015625 10.5 \nQ 43.015625 10.109375 42.828125 9.90625 \nQ 39.15625 4.78125 32.953125 1.828125 \nQ 26.765625 -1.125 20.125 -1.125 \nM 14.203125 25.484375 \nQ 20.015625 25.484375 24.953125 26.015625 \nQ 29.890625 26.5625 33.890625 28.734375 \nQ 37.890625 30.90625 37.890625 35.5 \nQ 37.890625 37.359375 36.859375 38.75 \nQ 35.84375 40.140625 34.203125 40.875 \nQ 32.5625 41.609375 30.8125 41.609375 \nQ 26.5625 41.609375 23.171875 39.3125 \nQ 19.78125 37.015625 17.578125 33.328125 \nQ 15.375 29.640625 14.203125 25.484375 \n\" id\u003d\"Cmmi10-65\"/\u003e\n      \u003cpath d\u003d\"M 6.203125 8.109375 \nQ 6.203125 9.578125 6.5 10.890625 \nL 13.71875 39.59375 \nL 3.21875 39.59375 \nQ 2.203125 39.59375 2.203125 40.921875 \nQ 2.59375 43.109375 3.515625 43.109375 \nL 14.59375 43.109375 \nL 18.609375 59.421875 \nQ 19 60.75 20.171875 61.671875 \nQ 21.34375 62.59375 22.796875 62.59375 \nQ 24.078125 62.59375 24.921875 61.828125 \nQ 25.78125 61.078125 25.78125 59.8125 \nQ 25.78125 59.515625 25.75 59.34375 \nQ 25.734375 59.1875 25.6875 58.984375 \nL 21.6875 43.109375 \nL 31.984375 43.109375 \nQ 33.015625 43.109375 33.015625 41.796875 \nQ 32.953125 41.546875 32.8125 40.953125 \nQ 32.671875 40.375 32.421875 39.984375 \nQ 32.171875 39.59375 31.6875 39.59375 \nL 20.796875 39.59375 \nL 13.625 10.6875 \nQ 12.890625 7.859375 12.890625 5.8125 \nQ 12.890625 1.515625 15.828125 1.515625 \nQ 20.21875 1.515625 23.609375 5.640625 \nQ 27 9.765625 28.8125 14.703125 \nQ 29.203125 15.28125 29.59375 15.28125 \nL 30.8125 15.28125 \nQ 31.203125 15.28125 31.4375 15.015625 \nQ 31.6875 14.75 31.6875 14.40625 \nQ 31.6875 14.203125 31.59375 14.109375 \nQ 29.390625 8.0625 25.1875 3.46875 \nQ 21 -1.125 15.578125 -1.125 \nQ 11.625 -1.125 8.90625 1.453125 \nQ 6.203125 4.046875 6.203125 8.109375 \n\" id\u003d\"Cmmi10-74\"/\u003e\n      \u003cpath d\u003d\"M 10.59375 10.890625 \nQ 10.59375 14.15625 11.46875 17.59375 \nQ 12.359375 21.046875 13.9375 25.265625 \nQ 15.53125 29.5 16.703125 32.625 \nQ 18.015625 36.28125 18.015625 38.625 \nQ 18.015625 41.609375 15.828125 41.609375 \nQ 11.859375 41.609375 9.296875 37.53125 \nQ 6.734375 33.453125 5.515625 28.421875 \nQ 5.328125 27.78125 4.6875 27.78125 \nL 3.515625 27.78125 \nQ 2.6875 27.78125 2.6875 28.71875 \nL 2.6875 29 \nQ 4.296875 34.96875 7.609375 39.578125 \nQ 10.9375 44.1875 16.015625 44.1875 \nQ 19.578125 44.1875 22.046875 41.84375 \nQ 24.515625 39.5 24.515625 35.890625 \nQ 24.515625 34.03125 23.6875 31.984375 \nQ 23.25 30.765625 21.6875 26.65625 \nQ 20.125 22.5625 19.28125 19.875 \nQ 18.453125 17.1875 17.921875 14.59375 \nQ 17.390625 12.015625 17.390625 9.421875 \nQ 17.390625 6.109375 18.796875 3.8125 \nQ 20.21875 1.515625 23.390625 1.515625 \nQ 29.78125 1.515625 34.625 9.421875 \nQ 34.71875 9.8125 34.78125 10.171875 \nQ 34.859375 10.546875 34.90625 10.890625 \nL 42.09375 39.890625 \nQ 42.4375 41.21875 43.65625 42.15625 \nQ 44.875 43.109375 46.296875 43.109375 \nQ 47.515625 43.109375 48.40625 42.328125 \nQ 49.3125 41.546875 49.3125 40.28125 \nQ 49.3125 39.703125 49.21875 39.5 \nL 42 10.6875 \nQ 41.3125 7.71875 41.3125 5.8125 \nQ 41.3125 1.515625 44.1875 1.515625 \nQ 47.40625 1.515625 49 5.484375 \nQ 50.59375 9.46875 51.703125 14.703125 \nQ 51.90625 15.28125 52.484375 15.28125 \nL 53.71875 15.28125 \nQ 54.109375 15.28125 54.34375 14.9375 \nQ 54.59375 14.59375 54.59375 14.3125 \nQ 53.515625 10.015625 52.515625 6.9375 \nQ 51.515625 3.859375 49.359375 1.359375 \nQ 47.21875 -1.125 44 -1.125 \nQ 40.828125 -1.125 38.3125 0.609375 \nQ 35.796875 2.34375 34.90625 5.328125 \nQ 32.625 2.390625 29.59375 0.625 \nQ 26.5625 -1.125 23.1875 -1.125 \nQ 17.4375 -1.125 14.015625 2.015625 \nQ 10.59375 5.171875 10.59375 10.890625 \n\" id\u003d\"Cmmi10-75\"/\u003e\n      \u003cpath d\u003d\"M 7.8125 7.171875 \nQ 7.8125 9.03125 8.59375 11.078125 \nL 16.703125 32.625 \nQ 18.015625 36.28125 18.015625 38.625 \nQ 18.015625 41.609375 15.828125 41.609375 \nQ 11.859375 41.609375 9.296875 37.53125 \nQ 6.734375 33.453125 5.515625 28.421875 \nQ 5.328125 27.78125 4.6875 27.78125 \nL 3.515625 27.78125 \nQ 2.6875 27.78125 2.6875 28.71875 \nL 2.6875 29 \nQ 4.296875 34.96875 7.609375 39.578125 \nQ 10.9375 44.1875 16.015625 44.1875 \nQ 19.578125 44.1875 22.046875 41.84375 \nQ 24.515625 39.5 24.515625 35.890625 \nQ 24.515625 34.03125 23.6875 31.984375 \nL 15.578125 10.5 \nQ 14.203125 7.171875 14.203125 4.5 \nQ 14.203125 1.515625 16.5 1.515625 \nQ 20.40625 1.515625 23.015625 5.6875 \nQ 25.640625 9.859375 26.703125 14.703125 \nQ 26.90625 15.28125 27.484375 15.28125 \nL 28.71875 15.28125 \nQ 29.109375 15.28125 29.34375 15.015625 \nQ 29.59375 14.75 29.59375 14.40625 \nQ 29.59375 14.3125 29.5 14.109375 \nQ 28.125 8.453125 24.734375 3.65625 \nQ 21.34375 -1.125 16.3125 -1.125 \nQ 12.796875 -1.125 10.296875 1.296875 \nQ 7.8125 3.71875 7.8125 7.171875 \nM 19.09375 60.59375 \nQ 19.09375 62.703125 20.84375 64.40625 \nQ 22.609375 66.109375 24.703125 66.109375 \nQ 26.421875 66.109375 27.515625 65.0625 \nQ 28.609375 64.015625 28.609375 62.40625 \nQ 28.609375 60.15625 26.828125 58.46875 \nQ 25.046875 56.78125 22.90625 56.78125 \nQ 21.296875 56.78125 20.1875 57.875 \nQ 19.09375 58.984375 19.09375 60.59375 \n\" id\u003d\"Cmmi10-69\"/\u003e\n      \u003cpath d\u003d\"M 2.78125 -7.8125 \nQ 2.78125 -4.25 5.359375 -1.578125 \nQ 7.953125 1.078125 11.53125 2.203125 \nQ 9.515625 3.71875 8.46875 6 \nQ 7.421875 8.296875 7.421875 10.890625 \nQ 7.421875 15.578125 10.40625 19.1875 \nQ 5.8125 23.6875 5.8125 29.5 \nQ 5.8125 32.625 7.15625 35.359375 \nQ 8.5 38.09375 10.890625 40.09375 \nQ 13.28125 42.09375 16.203125 43.140625 \nQ 19.140625 44.1875 22.21875 44.1875 \nQ 28.171875 44.1875 32.90625 40.71875 \nQ 34.96875 42.921875 37.765625 44.109375 \nQ 40.578125 45.3125 43.609375 45.3125 \nQ 45.75 45.3125 47.109375 43.765625 \nQ 48.484375 42.234375 48.484375 40.09375 \nQ 48.484375 38.875 47.546875 37.9375 \nQ 46.625 37.015625 45.40625 37.015625 \nQ 44.140625 37.015625 43.203125 37.9375 \nQ 42.28125 38.875 42.28125 40.09375 \nQ 42.28125 41.9375 43.5 42.671875 \nQ 38.328125 42.671875 34.625 39.109375 \nQ 36.421875 37.3125 37.515625 34.6875 \nQ 38.625 32.078125 38.625 29.5 \nQ 38.625 25.25 36.28125 21.84375 \nQ 33.9375 18.453125 30.09375 16.578125 \nQ 26.265625 14.703125 22.21875 14.703125 \nQ 16.75 14.703125 12.203125 17.671875 \nQ 10.796875 15.71875 10.796875 13.28125 \nQ 10.796875 10.640625 12.53125 8.65625 \nQ 14.265625 6.6875 16.890625 6.6875 \nL 25.09375 6.6875 \nQ 31.0625 6.6875 35.84375 5.609375 \nQ 40.625 4.546875 43.875 1.3125 \nQ 47.125 -1.90625 47.125 -7.8125 \nQ 47.125 -12.203125 43.40625 -15.109375 \nQ 39.703125 -18.015625 34.546875 -19.3125 \nQ 29.390625 -20.609375 25 -20.609375 \nQ 20.5625 -20.609375 15.375 -19.3125 \nQ 10.203125 -18.015625 6.484375 -15.109375 \nQ 2.78125 -12.203125 2.78125 -7.8125 \nM 8.40625 -7.8125 \nQ 8.40625 -11.1875 11.140625 -13.453125 \nQ 13.875 -15.71875 17.71875 -16.8125 \nQ 21.578125 -17.921875 25 -17.921875 \nQ 28.375 -17.921875 32.21875 -16.8125 \nQ 36.078125 -15.71875 38.78125 -13.453125 \nQ 41.5 -11.1875 41.5 -7.8125 \nQ 41.5 -2.59375 36.71875 -1.046875 \nQ 31.9375 0.484375 25.09375 0.484375 \nL 16.890625 0.484375 \nQ 14.59375 0.484375 12.671875 -0.609375 \nQ 10.75 -1.703125 9.578125 -3.6875 \nQ 8.40625 -5.671875 8.40625 -7.8125 \nM 22.21875 17.390625 \nQ 30.71875 17.390625 30.71875 29.5 \nQ 30.71875 34.71875 28.90625 38.109375 \nQ 27.09375 41.5 22.21875 41.5 \nQ 17.328125 41.5 15.515625 38.109375 \nQ 13.71875 34.71875 13.71875 29.5 \nQ 13.71875 26.171875 14.40625 23.484375 \nQ 15.09375 20.796875 16.9375 19.09375 \nQ 18.796875 17.390625 22.21875 17.390625 \n\" id\u003d\"Cmr10-67\"/\u003e\n      \u003cpath d\u003d\"M 4.890625 -1.125 \nQ 4.109375 -1.125 4.109375 -0.203125 \nQ 4.109375 0.296875 4.296875 0.484375 \nQ 6.984375 5.125 10.765625 9.34375 \nQ 14.546875 13.578125 19.359375 17.890625 \nQ 24.171875 22.21875 29.03125 26.5625 \nQ 33.890625 30.90625 36.921875 34.28125 \nL 36.53125 34.28125 \nQ 34.328125 34.28125 30.078125 35.6875 \nQ 25.828125 37.109375 23.390625 37.109375 \nQ 20.75 37.109375 18.25 35.953125 \nQ 15.765625 34.8125 15.09375 32.421875 \nQ 14.9375 31.6875 14.3125 31.6875 \nL 13.09375 31.6875 \nQ 12.3125 31.6875 12.3125 32.71875 \nL 12.3125 33.015625 \nQ 13.09375 35.9375 14.875 38.46875 \nQ 16.65625 41.015625 19.265625 42.59375 \nQ 21.875 44.1875 24.703125 44.1875 \nQ 26.703125 44.1875 28.015625 43.28125 \nQ 29.34375 42.390625 31.09375 40.484375 \nQ 32.859375 38.578125 33.953125 37.75 \nQ 35.0625 36.921875 36.71875 36.921875 \nQ 38.921875 36.921875 40.65625 38.921875 \nQ 42.390625 40.921875 44.09375 43.890625 \nQ 44.390625 44.1875 44.828125 44.1875 \nL 46 44.1875 \nQ 46.34375 44.1875 46.5625 43.9375 \nQ 46.78125 43.703125 46.78125 43.3125 \nQ 46.78125 42.96875 46.578125 42.671875 \nQ 43.890625 38.03125 40.296875 34 \nQ 36.71875 29.984375 30.921875 24.78125 \nQ 25.140625 19.578125 21.15625 15.984375 \nQ 17.1875 12.40625 13.71875 8.59375 \nQ 14.5 8.796875 15.828125 8.796875 \nQ 18.265625 8.796875 22.484375 7.390625 \nQ 26.703125 6 29 6 \nQ 31.5 6 34.03125 7.078125 \nQ 36.578125 8.15625 38.421875 10.109375 \nQ 40.28125 12.0625 40.921875 14.59375 \nQ 41.15625 15.28125 41.703125 15.28125 \nL 42.921875 15.28125 \nQ 43.3125 15.28125 43.546875 14.96875 \nQ 43.796875 14.65625 43.796875 14.3125 \nQ 43.796875 14.203125 43.703125 14.015625 \nQ 42.78125 10.203125 40.484375 6.765625 \nQ 38.1875 3.328125 34.84375 1.09375 \nQ 31.5 -1.125 27.6875 -1.125 \nQ 25.78125 -1.125 24.453125 -0.234375 \nQ 23.140625 0.640625 21.359375 2.5625 \nQ 19.578125 4.5 18.453125 5.34375 \nQ 17.328125 6.203125 15.71875 6.203125 \nQ 10.75 6.203125 6.78125 -0.78125 \nQ 6.453125 -1.125 6.109375 -1.125 \nz\n\" id\u003d\"Cmmi10-7a\"/\u003e\n     \u003c/defs\u003e\n     \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(344.49 416.478125)scale(0.12 -0.12)\"\u003e\n      \u003cuse xlink:href\u003d\"#Cmr10-6c\"/\u003e\n      \u003cuse transform\u003d\"translate(27.685546875 0.0)\" xlink:href\u003d\"#Cmr10-6f\"/\u003e\n      \u003cuse transform\u003d\"translate(77.685546875 0.0)\" xlink:href\u003d\"#Cmr10-67\"/\u003e\n      \u003cuse transform\u003d\"translate(132.1496875 -17.00625)scale(0.7)\" xlink:href\u003d\"#Cmmi10-65\"/\u003e\n      \u003cuse transform\u003d\"translate(171.06609375 0.0)\" xlink:href\u003d\"#Cmr10-28\"/\u003e\n      \u003cuse transform\u003d\"translate(209.884453125 0.0)\" xlink:href\u003d\"#Cmmi10-62\"/\u003e\n      \u003cuse transform\u003d\"translate(252.804375 0.0)\" xlink:href\u003d\"#Cmmi10-75\"/\u003e\n      \u003cuse transform\u003d\"translate(309.982109375 0.0)\" xlink:href\u003d\"#Cmmi10-63\"/\u003e\n      \u003cuse transform\u003d\"translate(353.195 0.0)\" xlink:href\u003d\"#Cmmi10-6b\"/\u003e\n      \u003cuse transform\u003d\"translate(405.196953125 0.0)\" xlink:href\u003d\"#Cmmi10-65\"/\u003e\n      \u003cuse transform\u003d\"translate(451.681328125 0.0)\" xlink:href\u003d\"#Cmmi10-74\"/\u003e\n      \u003cuse transform\u003d\"translate(487.7653125 0.0)\" xlink:href\u003d\"#Cmmi10-53\"/\u003e\n      \u003cuse transform\u003d\"translate(549.044609375 0.0)\" xlink:href\u003d\"#Cmmi10-69\"/\u003e\n      \u003cuse transform\u003d\"translate(583.4684375 0.0)\" xlink:href\u003d\"#Cmmi10-7a\"/\u003e\n      \u003cuse transform\u003d\"translate(629.9528125 0.0)\" xlink:href\u003d\"#Cmmi10-65\"/\u003e\n      \u003cuse transform\u003d\"translate(676.4371875 0.0)\" xlink:href\u003d\"#Cmr10-29\"/\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n   \u003c/g\u003e\n   \u003cg id\u003d\"matplotlib.axis_2\"\u003e\n    \u003cg id\u003d\"ytick_1\"\u003e\n     \u003cg id\u003d\"line2d_9\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 94.5 342.227279 \nL 680.4 342.227279 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_10\"\u003e\n      \u003c!-- 6 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(84.1375 344.986654154)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-36\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_2\"\u003e\n     \u003cg id\u003d\"line2d_10\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 94.5 251.115111 \nL 680.4 251.115111 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_11\"\u003e\n      \u003c!-- 8 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 31.78125 34.625 \nQ 24.75 34.625 20.71875 30.859375 \nQ 16.703125 27.09375 16.703125 20.515625 \nQ 16.703125 13.921875 20.71875 10.15625 \nQ 24.75 6.390625 31.78125 6.390625 \nQ 38.8125 6.390625 42.859375 10.171875 \nQ 46.921875 13.96875 46.921875 20.515625 \nQ 46.921875 27.09375 42.890625 30.859375 \nQ 38.875 34.625 31.78125 34.625 \nM 21.921875 38.8125 \nQ 15.578125 40.375 12.03125 44.71875 \nQ 8.5 49.078125 8.5 55.328125 \nQ 8.5 64.0625 14.71875 69.140625 \nQ 20.953125 74.21875 31.78125 74.21875 \nQ 42.671875 74.21875 48.875 69.140625 \nQ 55.078125 64.0625 55.078125 55.328125 \nQ 55.078125 49.078125 51.53125 44.71875 \nQ 48 40.375 41.703125 38.8125 \nQ 48.828125 37.15625 52.796875 32.3125 \nQ 56.78125 27.484375 56.78125 20.515625 \nQ 56.78125 9.90625 50.3125 4.234375 \nQ 43.84375 -1.421875 31.78125 -1.421875 \nQ 19.734375 -1.421875 13.25 4.234375 \nQ 6.78125 9.90625 6.78125 20.515625 \nQ 6.78125 27.484375 10.78125 32.3125 \nQ 14.796875 37.15625 21.921875 38.8125 \nM 18.3125 54.390625 \nQ 18.3125 48.734375 21.84375 45.5625 \nQ 25.390625 42.390625 31.78125 42.390625 \nQ 38.140625 42.390625 41.71875 45.5625 \nQ 45.3125 48.734375 45.3125 54.390625 \nQ 45.3125 60.0625 41.71875 63.234375 \nQ 38.140625 66.40625 31.78125 66.40625 \nQ 25.390625 66.40625 21.84375 63.234375 \nQ 18.3125 60.0625 18.3125 54.390625 \n\" id\u003d\"BitstreamVeraSans-Roman-38\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(84.1375 253.874485885)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-38\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_3\"\u003e\n     \u003cg id\u003d\"line2d_11\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 94.5 160.002943 \nL 680.4 160.002943 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_12\"\u003e\n      \u003c!-- 10 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(77.775 162.762317616)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-31\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_4\"\u003e\n     \u003cg id\u003d\"line2d_12\"\u003e\n      \u003cpath clip-path\u003d\"url(#p02db8d27eb)\" d\u003d\"M 94.5 68.890774 \nL 680.4 68.890774 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_13\"\u003e\n      \u003c!-- 12 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(77.775 71.6501493466)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-31\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-32\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"text_14\"\u003e\n     \u003c!-- $\\log_e(countInBucket)$ --\u003e\n     \u003cdefs\u003e\n      \u003cpath d\u003d\"M 7.71875 1.703125 \nQ 7.71875 2.296875 7.8125 2.59375 \nL 15.28125 32.421875 \nQ 16.015625 35.203125 16.015625 37.3125 \nQ 16.015625 41.609375 13.09375 41.609375 \nQ 9.96875 41.609375 8.453125 37.859375 \nQ 6.9375 34.125 5.515625 28.421875 \nQ 5.515625 28.125 5.21875 27.953125 \nQ 4.9375 27.78125 4.6875 27.78125 \nL 3.515625 27.78125 \nQ 3.171875 27.78125 2.921875 28.140625 \nQ 2.6875 28.515625 2.6875 28.8125 \nQ 3.765625 33.15625 4.765625 36.171875 \nQ 5.765625 39.203125 7.890625 41.6875 \nQ 10.015625 44.1875 13.1875 44.1875 \nQ 16.9375 44.1875 19.8125 41.8125 \nQ 22.703125 39.453125 22.703125 35.796875 \nQ 25.6875 39.703125 29.6875 41.9375 \nQ 33.6875 44.1875 38.1875 44.1875 \nQ 41.75 44.1875 44.328125 42.96875 \nQ 46.921875 41.75 48.359375 39.28125 \nQ 49.8125 36.8125 49.8125 33.40625 \nQ 49.8125 29.296875 47.96875 23.484375 \nQ 46.140625 17.671875 43.40625 10.5 \nQ 42 7.234375 42 4.5 \nQ 42 1.515625 44.28125 1.515625 \nQ 48.1875 1.515625 50.796875 5.703125 \nQ 53.421875 9.90625 54.5 14.703125 \nQ 54.6875 15.28125 55.328125 15.28125 \nL 56.5 15.28125 \nQ 56.890625 15.28125 57.15625 15.03125 \nQ 57.421875 14.796875 57.421875 14.40625 \nQ 57.421875 14.3125 57.328125 14.109375 \nQ 55.953125 8.453125 52.5625 3.65625 \nQ 49.171875 -1.125 44.09375 -1.125 \nQ 40.578125 -1.125 38.078125 1.296875 \nQ 35.59375 3.71875 35.59375 7.171875 \nQ 35.59375 9.03125 36.375 11.078125 \nQ 37.640625 14.359375 39.28125 18.890625 \nQ 40.921875 23.4375 41.96875 27.578125 \nQ 43.015625 31.734375 43.015625 34.90625 \nQ 43.015625 37.703125 41.859375 39.65625 \nQ 40.71875 41.609375 37.984375 41.609375 \nQ 34.328125 41.609375 31.25 39.984375 \nQ 28.171875 38.375 25.875 35.71875 \nQ 23.578125 33.0625 21.6875 29.390625 \nL 14.890625 2.203125 \nQ 14.546875 0.828125 13.34375 -0.140625 \nQ 12.15625 -1.125 10.6875 -1.125 \nQ 9.46875 -1.125 8.59375 -0.34375 \nQ 7.71875 0.4375 7.71875 1.703125 \n\" id\u003d\"Cmmi10-6e\"/\u003e\n      \u003cpath d\u003d\"M 4.984375 0 \nQ 4 0 4 1.3125 \nQ 4.046875 1.5625 4.1875 2.140625 \nQ 4.34375 2.734375 4.578125 3.125 \nQ 4.828125 3.515625 5.328125 3.515625 \nQ 8.15625 3.515625 10.25 3.65625 \nQ 12.359375 3.8125 13.8125 4.203125 \nQ 14.984375 4.640625 15.71875 6.890625 \nL 29.390625 61.8125 \nQ 29.59375 62.796875 29.59375 63.1875 \nQ 29.59375 64.265625 28.421875 64.40625 \nQ 26.515625 64.796875 21.1875 64.796875 \nQ 20.21875 64.796875 20.21875 66.109375 \nQ 20.265625 66.359375 20.40625 66.96875 \nQ 20.5625 67.578125 20.828125 67.9375 \nQ 21.09375 68.3125 21.484375 68.3125 \nL 57.328125 68.3125 \nQ 60.59375 68.3125 63.796875 67.5 \nQ 67 66.703125 69.703125 64.9375 \nQ 72.40625 63.1875 74 60.5625 \nQ 75.59375 57.953125 75.59375 54.5 \nQ 75.59375 50.734375 73.65625 47.5 \nQ 71.734375 44.28125 68.671875 41.890625 \nQ 65.625 39.5 62.078125 37.953125 \nQ 58.546875 36.421875 54.6875 35.6875 \nQ 57.421875 35.6875 60.21875 34.609375 \nQ 63.03125 33.546875 65.234375 31.6875 \nQ 67.4375 29.828125 68.78125 27.234375 \nQ 70.125 24.65625 70.125 21.6875 \nQ 70.125 15.671875 65.921875 10.6875 \nQ 61.71875 5.71875 55.34375 2.859375 \nQ 48.96875 0 43.015625 0 \nz\nM 23.390625 4.296875 \nQ 23.390625 3.515625 26.8125 3.515625 \nL 41.109375 3.515625 \nQ 46 3.515625 50.484375 6.21875 \nQ 54.984375 8.9375 57.6875 13.421875 \nQ 60.40625 17.921875 60.40625 22.796875 \nQ 60.40625 25.78125 59.15625 28.4375 \nQ 57.90625 31.109375 55.5625 32.640625 \nQ 53.21875 34.1875 50.203125 34.1875 \nL 30.71875 34.1875 \nL 23.78125 6.5 \nQ 23.390625 5.125 23.390625 4.296875 \nM 31.390625 36.8125 \nL 46.578125 36.8125 \nQ 51.375 36.8125 55.890625 39.25 \nQ 60.40625 41.703125 63.25 45.890625 \nQ 66.109375 50.09375 66.109375 54.78125 \nQ 66.109375 59.125 63.390625 61.953125 \nQ 60.6875 64.796875 56.390625 64.796875 \nL 42.671875 64.796875 \nQ 39.984375 64.796875 39.0625 64.296875 \nQ 38.140625 63.8125 37.5 61.375 \nz\n\" id\u003d\"Cmmi10-42\"/\u003e\n      \u003cpath d\u003d\"M 4.203125 0 \nQ 3.21875 0 3.21875 1.3125 \nQ 3.609375 3.515625 4.5 3.515625 \nQ 10.40625 3.515625 12.5 3.90625 \nQ 14.796875 4.4375 15.375 6.890625 \nL 29.109375 61.8125 \nQ 29.296875 62.796875 29.296875 63.09375 \nQ 29.296875 63.71875 28.96875 63.984375 \nQ 28.65625 64.265625 27.984375 64.40625 \nQ 25.984375 64.796875 20.40625 64.796875 \nQ 19.390625 64.796875 19.390625 66.109375 \nQ 19.734375 67.390625 19.921875 67.84375 \nQ 20.125 68.3125 21.09375 68.3125 \nL 49.03125 68.3125 \nQ 50 68.3125 50 67 \nQ 49.953125 66.75 49.796875 66.15625 \nQ 49.65625 65.578125 49.40625 65.1875 \nQ 49.171875 64.796875 48.6875 64.796875 \nQ 42.828125 64.796875 40.578125 64.40625 \nQ 38.375 63.875 37.796875 61.375 \nL 24.125 6.5 \nQ 23.875 5.28125 23.875 5.171875 \nQ 23.875 4.9375 23.953125 4.71875 \nQ 24.03125 4.5 24.25 4.328125 \nQ 24.46875 4.15625 24.6875 4.078125 \nQ 24.90625 4 25.203125 3.90625 \nQ 27.09375 3.515625 32.8125 3.515625 \nQ 33.796875 3.515625 33.796875 2.203125 \nQ 33.453125 0.78125 33.25 0.390625 \nQ 33.0625 0 32.078125 0 \nz\n\" id\u003d\"Cmmi10-49\"/\u003e\n      \u003cpath d\u003d\"M 20.125 -1.125 \nQ 15.375 -1.125 11.6875 1.125 \nQ 8.015625 3.375 6 7.171875 \nQ 4 10.984375 4 15.828125 \nQ 4 22.609375 7.78125 29.25 \nQ 11.578125 35.890625 17.84375 40.03125 \nQ 24.125 44.1875 31 44.1875 \nQ 34.71875 44.1875 37.625 42.921875 \nQ 40.53125 41.65625 42.671875 39.359375 \nQ 44.828125 37.0625 45.96875 33.984375 \nQ 47.125 30.90625 47.125 27.296875 \nQ 47.125 22.078125 44.921875 17.015625 \nQ 42.71875 11.96875 38.890625 7.84375 \nQ 35.0625 3.71875 30.125 1.296875 \nQ 25.203125 -1.125 20.125 -1.125 \nM 20.3125 1.515625 \nQ 24.75 1.515625 28.4375 4.53125 \nQ 32.125 7.5625 34.484375 12.171875 \nQ 36.859375 16.796875 38.125 21.921875 \nQ 39.40625 27.046875 39.40625 31.203125 \nQ 39.40625 35.546875 37.234375 38.578125 \nQ 35.0625 41.609375 30.8125 41.609375 \nQ 24.953125 41.609375 20.546875 36.59375 \nQ 16.15625 31.59375 13.9375 24.625 \nQ 11.71875 17.671875 11.71875 11.921875 \nQ 11.71875 7.5625 13.9375 4.53125 \nQ 16.15625 1.515625 20.3125 1.515625 \n\" id\u003d\"Cmmi10-6f\"/\u003e\n     \u003c/defs\u003e\n     \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(69.775 270.54)rotate(-90.0)scale(0.12 -0.12)\"\u003e\n      \u003cuse xlink:href\u003d\"#Cmr10-6c\"/\u003e\n      \u003cuse transform\u003d\"translate(27.685546875 0.0)\" xlink:href\u003d\"#Cmr10-6f\"/\u003e\n      \u003cuse transform\u003d\"translate(77.685546875 0.0)\" xlink:href\u003d\"#Cmr10-67\"/\u003e\n      \u003cuse transform\u003d\"translate(132.1496875 -17.00625)scale(0.7)\" xlink:href\u003d\"#Cmmi10-65\"/\u003e\n      \u003cuse transform\u003d\"translate(171.06609375 0.0)\" xlink:href\u003d\"#Cmr10-28\"/\u003e\n      \u003cuse transform\u003d\"translate(209.884453125 0.0)\" xlink:href\u003d\"#Cmmi10-63\"/\u003e\n      \u003cuse transform\u003d\"translate(253.09734375 0.0)\" xlink:href\u003d\"#Cmmi10-6f\"/\u003e\n      \u003cuse transform\u003d\"translate(301.486015625 0.0)\" xlink:href\u003d\"#Cmmi10-75\"/\u003e\n      \u003cuse transform\u003d\"translate(358.66375 0.0)\" xlink:href\u003d\"#Cmmi10-6e\"/\u003e\n      \u003cuse transform\u003d\"translate(418.673515625 0.0)\" xlink:href\u003d\"#Cmmi10-74\"/\u003e\n      \u003cuse transform\u003d\"translate(454.7575 0.0)\" xlink:href\u003d\"#Cmmi10-49\"/\u003e\n      \u003cuse transform\u003d\"translate(498.653984375 0.0)\" xlink:href\u003d\"#Cmmi10-6e\"/\u003e\n      \u003cuse transform\u003d\"translate(558.66375 0.0)\" xlink:href\u003d\"#Cmmi10-42\"/\u003e\n      \u003cuse transform\u003d\"translate(634.445 0.0)\" xlink:href\u003d\"#Cmmi10-75\"/\u003e\n      \u003cuse transform\u003d\"translate(691.622734375 0.0)\" xlink:href\u003d\"#Cmmi10-63\"/\u003e\n      \u003cuse transform\u003d\"translate(734.835625 0.0)\" xlink:href\u003d\"#Cmmi10-6b\"/\u003e\n      \u003cuse transform\u003d\"translate(786.837578125 0.0)\" xlink:href\u003d\"#Cmmi10-65\"/\u003e\n      \u003cuse transform\u003d\"translate(833.321953125 0.0)\" xlink:href\u003d\"#Cmmi10-74\"/\u003e\n      \u003cuse transform\u003d\"translate(869.4059375 0.0)\" xlink:href\u003d\"#Cmr10-29\"/\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n   \u003c/g\u003e\n  \u003c/g\u003e\n \u003c/g\u003e\n \u003cdefs\u003e\n  \u003cclipPath id\u003d\"p02db8d27eb\"\u003e\n   \u003crect height\u003d\"345.6\" width\u003d\"585.9\" x\u003d\"94.5\" y\u003d\"43.2\"/\u003e\n  \u003c/clipPath\u003e\n \u003c/defs\u003e\n\u003c/svg\u003e\n\u003c/div\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 10:20:41 PM",
      "dateStarted": "Apr 16, 2016 10:34:54 PM",
      "dateFinished": "Apr 16, 2016 10:34:54 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **(3e) Handling unseen features **\n#### We naturally would like to repeat the process from Part (3d), e.g., to compute OHE features for the validation and test datasets.  However, we must be careful, as some categorical values will likely appear in new data that did not exist in the training data. To deal with this situation, update the `oneHotEncoding()` function from Part (1d) to ignore previously unseen categories, and then compute OHE features for the validation data.\n",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:36:14 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460870561123_1922341656",
      "id": "20160416-222241_824102691",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003e(3e) Handling unseen features \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eWe naturally would like to repeat the process from Part (3d), e.g., to compute OHE features for the validation and test datasets.  However, we must be careful, as some categorical values will likely appear in new data that did not exist in the training data. To deal with this situation, update the \u003ccode\u003eoneHotEncoding()\u003c/code\u003e function from Part (1d) to ignore previously unseen categories, and then compute OHE features for the validation data.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 10:22:41 PM",
      "dateStarted": "Apr 16, 2016 10:36:13 PM",
      "dateFinished": "Apr 16, 2016 10:36:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code - DONE - modified oneHotEncoding in 1(d) above. \n\n\nOHEValidationData \u003d rawValidationData.map(lambda point: parseOHEPoint(point, ctrOHEDict, numCtrOHEFeats))\nOHEValidationData.cache()\nprint OHEValidationData.take(1)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:45:32 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460871373069_1082763193",
      "id": "20160416-223613_723880747",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[LabeledPoint(0.0, (233286,[7576,9187,15510,21585,31213,36164,39525,49198,61786,66603,67218,68211,68311,73035,76672,81329,81396,91981,96929,98450,109699,110946,117015,121552,141711,146496,147649,171128,184132,184687,185498,194763,198537,201039,210717,213588,222162,222626,227709],[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]))]\n"
      },
      "dateCreated": "Apr 16, 2016 10:36:13 PM",
      "dateStarted": "Apr 16, 2016 11:45:32 PM",
      "dateFinished": "Apr 16, 2016 11:45:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Handling unseen features (3e)\nnumNZVal \u003d (OHEValidationData\n            .map(lambda lp: len(lp.features.indices))\n            .sum())\nTest.assertEquals(numNZVal, 372080, \u0027incorrect number of features\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:46:42 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460871621057_-1496038474",
      "id": "20160416-224021_1676583097",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 10:40:21 PM",
      "dateStarted": "Apr 16, 2016 10:46:42 PM",
      "dateFinished": "Apr 16, 2016 10:46:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### ** Part 4: CTR prediction and logloss evaluation **\n#### ** (4a) Logistic regression **\n#### We are now ready to train our first CTR classifier.  A natural classifier to use in this setting is logistic regression, since it models the probability of a click-through event rather than returning a binary response, and when working with rare events, probabilistic predictions are useful.  First use [LogisticRegressionWithSGD](https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.classification.LogisticRegressionWithSGD) to train a model using `OHETrainData` with the given hyperparameter configuration.  `LogisticRegressionWithSGD` returns a [LogisticRegressionModel](https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.regression.LogisticRegressionModel).  Next, use the `LogisticRegressionModel.weights` and `LogisticRegressionModel.intercept` attributes to print out the model\u0027s parameters.  Note that these are the names of the object\u0027s attributes and should be called using a syntax like `model.weights` for a given `model`.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:47:26 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460872002733_-860141608",
      "id": "20160416-224642_416222984",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003e\u003cem\u003e\u003c/em\u003e Part 4: CTR prediction and logloss evaluation \u003cem\u003e\u003c/em\u003e\u003c/h3\u003e\n\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (4a) Logistic regression \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eWe are now ready to train our first CTR classifier.  A natural classifier to use in this setting is logistic regression, since it models the probability of a click-through event rather than returning a binary response, and when working with rare events, probabilistic predictions are useful.  First use \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.classification.LogisticRegressionWithSGD\"\u003eLogisticRegressionWithSGD\u003c/a\u003e to train a model using \u003ccode\u003eOHETrainData\u003c/code\u003e with the given hyperparameter configuration.  \u003ccode\u003eLogisticRegressionWithSGD\u003c/code\u003e returns a \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.regression.LogisticRegressionModel\"\u003eLogisticRegressionModel\u003c/a\u003e.  Next, use the \u003ccode\u003eLogisticRegressionModel.weights\u003c/code\u003e and \u003ccode\u003eLogisticRegressionModel.intercept\u003c/code\u003e attributes to print out the model\u0027s parameters.  Note that these are the names of the object\u0027s attributes and should be called using a syntax like \u003ccode\u003emodel.weights\u003c/code\u003e for a given \u003ccode\u003emodel\u003c/code\u003e.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 10:46:42 PM",
      "dateStarted": "Apr 16, 2016 10:47:24 PM",
      "dateFinished": "Apr 16, 2016 10:47:24 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom pyspark.mllib.classification import LogisticRegressionWithSGD\n\n# fixed hyperparameters\nnumIters \u003d 50\nstepSize \u003d 10.\nregParam \u003d 1e-6\nregType \u003d \u0027l2\u0027\nincludeIntercept \u003d True",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:48:49 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460872044144_-809092598",
      "id": "20160416-224724_2144349317",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 16, 2016 10:47:24 PM",
      "dateStarted": "Apr 16, 2016 10:48:49 PM",
      "dateFinished": "Apr 16, 2016 10:48:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\nmodel0 \u003d LogisticRegressionWithSGD.train(OHETrainData, iterations \u003d numIters, step\u003dstepSize, regParam\u003dregParam, regType\u003dregType, intercept \u003d includeIntercept)\n\nsortedWeights \u003d sorted(model0.weights)\nprint sortedWeights[:5], model0.intercept",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:48:20 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460872129079_906841524",
      "id": "20160416-224849_990017923",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[-0.45899236853575609, -0.37973707648623956, -0.36996558266753304, -0.36934962879928263, -0.32697945415010637] 0.56455084025\n"
      },
      "dateCreated": "Apr 16, 2016 10:48:49 PM",
      "dateStarted": "Apr 16, 2016 11:48:20 PM",
      "dateFinished": "Apr 16, 2016 11:49:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Logistic regression (4a)\nTest.assertTrue(np.allclose(model0.intercept,  0.56455084025), \u0027incorrect value for model0.intercept\u0027)\nTest.assertTrue(np.allclose(sortedWeights[0:5],\n                [-0.45899236853575609, -0.37973707648623956, -0.36996558266753304,\n                 -0.36934962879928263, -0.32697945415010637]), \u0027incorrect value for model0.weights\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:49:04 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460872471216_-30549648",
      "id": "20160416-225431_1515031087",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 10:54:31 PM",
      "dateStarted": "Apr 16, 2016 11:49:04 PM",
      "dateFinished": "Apr 16, 2016 11:49:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### ** (4b) Log loss **\n#### Throughout this lab, we will use log loss to evaluate the quality of models.  Log loss is defined as: $$  \\begin{align} \\scriptsize \\ell_{log}(p, y) \u003d \\begin{cases} -\\log (p) \u0026 \\text{if } y \u003d 1 \\\\\\ -\\log(1-p) \u0026 \\text{if } y \u003d 0 \\end{cases} \\end{align} $$ where $ \\scriptsize p$ is a probability between 0 and 1 and $ \\scriptsize y$ is a label of either 0 or 1. Log loss is a standard evaluation criterion when predicting rare-events such as click-through rate prediction (it is also the criterion used in the [Criteo Kaggle competition](https://www.kaggle.com/c/criteo-display-ad-challenge)).  Write a function to compute log loss, and evaluate it on some sample inputs.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 10:55:51 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460872523075_2045448148",
      "id": "20160416-225523_1137761063",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (4b) Log loss \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eThroughout this lab, we will use log loss to evaluate the quality of models.  Log loss is defined as: $$  \\begin{align} \\scriptsize \\ell_{log}(p, y) \u003d \\begin{cases} -\\log (p) \u0026amp; \\text{if } y \u003d 1 \\\\ -\\log(1-p) \u0026amp; \\text{if } y \u003d 0 \\end{cases} \\end{align} $$ where $ \\scriptsize p$ is a probability between 0 and 1 and $ \\scriptsize y$ is a label of either 0 or 1. Log loss is a standard evaluation criterion when predicting rare-events such as click-through rate prediction (it is also the criterion used in the \u003ca href\u003d\"https://www.kaggle.com/c/criteo-display-ad-challenge\"\u003eCriteo Kaggle competition\u003c/a\u003e).  Write a function to compute log loss, and evaluate it on some sample inputs.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 10:55:23 PM",
      "dateStarted": "Apr 16, 2016 10:55:49 PM",
      "dateFinished": "Apr 16, 2016 10:55:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\nfrom math import log\n\ndef computeLogLoss(p, y):\n    \"\"\"Calculates the value of log loss for a given probabilty and label.\n\n    Note:\n        log(0) is undefined, so when p is 0 we need to add a small value (epsilon) to it\n        and when p is 1 we need to subtract a small value (epsilon) from it.\n\n    Args:\n        p (float): A probabilty between 0 and 1.\n        y (int): A label.  Takes on the values 0 and 1.\n\n    Returns:\n        float: The log loss value.\n    \"\"\"\n    epsilon \u003d 10e-12\n    if y \u003d\u003d 1:\n        if p \u003d\u003d 0: \n            return -1.0*log(epsilon)\n        else: return -1.0*log(p)\n    elif y \u003d\u003d 0: \n        if p \u003d\u003d 1: \n            return -1.0*log(epsilon)\n        else: return -1.0*log(1-p)\n\nprint computeLogLoss(.5, 1)\nprint computeLogLoss(.5, 0)\nprint computeLogLoss(.99, 1)\nprint computeLogLoss(.99, 0)\nprint computeLogLoss(.01, 1)\nprint computeLogLoss(.01, 0)\nprint computeLogLoss(0, 1)\nprint computeLogLoss(1, 1)\nprint computeLogLoss(1, 0)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:49:12 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460872549040_1023786576",
      "id": "20160416-225549_935528352",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "0.69314718056\n0.69314718056\n0.0100503358535\n4.60517018599\n4.60517018599\n0.0100503358535\n25.3284360229\n-0.0\n25.3284360229\n"
      },
      "dateCreated": "Apr 16, 2016 10:55:49 PM",
      "dateStarted": "Apr 16, 2016 11:49:12 PM",
      "dateFinished": "Apr 16, 2016 11:49:12 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Log loss (4b)\nTest.assertTrue(np.allclose([computeLogLoss(.5, 1), computeLogLoss(.01, 0), computeLogLoss(.01, 1)],\n                            [0.69314718056, 0.0100503358535, 4.60517018599]),\n                \u0027computeLogLoss is not correct\u0027)\nTest.assertTrue(np.allclose([computeLogLoss(0, 1), computeLogLoss(1, 1), computeLogLoss(1, 0)],\n                            [25.3284360229, 1.00000008275e-11, 25.3284360229]),\n                \u0027computeLogLoss needs to bound p away from 0 and 1 by epsilon\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:49:18 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460873010491_1783520635",
      "id": "20160416-230330_1490717204",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 11:03:30 PM",
      "dateStarted": "Apr 16, 2016 11:49:18 PM",
      "dateFinished": "Apr 16, 2016 11:49:18 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### ** (4c)  Baseline log loss **\n#### Next we will use the function we wrote in Part (4b) to compute the baseline log loss on the training data. A very simple yet natural baseline model is one where we always make the same prediction independent of the given datapoint, setting the predicted value equal to the fraction of training points that correspond to click-through events (i.e., where the label is one). Compute this value (which is simply the mean of the training labels), and then use it to compute the training log loss for the baseline model.  The log loss for multiple observations is the mean of the individual log loss values.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:04:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460873041878_1114873019",
      "id": "20160416-230401_1091873329",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (4c)  Baseline log loss \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eNext we will use the function we wrote in Part (4b) to compute the baseline log loss on the training data. A very simple yet natural baseline model is one where we always make the same prediction independent of the given datapoint, setting the predicted value equal to the fraction of training points that correspond to click-through events (i.e., where the label is one). Compute this value (which is simply the mean of the training labels), and then use it to compute the training log loss for the baseline model.  The log loss for multiple observations is the mean of the individual log loss values.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 11:04:01 PM",
      "dateStarted": "Apr 16, 2016 11:04:31 PM",
      "dateFinished": "Apr 16, 2016 11:04:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\n# Note that our dataset has a very high click-through rate by design\n# In practice click-through rate can be one to two orders of magnitude lower\nclassOneFracTrain \u003d OHETrainData.map(lambda x: x.label).sum() / OHETrainData.count()\nprint classOneFracTrain\n\nlogLossTrBase \u003d OHETrainData.map(lambda x: computeLogLoss(classOneFracTrain, x.label)).sum()/OHETrainData.count()\nprint \u0027Baseline Train Logloss \u003d {0:.3f}\\n\u0027.format(logLossTrBase)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:15:05 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460873038689_653559088",
      "id": "20160416-230358_1938678376",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "0.22717773523\nBaseline Train Logloss \u003d 0.536\n\n"
      },
      "dateCreated": "Apr 16, 2016 11:03:58 PM",
      "dateStarted": "Apr 16, 2016 11:15:05 PM",
      "dateFinished": "Apr 16, 2016 11:15:10 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Baseline log loss (4c)\nTest.assertTrue(np.allclose(classOneFracTrain, 0.22717773523), \u0027incorrect value for classOneFracTrain\u0027)\nTest.assertTrue(np.allclose(logLossTrBase, 0.535844), \u0027incorrect value for logLossTrBase\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:15:34 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460873705760_-1665940434",
      "id": "20160416-231505_870275035",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 11:15:05 PM",
      "dateStarted": "Apr 16, 2016 11:15:35 PM",
      "dateFinished": "Apr 16, 2016 11:15:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### ** (4d) Predicted probability **\n#### In order to compute the log loss for the model we trained in Part (4a), we need to write code to generate predictions from this model. Write a function that computes the raw linear prediction from this logistic regression model and then passes it through a [sigmoid function](http://en.wikipedia.org/wiki/Sigmoid_function) $ \\scriptsize \\sigma(t) \u003d (1+ e^{-t})^{-1} $ to return the model\u0027s probabilistic prediction. Then compute probabilistic predictions on the training data.\n#### Note that when incorporating an intercept into our predictions, we simply add the intercept to the value of the prediction obtained from the weights and features.  Alternatively, if the intercept was included as the first weight, we would need to add a corresponding feature to our data where the feature has the value one.  This is not the case here.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:16:23 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460873734991_151441515",
      "id": "20160416-231534_2049353387",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (4d) Predicted probability \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eIn order to compute the log loss for the model we trained in Part (4a), we need to write code to generate predictions from this model. Write a function that computes the raw linear prediction from this logistic regression model and then passes it through a \u003ca href\u003d\"http://en.wikipedia.org/wiki/Sigmoid_function\"\u003esigmoid function\u003c/a\u003e $ \\scriptsize \\sigma(t) \u003d (1+ e\u003csup\u003e{-t})\u003c/sup\u003e{-1} $ to return the model\u0027s probabilistic prediction. Then compute probabilistic predictions on the training data.\u003c/h4\u003e\n\u003ch4\u003eNote that when incorporating an intercept into our predictions, we simply add the intercept to the value of the prediction obtained from the weights and features.  Alternatively, if the intercept was included as the first weight, we would need to add a corresponding feature to our data where the feature has the value one.  This is not the case here.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 11:15:34 PM",
      "dateStarted": "Apr 16, 2016 11:16:19 PM",
      "dateFinished": "Apr 16, 2016 11:16:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom math import exp #  exp(-t) \u003d e^-t\n\ndef getP(x, w, intercept):\n    \"\"\"Calculate the probability for an observation given a set of weights and intercept.\n\n    Note:\n        We\u0027ll bound our raw prediction between 20 and -20 for numerical purposes.\n\n    Args:\n        x (SparseVector): A vector with values of 1.0 for features that exist in this\n            observation and 0.0 otherwise.\n        w (DenseVector): A vector of weights (betas) for the model.\n        intercept (float): The model\u0027s intercept.\n\n    Returns:\n        float: A probability between 0 and 1.\n    \"\"\"\n    rawPrediction \u003d x.dot(w) + intercept\n\n    # Bound the raw prediction value\n    rawPrediction \u003d min(rawPrediction, 20)\n    rawPrediction \u003d max(rawPrediction, -20)\n    return 1.0 / (1 + exp(-1.0*rawPrediction))\n\ntrainingPredictions \u003d OHETrainData.map(lambda x : getP(x.features,model0.weights,model0.intercept))\n\nprint trainingPredictions.take(5)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:21:29 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460873779375_-986984507",
      "id": "20160416-231619_1156955857",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[0.3026288202391113, 0.10362661997434078, 0.283634247838756, 0.17846102057880123, 0.5389775379218854]\n"
      },
      "dateCreated": "Apr 16, 2016 11:16:19 PM",
      "dateStarted": "Apr 16, 2016 11:21:29 PM",
      "dateFinished": "Apr 16, 2016 11:21:29 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Predicted probability (4d)\nTest.assertTrue(np.allclose(trainingPredictions.sum(), 18135.4834348),\n                \u0027incorrect value for trainingPredictions\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:21:54 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460874089174_-2019217666",
      "id": "20160416-232129_1003487306",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 11:21:29 PM",
      "dateStarted": "Apr 16, 2016 11:21:54 PM",
      "dateFinished": "Apr 16, 2016 11:21:58 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### ** (4e) Evaluate the model **\n#### We are now ready to evaluate the quality of the model we trained in Part (4a). To do this, first write a general function that takes as input a model and data, and outputs the log loss.  Then run this function on the OHE training data, and compare the result with the baseline log loss.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:22:28 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460874114905_1062666997",
      "id": "20160416-232154_791801705",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (4e) Evaluate the model \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eWe are now ready to evaluate the quality of the model we trained in Part (4a). To do this, first write a general function that takes as input a model and data, and outputs the log loss.  Then run this function on the OHE training data, and compare the result with the baseline log loss.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 11:21:54 PM",
      "dateStarted": "Apr 16, 2016 11:22:26 PM",
      "dateFinished": "Apr 16, 2016 11:22:26 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\ndef evaluateResults(model, data):\n    \"\"\"Calculates the log loss for the data given the model.\n\n    Args:\n        model (LogisticRegressionModel): A trained logistic regression model.\n        data (RDD of LabeledPoint): Labels and features for each observation.\n\n    Returns:\n        float: Log loss for the data.\n    \"\"\"\n   \n    logLoss \u003d data.map(lambda x: computeLogLoss(getP(x.features, model.weights,model.intercept), x.label)).sum()/data.count()\n    return logLoss\n    \n\nlogLossTrLR0 \u003d evaluateResults(model0, OHETrainData)\nprint (\u0027OHE Features Train Logloss:\\n\\tBaseline \u003d {0:.3f}\\n\\tLogReg \u003d {1:.3f}\u0027\n       .format(logLossTrBase, logLossTrLR0))",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:52:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460874146009_772043659",
      "id": "20160416-232226_1278695228",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "OHE Features Train Logloss:\n\tBaseline \u003d 0.536\n\tLogReg \u003d 0.457\n"
      },
      "dateCreated": "Apr 16, 2016 11:22:26 PM",
      "dateStarted": "Apr 16, 2016 11:52:33 PM",
      "dateFinished": "Apr 16, 2016 11:52:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Evaluate the model (4e)\nTest.assertTrue(np.allclose(logLossTrLR0, 0.456903), \u0027incorrect value for logLossTrLR0\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:50:27 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460874752376_-1610062664",
      "id": "20160416-233232_1746446499",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 11:32:32 PM",
      "dateStarted": "Apr 16, 2016 11:50:27 PM",
      "dateFinished": "Apr 16, 2016 11:50:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### ** (4f) Validation log loss **\n#### Next, following the same logic as in Parts (4c) and 4(e), compute the validation log loss for both the baseline and logistic regression models. Notably, the baseline model for the validation data should still be based on the label fraction from the training dataset.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:33:53 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460874773973_-1053518184",
      "id": "20160416-233253_1567204390",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (4f) Validation log loss \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eNext, following the same logic as in Parts (4c) and 4(e), compute the validation log loss for both the baseline and logistic regression models. Notably, the baseline model for the validation data should still be based on the label fraction from the training dataset.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 11:32:53 PM",
      "dateStarted": "Apr 16, 2016 11:33:51 PM",
      "dateFinished": "Apr 16, 2016 11:33:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TODO: Replace \u003cFILL IN\u003e with appropriate code\n\nlogLossValBase \u003d OHEValidationData.map(lambda x : computeLogLoss(classOneFracTrain,x.label)).sum()/OHEValidationData.count()\n\nlogLossValLR0 \u003d evaluateResults(model0, OHEValidationData)\n\n\nprint (\u0027OHE Features Validation Logloss:\\n\\tBaseline \u003d {0:.3f}\\n\\tLogReg \u003d {1:.3f}\u0027\n       .format(logLossValBase, logLossValLR0))",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:52:44 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460874839630_-1961232785",
      "id": "20160416-233359_2104870124",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "OHE Features Validation Logloss:\n\tBaseline \u003d 0.528\n\tLogReg \u003d 0.457\n"
      },
      "dateCreated": "Apr 16, 2016 11:33:59 PM",
      "dateStarted": "Apr 16, 2016 11:52:44 PM",
      "dateFinished": "Apr 16, 2016 11:52:45 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# TEST Validation log loss (4f)\nTest.assertTrue(np.allclose(logLossValBase, 0.527603), \u0027incorrect value for logLossValBase\u0027)\nTest.assertTrue(np.allclose(logLossValLR0, 0.456957), \u0027incorrect value for logLossValLR0\u0027)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:52:49 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460874182562_1355368964",
      "id": "20160416-232302_1194176426",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "1 test passed.\n1 test passed.\n"
      },
      "dateCreated": "Apr 16, 2016 11:23:02 PM",
      "dateStarted": "Apr 16, 2016 11:52:49 PM",
      "dateFinished": "Apr 16, 2016 11:52:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### **Visualization 2: ROC curve **\n#### We will now visualize how well the model predicts our target.  To do this we generate a plot of the ROC curve.  The ROC curve shows us the trade-off between the false positive rate and true positive rate, as we liberalize the threshold required to predict a positive outcome.  A random model is represented by the dashed line.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:53:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460874588488_-771556893",
      "id": "20160416-232948_1324000211",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch4\u003e*\u003cem\u003eVisualization 2: ROC curve \u003c/em\u003e*\u003c/h4\u003e\n\u003ch4\u003eWe will now visualize how well the model predicts our target.  To do this we generate a plot of the ROC curve.  The ROC curve shows us the trade-off between the false positive rate and true positive rate, as we liberalize the threshold required to predict a positive outcome.  A random model is represented by the dashed line.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 11:29:48 PM",
      "dateStarted": "Apr 16, 2016 11:53:15 PM",
      "dateFinished": "Apr 16, 2016 11:53:15 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nlabelsAndScores \u003d OHEValidationData.map(lambda lp:\n                                            (lp.label, getP(lp.features, model0.weights, model0.intercept)))\nlabelsAndWeights \u003d labelsAndScores.collect()\nlabelsAndWeights.sort(key\u003dlambda (k, v): v, reverse\u003dTrue)\nlabelsByWeight \u003d np.array([k for (k, v) in labelsAndWeights])\n\nlength \u003d labelsByWeight.size\ntruePositives \u003d labelsByWeight.cumsum()\nnumPositive \u003d truePositives[-1]\nfalsePositives \u003d np.arange(1.0, length + 1, 1.) - truePositives\n\ntruePositiveRate \u003d truePositives / numPositive\nfalsePositiveRate \u003d falsePositives / (length - numPositive)\n\n# Generate layout and plot data\nfig, ax \u003d preparePlot(np.arange(0., 1.1, 0.1), np.arange(0., 1.1, 0.1))\nax.set_xlim(-.05, 1.05), ax.set_ylim(-.05, 1.05)\nax.set_ylabel(\u0027True Positive Rate (Sensitivity)\u0027)\nax.set_xlabel(\u0027False Positive Rate (1 - Specificity)\u0027)\nplt.plot(falsePositiveRate, truePositiveRate, color\u003d\u0027#8cbfd0\u0027, linestyle\u003d\u0027-\u0027, linewidth\u003d3.)\nplt.plot((0., 1.), (0., 1.), linestyle\u003d\u0027--\u0027, color\u003d\u0027#d6ebf2\u0027, linewidth\u003d2.)  # Baseline model\nshowMPL(plt)\npass",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:53:54 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460875995414_127252120",
      "id": "20160416-235315_1284157035",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cdiv style\u003d\u0027width:600px\u0027\u003e\u003c?xml version\u003d\"1.0\" encoding\u003d\"utf-8\" standalone\u003d\"no\"?\u003e\n\u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e\n\u003c!-- Created with matplotlib (http://matplotlib.org/) --\u003e\n\u003csvg height\u003d\"432pt\" version\u003d\"1.1\" viewBox\u003d\"0 0 756 432\" width\u003d\"756pt\" xmlns\u003d\"http://www.w3.org/2000/svg\" xmlns:xlink\u003d\"http://www.w3.org/1999/xlink\"\u003e\n \u003cdefs\u003e\n  \u003cstyle type\u003d\"text/css\"\u003e\n*{stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:100000;}\n  \u003c/style\u003e\n \u003c/defs\u003e\n \u003cg id\u003d\"figure_1\"\u003e\n  \u003cg id\u003d\"patch_1\"\u003e\n   \u003cpath d\u003d\"M 0 432 \nL 756 432 \nL 756 0 \nL 0 0 \nz\n\" style\u003d\"fill:#ffffff;\"/\u003e\n  \u003c/g\u003e\n  \u003cg id\u003d\"axes_1\"\u003e\n   \u003cg id\u003d\"patch_2\"\u003e\n    \u003cpath d\u003d\"M 94.5 388.8 \nL 680.4 388.8 \nL 680.4 43.2 \nL 94.5 43.2 \nz\n\" style\u003d\"fill:#ffffff;\"/\u003e\n   \u003c/g\u003e\n   \u003cg id\u003d\"line2d_1\"\u003e\n    \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 121.131818 372.949449 \nL 121.199635 372.949449 \nL 121.267453 372.949449 \nL 121.33527 372.242151 \nL 121.403087 372.242151 \nL 121.470904 370.403176 \nL 121.538721 370.403176 \nL 121.606539 368.84712 \nL 121.742173 368.84712 \nL 121.80999 368.139822 \nL 121.877807 368.139822 \nL 121.877807 367.715443 \nL 121.945625 367.715443 \nL 122.013442 367.715443 \nL 122.081259 365.876468 \nL 122.216894 365.876468 \nL 122.284711 364.603332 \nL 122.352528 364.603332 \nL 122.352528 364.037493 \nL 122.420345 364.037493 \nL 122.55598 364.037493 \nL 122.623797 362.905816 \nL 122.691614 362.905816 \nL 122.759431 361.63268 \nL 122.827248 361.63268 \nL 122.827248 361.49122 \nL 122.895066 361.49122 \nL 122.962883 361.49122 \nL 123.0307 359.935164 \nL 123.098517 359.935164 \nL 123.098517 358.662028 \nL 123.166334 358.662028 \nL 123.234152 358.662028 \nL 123.234152 358.237649 \nL 123.301969 358.237649 \nL 123.369786 358.237649 \nL 123.437603 357.388891 \nL 123.505421 357.388891 \nL 123.573238 355.832835 \nL 123.641055 355.832835 \nL 123.708872 354.842618 \nL 123.980141 354.842618 \nL 124.047958 353.99386 \nL 124.115775 353.99386 \nL 124.115775 353.852401 \nL 124.183593 353.852401 \nL 124.319227 353.852401 \nL 124.387044 352.862183 \nL 124.454861 352.862183 \nL 124.522679 351.871966 \nL 124.590496 351.871966 \nL 124.590496 351.589047 \nL 124.658313 351.589047 \nL 124.72613 351.589047 \nL 124.793947 351.023208 \nL 124.929582 351.023208 \nL 124.929582 350.881749 \nL 124.997399 350.881749 \nL 125.133034 350.881749 \nL 125.200851 349.325693 \nL 125.268668 349.325693 \nL 125.268668 349.042774 \nL 125.336485 349.042774 \nL 125.539937 349.042774 \nL 125.607754 348.618395 \nL 125.675571 348.618395 \nL 125.743388 348.052556 \nL 125.879023 348.052556 \nL 125.879023 347.911097 \nL 125.94684 347.911097 \nL 126.082474 347.911097 \nL 126.082474 347.628177 \nL 126.150292 347.628177 \nL 126.353743 347.628177 \nL 126.421561 347.345258 \nL 126.489378 347.345258 \nL 126.557195 346.920879 \nL 126.692829 346.920879 \nL 126.760647 346.4965 \nL 126.828464 346.4965 \nL 126.828464 345.789202 \nL 126.896281 345.789202 \nL 127.031915 345.789202 \nL 127.099733 345.081904 \nL 127.16755 345.081904 \nL 127.235367 344.798985 \nL 127.303184 344.798985 \nL 127.303184 344.516066 \nL 127.371001 344.516066 \nL 127.438819 344.516066 \nL 127.438819 344.374606 \nL 127.506636 344.374606 \nL 127.574453 344.374606 \nL 127.574453 344.091687 \nL 127.64227 344.091687 \nL 127.710088 344.091687 \nL 127.777905 343.101469 \nL 127.845722 343.101469 \nL 127.845722 342.96001 \nL 127.913539 342.96001 \nL 127.981356 342.96001 \nL 127.981356 342.677091 \nL 128.049174 342.677091 \nL 128.320442 342.677091 \nL 128.38826 342.111252 \nL 128.456077 342.111252 \nL 128.456077 341.545414 \nL 128.523894 341.545414 \nL 128.591711 341.545414 \nL 128.659528 341.121035 \nL 128.727346 341.121035 \nL 128.727346 340.838116 \nL 128.795163 340.838116 \nL 128.86298 340.838116 \nL 128.86298 340.555196 \nL 128.930797 340.555196 \nL 129.066432 340.555196 \nL 129.134249 339.423519 \nL 129.269883 339.423519 \nL 129.337701 338.857681 \nL 129.405518 338.857681 \nL 129.473335 338.150383 \nL 129.608969 338.150383 \nL 129.676787 337.726004 \nL 129.744604 337.726004 \nL 129.812421 337.301625 \nL 129.880238 337.301625 \nL 129.880238 337.160165 \nL 129.948055 337.160165 \nL 130.015873 337.160165 \nL 130.08369 336.735787 \nL 130.422776 336.735787 \nL 130.490593 336.169948 \nL 130.55841 336.169948 \nL 130.55841 335.887029 \nL 130.626228 335.887029 \nL 130.761862 335.887029 \nL 130.829679 334.896811 \nL 131.033131 334.896811 \nL 131.100948 333.906594 \nL 131.168765 333.906594 \nL 131.236582 333.482215 \nL 131.372217 333.482215 \nL 131.440034 333.199296 \nL 131.643486 333.199296 \nL 131.711303 332.916377 \nL 131.914754 332.916377 \nL 131.982572 332.633457 \nL 132.050389 332.633457 \nL 132.050389 332.209079 \nL 132.118206 332.209079 \nL 132.389475 332.209079 \nL 132.457292 331.926159 \nL 132.525109 331.926159 \nL 132.525109 331.64324 \nL 132.592927 331.64324 \nL 132.660744 331.64324 \nL 132.660744 331.360321 \nL 132.728561 331.360321 \nL 132.864195 331.360321 \nL 132.932013 331.077402 \nL 132.99983 331.077402 \nL 132.99983 330.370104 \nL 133.067647 330.370104 \nL 133.271099 330.370104 \nL 133.338916 329.238427 \nL 133.678002 329.238427 \nL 133.678002 329.096967 \nL 133.745819 329.096967 \nL 133.881454 329.096967 \nL 133.949271 328.389669 \nL 134.084905 328.389669 \nL 134.152722 327.682371 \nL 134.22054 327.682371 \nL 134.22054 327.399452 \nL 134.288357 327.399452 \nL 134.491808 327.399452 \nL 134.491808 327.257992 \nL 134.559626 327.257992 \nL 134.627443 327.257992 \nL 134.627443 326.833613 \nL 134.69526 326.833613 \nL 134.763077 326.833613 \nL 134.830895 326.409234 \nL 134.898712 326.409234 \nL 134.966529 325.843396 \nL 135.034346 325.843396 \nL 135.102163 324.004421 \nL 135.237798 324.004421 \nL 135.305615 323.438582 \nL 135.441249 323.438582 \nL 135.509067 323.014203 \nL 135.576884 323.014203 \nL 135.644701 322.589824 \nL 135.780335 322.589824 \nL 135.848153 321.882526 \nL 136.187239 321.882526 \nL 136.255056 321.033769 \nL 136.39069 321.033769 \nL 136.458508 320.60939 \nL 136.526325 320.60939 \nL 136.526325 320.46793 \nL 136.594142 320.46793 \nL 136.865411 320.46793 \nL 136.865411 319.902092 \nL 136.933228 319.902092 \nL 137.001045 319.902092 \nL 137.001045 319.760632 \nL 137.068862 319.760632 \nL 137.340131 319.760632 \nL 137.340131 319.336253 \nL 137.407948 319.336253 \nL 137.475766 319.336253 \nL 137.543583 318.628955 \nL 137.679217 318.628955 \nL 137.747035 318.204576 \nL 137.814852 318.204576 \nL 137.882669 317.638738 \nL 137.950486 317.638738 \nL 138.018303 317.072899 \nL 138.289572 317.072899 \nL 138.289572 316.78998 \nL 138.357389 316.78998 \nL 138.425207 316.78998 \nL 138.493024 315.799763 \nL 138.560841 315.799763 \nL 138.560841 314.102247 \nL 138.628658 314.102247 \nL 138.696475 314.102247 \nL 138.764293 313.11203 \nL 138.899927 313.11203 \nL 138.899927 312.97057 \nL 138.967744 312.97057 \nL 139.103379 312.97057 \nL 139.171196 312.687651 \nL 139.374648 312.687651 \nL 139.442465 312.404732 \nL 139.510282 312.404732 \nL 139.510282 312.263272 \nL 139.578099 312.263272 \nL 139.645916 312.263272 \nL 139.713734 311.555974 \nL 140.05282 311.555974 \nL 140.05282 311.414514 \nL 140.120637 311.414514 \nL 140.188454 311.414514 \nL 140.188454 311.273055 \nL 140.256271 311.273055 \nL 140.459723 311.273055 \nL 140.52754 310.848676 \nL 140.663175 310.848676 \nL 140.663175 310.707216 \nL 140.730992 310.707216 \nL 140.798809 310.707216 \nL 140.798809 310.565757 \nL 140.866626 310.565757 \nL 141.137895 310.565757 \nL 141.137895 310.424297 \nL 141.205712 310.424297 \nL 141.544798 310.424297 \nL 141.612615 309.999918 \nL 141.816067 309.999918 \nL 141.883884 309.43408 \nL 141.951702 309.43408 \nL 141.951702 309.29262 \nL 142.019519 309.29262 \nL 142.22297 309.29262 \nL 142.22297 309.15116 \nL 142.290788 309.15116 \nL 142.426422 309.15116 \nL 142.494239 308.868241 \nL 142.562056 308.868241 \nL 142.629874 308.585322 \nL 142.833325 308.585322 \nL 142.833325 308.443862 \nL 142.901142 308.443862 \nL 142.96896 308.443862 \nL 143.036777 308.160943 \nL 143.104594 308.160943 \nL 143.172411 307.595105 \nL 143.308046 307.595105 \nL 143.308046 307.453645 \nL 143.375863 307.453645 \nL 143.44368 307.453645 \nL 143.44368 307.312185 \nL 143.511497 307.312185 \nL 143.579315 307.312185 \nL 143.579315 307.029266 \nL 143.647132 307.029266 \nL 143.782766 307.029266 \nL 143.782766 306.746347 \nL 143.850583 306.746347 \nL 144.189669 306.746347 \nL 144.189669 306.604887 \nL 144.257487 306.604887 \nL 144.325304 306.604887 \nL 144.325304 306.180508 \nL 144.393121 306.180508 \nL 144.528755 306.180508 \nL 144.596573 305.75613 \nL 144.800024 305.75613 \nL 144.800024 305.47321 \nL 144.867842 305.47321 \nL 145.071293 305.47321 \nL 145.13911 304.624453 \nL 145.274745 304.624453 \nL 145.342562 303.775695 \nL 145.546014 303.775695 \nL 145.546014 303.634235 \nL 145.613831 303.634235 \nL 145.681648 303.634235 \nL 145.681648 303.351316 \nL 145.749465 303.351316 \nL 145.8851 303.351316 \nL 145.8851 303.209856 \nL 145.952917 303.209856 \nL 146.224186 303.209856 \nL 146.292003 302.644018 \nL 146.35982 302.644018 \nL 146.35982 301.93672 \nL 146.427637 301.93672 \nL 146.970175 301.93672 \nL 146.970175 301.79526 \nL 147.037992 301.79526 \nL 147.105809 301.79526 \nL 147.105809 301.370881 \nL 147.173627 301.370881 \nL 147.241444 301.370881 \nL 147.309261 301.087962 \nL 147.377078 301.087962 \nL 147.377078 300.946502 \nL 147.444895 300.946502 \nL 147.58053 300.946502 \nL 147.58053 300.805043 \nL 147.648347 300.805043 \nL 147.851799 300.805043 \nL 147.851799 300.522124 \nL 147.919616 300.522124 \nL 147.987433 300.522124 \nL 147.987433 300.380664 \nL 148.05525 300.380664 \nL 148.123068 300.380664 \nL 148.123068 300.239204 \nL 148.190885 300.239204 \nL 148.258702 300.239204 \nL 148.326519 299.531906 \nL 148.394336 299.531906 \nL 148.394336 299.390447 \nL 148.462154 299.390447 \nL 148.597788 299.390447 \nL 148.665605 298.541689 \nL 148.733422 298.541689 \nL 148.733422 298.400229 \nL 148.80124 298.400229 \nL 148.936874 298.400229 \nL 148.936874 297.834391 \nL 149.004691 297.834391 \nL 149.208143 297.834391 \nL 149.208143 297.410012 \nL 149.27596 297.410012 \nL 149.343777 297.410012 \nL 149.343777 297.127093 \nL 149.411595 297.127093 \nL 149.615046 297.127093 \nL 149.682863 296.844173 \nL 149.818498 296.844173 \nL 149.818498 296.419795 \nL 149.886315 296.419795 \nL 150.157584 296.419795 \nL 150.157584 296.136875 \nL 150.225401 296.136875 \nL 150.632304 296.136875 \nL 150.632304 295.995416 \nL 150.700122 295.995416 \nL 150.903573 295.995416 \nL 150.97139 295.571037 \nL 151.107025 295.571037 \nL 151.107025 295.429577 \nL 151.174842 295.429577 \nL 151.310476 295.429577 \nL 151.378294 295.146658 \nL 151.446111 295.146658 \nL 151.513928 294.722279 \nL 151.581745 294.722279 \nL 151.649562 294.43936 \nL 151.71738 294.43936 \nL 151.71738 294.2979 \nL 151.785197 294.2979 \nL 151.920831 294.2979 \nL 151.920831 294.156441 \nL 151.988649 294.156441 \nL 152.327735 294.156441 \nL 152.327735 293.873521 \nL 152.395552 293.873521 \nL 152.599003 293.873521 \nL 152.599003 293.590602 \nL 152.666821 293.590602 \nL 152.870272 293.590602 \nL 152.870272 292.317466 \nL 152.938089 292.317466 \nL 153.005907 292.317466 \nL 153.005907 292.034546 \nL 153.073724 292.034546 \nL 153.209358 292.034546 \nL 153.209358 291.893087 \nL 153.277175 291.893087 \nL 153.41281 291.893087 \nL 153.480627 291.327248 \nL 153.548444 291.327248 \nL 153.616262 291.044329 \nL 153.88753 291.044329 \nL 153.88753 290.902869 \nL 153.955348 290.902869 \nL 154.090982 290.902869 \nL 154.158799 290.61995 \nL 154.226616 290.61995 \nL 154.226616 290.054112 \nL 154.294434 290.054112 \nL 154.430068 290.054112 \nL 154.497885 289.629733 \nL 154.565702 289.629733 \nL 154.565702 289.488273 \nL 154.63352 289.488273 \nL 154.701337 289.488273 \nL 154.701337 289.063894 \nL 154.769154 289.063894 \nL 154.904789 289.063894 \nL 154.904789 288.922435 \nL 154.972606 288.922435 \nL 155.040423 288.922435 \nL 155.040423 288.215137 \nL 155.10824 288.215137 \nL 155.176057 288.215137 \nL 155.243875 287.649298 \nL 155.311692 287.649298 \nL 155.379509 287.366379 \nL 155.515143 287.366379 \nL 155.582961 287.08346 \nL 155.650778 287.08346 \nL 155.718595 286.234702 \nL 155.989864 286.234702 \nL 155.989864 286.093242 \nL 156.057681 286.093242 \nL 156.125498 286.093242 \nL 156.193316 285.385944 \nL 156.261133 285.385944 \nL 156.32895 285.103025 \nL 156.396767 285.103025 \nL 156.464584 283.971348 \nL 156.532402 283.971348 \nL 156.532402 283.829888 \nL 156.600219 283.829888 \nL 156.735853 283.829888 \nL 156.735853 283.405509 \nL 156.80367 283.405509 \nL 157.007122 283.405509 \nL 157.074939 282.698211 \nL 157.278391 282.698211 \nL 157.278391 282.556752 \nL 157.346208 282.556752 \nL 157.753111 282.556752 \nL 157.753111 281.849454 \nL 157.820929 281.849454 \nL 157.956563 281.849454 \nL 158.02438 281.566534 \nL 158.092197 281.566534 \nL 158.160015 280.717777 \nL 158.227832 280.717777 \nL 158.295649 280.434857 \nL 158.499101 280.434857 \nL 158.499101 280.293398 \nL 158.566918 280.293398 \nL 158.634735 280.293398 \nL 158.634735 280.151938 \nL 158.702552 280.151938 \nL 158.770369 280.151938 \nL 158.770369 279.869019 \nL 158.838187 279.869019 \nL 159.041638 279.869019 \nL 159.109456 279.020261 \nL 159.24509 279.020261 \nL 159.24509 278.595882 \nL 159.312907 278.595882 \nL 159.380724 278.595882 \nL 159.448542 278.030044 \nL 159.516359 278.030044 \nL 159.516359 277.888584 \nL 159.584176 277.888584 \nL 159.71981 277.888584 \nL 159.71981 277.747125 \nL 159.787628 277.747125 \nL 159.991079 277.747125 \nL 160.058896 277.464205 \nL 160.194531 277.464205 \nL 160.194531 277.322746 \nL 160.262348 277.322746 \nL 160.533617 277.322746 \nL 160.533617 277.181286 \nL 160.601434 277.181286 \nL 160.804886 277.181286 \nL 160.804886 277.039826 \nL 160.872703 277.039826 \nL 160.94052 277.039826 \nL 161.008337 276.756907 \nL 161.279606 276.756907 \nL 161.279606 276.473988 \nL 161.347423 276.473988 \nL 161.415241 276.473988 \nL 161.483058 276.191069 \nL 161.618692 276.191069 \nL 161.618692 275.76669 \nL 161.686509 275.76669 \nL 161.754327 275.76669 \nL 161.754327 275.62523 \nL 161.822144 275.62523 \nL 161.957778 275.62523 \nL 162.025596 274.493553 \nL 162.16123 274.493553 \nL 162.16123 274.069174 \nL 162.229047 274.069174 \nL 162.296864 274.069174 \nL 162.296864 273.927715 \nL 162.364682 273.927715 \nL 162.703768 273.927715 \nL 162.703768 273.644796 \nL 162.771585 273.644796 \nL 162.907219 273.644796 \nL 162.907219 273.503336 \nL 162.975036 273.503336 \nL 163.110671 273.503336 \nL 163.110671 273.220417 \nL 163.178488 273.220417 \nL 163.246305 273.220417 \nL 163.246305 272.654578 \nL 163.314123 272.654578 \nL 163.38194 272.654578 \nL 163.38194 272.513119 \nL 163.449757 272.513119 \nL 163.517574 272.513119 \nL 163.517574 272.371659 \nL 163.585391 272.371659 \nL 163.653209 272.371659 \nL 163.653209 272.08874 \nL 163.721026 272.08874 \nL 163.992295 272.08874 \nL 163.992295 271.80582 \nL 164.060112 271.80582 \nL 164.263563 271.80582 \nL 164.331381 271.239982 \nL 164.399198 271.239982 \nL 164.399198 271.098522 \nL 164.467015 271.098522 \nL 164.534832 271.098522 \nL 164.534832 270.815603 \nL 164.602649 270.815603 \nL 164.670467 270.815603 \nL 164.738284 270.108305 \nL 164.806101 270.108305 \nL 164.806101 269.825386 \nL 164.873918 269.825386 \nL 165.009553 269.825386 \nL 165.07737 269.542467 \nL 165.348639 269.542467 \nL 165.348639 269.401007 \nL 165.416456 269.401007 \nL 165.55209 269.401007 \nL 165.55209 269.118088 \nL 165.619908 269.118088 \nL 165.687725 269.118088 \nL 165.687725 268.976628 \nL 165.755542 268.976628 \nL 166.026811 268.976628 \nL 166.026811 268.693709 \nL 166.094628 268.693709 \nL 166.230263 268.693709 \nL 166.29808 268.12787 \nL 166.704983 268.12787 \nL 166.7728 267.562032 \nL 166.840617 267.562032 \nL 166.840617 267.137653 \nL 166.908435 267.137653 \nL 166.976252 267.137653 \nL 166.976252 266.854734 \nL 167.044069 266.854734 \nL 167.315338 266.854734 \nL 167.383155 266.430355 \nL 167.586607 266.430355 \nL 167.654424 266.147436 \nL 167.857876 266.147436 \nL 167.925693 265.157218 \nL 168.061327 265.157218 \nL 168.061327 265.015759 \nL 168.129144 265.015759 \nL 168.264779 265.015759 \nL 168.264779 264.874299 \nL 168.332596 264.874299 \nL 168.46823 264.874299 \nL 168.536048 264.167001 \nL 168.807316 264.167001 \nL 168.807316 264.025541 \nL 168.875134 264.025541 \nL 168.942951 264.025541 \nL 168.942951 263.884082 \nL 169.010768 263.884082 \nL 169.21422 263.884082 \nL 169.282037 263.601162 \nL 169.485489 263.601162 \nL 169.485489 263.459703 \nL 169.553306 263.459703 \nL 169.621123 263.459703 \nL 169.621123 263.318243 \nL 169.68894 263.318243 \nL 169.824575 263.318243 \nL 169.824575 262.893864 \nL 169.892392 262.893864 \nL 169.960209 262.893864 \nL 170.028026 262.610945 \nL 170.095843 262.610945 \nL 170.095843 262.328026 \nL 170.163661 262.328026 \nL 170.231478 262.328026 \nL 170.299295 261.903647 \nL 170.502747 261.903647 \nL 170.502747 261.762187 \nL 170.570564 261.762187 \nL 170.90965 261.762187 \nL 170.90965 261.620728 \nL 170.977467 261.620728 \nL 171.113102 261.620728 \nL 171.180919 261.054889 \nL 171.248736 261.054889 \nL 171.248736 260.91343 \nL 171.316553 260.91343 \nL 171.38437 260.91343 \nL 171.38437 260.77197 \nL 171.452188 260.77197 \nL 171.723456 260.77197 \nL 171.723456 260.63051 \nL 171.791274 260.63051 \nL 171.859091 260.63051 \nL 171.926908 260.206132 \nL 171.994725 260.206132 \nL 172.062543 259.923212 \nL 172.198177 259.923212 \nL 172.198177 259.357374 \nL 172.265994 259.357374 \nL 172.333811 259.357374 \nL 172.333811 259.215914 \nL 172.401629 259.215914 \nL 172.740715 259.215914 \nL 172.740715 258.932995 \nL 172.808532 258.932995 \nL 172.876349 258.932995 \nL 172.876349 258.367156 \nL 172.944166 258.367156 \nL 173.283252 258.367156 \nL 173.283252 258.084237 \nL 173.35107 258.084237 \nL 173.418887 258.084237 \nL 173.418887 257.942778 \nL 173.486704 257.942778 \nL 173.554521 257.942778 \nL 173.622338 257.09402 \nL 173.690156 257.09402 \nL 173.690156 256.95256 \nL 173.757973 256.95256 \nL 173.893607 256.95256 \nL 173.893607 256.811101 \nL 173.961424 256.811101 \nL 174.097059 256.811101 \nL 174.164876 256.528181 \nL 174.503962 256.528181 \nL 174.503962 256.386722 \nL 174.571779 256.386722 \nL 175.0465 256.386722 \nL 175.0465 255.962343 \nL 175.114317 255.962343 \nL 175.182134 255.962343 \nL 175.182134 255.679424 \nL 175.249951 255.679424 \nL 175.317769 255.679424 \nL 175.385586 255.113585 \nL 175.453403 255.113585 \nL 175.52122 254.406287 \nL 175.589037 254.406287 \nL 175.589037 254.264827 \nL 175.656855 254.264827 \nL 175.724672 254.264827 \nL 175.724672 253.981908 \nL 175.792489 253.981908 \nL 175.995941 253.981908 \nL 176.063758 253.557529 \nL 176.199392 253.557529 \nL 176.199392 253.27461 \nL 176.26721 253.27461 \nL 176.402844 253.27461 \nL 176.470661 252.708772 \nL 176.538478 252.708772 \nL 176.538478 252.142933 \nL 176.606296 252.142933 \nL 176.945382 252.142933 \nL 176.945382 251.860014 \nL 177.013199 251.860014 \nL 177.148833 251.860014 \nL 177.148833 251.718554 \nL 177.21665 251.718554 \nL 177.284468 251.718554 \nL 177.284468 251.577095 \nL 177.352285 251.577095 \nL 177.623554 251.577095 \nL 177.691371 251.294175 \nL 177.759188 251.294175 \nL 177.759188 251.152716 \nL 177.827005 251.152716 \nL 177.96264 251.152716 \nL 177.96264 250.869797 \nL 178.030457 250.869797 \nL 178.166091 250.869797 \nL 178.166091 250.728337 \nL 178.233909 250.728337 \nL 178.369543 250.728337 \nL 178.43736 250.445418 \nL 178.572995 250.445418 \nL 178.572995 250.303958 \nL 178.640812 250.303958 \nL 178.776446 250.303958 \nL 178.776446 249.73812 \nL 178.844263 249.73812 \nL 178.979898 249.73812 \nL 178.979898 249.59666 \nL 179.047715 249.59666 \nL 179.251167 249.59666 \nL 179.251167 249.030821 \nL 179.318984 249.030821 \nL 179.386801 249.030821 \nL 179.386801 248.464983 \nL 179.454618 248.464983 \nL 179.590253 248.464983 \nL 179.590253 248.040604 \nL 179.65807 248.040604 \nL 179.861522 248.040604 \nL 179.929339 247.757685 \nL 180.13279 247.757685 \nL 180.13279 247.191846 \nL 180.200608 247.191846 \nL 180.336242 247.191846 \nL 180.336242 246.908927 \nL 180.404059 246.908927 \nL 180.539694 246.908927 \nL 180.539694 246.767468 \nL 180.607511 246.767468 \nL 180.675328 246.767468 \nL 180.743145 246.343089 \nL 180.810963 246.343089 \nL 180.810963 246.201629 \nL 180.87878 246.201629 \nL 181.217866 246.201629 \nL 181.217866 246.060169 \nL 181.285683 246.060169 \nL 181.3535 246.060169 \nL 181.3535 245.91871 \nL 181.421317 245.91871 \nL 181.556952 245.91871 \nL 181.556952 245.77725 \nL 181.624769 245.77725 \nL 181.692586 245.77725 \nL 181.692586 245.635791 \nL 181.760404 245.635791 \nL 181.828221 245.635791 \nL 181.828221 245.352871 \nL 181.896038 245.352871 \nL 182.370758 245.352871 \nL 182.438576 245.069952 \nL 182.506393 245.069952 \nL 182.506393 244.787033 \nL 182.57421 244.787033 \nL 182.709844 244.787033 \nL 182.777662 244.504114 \nL 182.845479 244.504114 \nL 182.845479 244.362654 \nL 182.913296 244.362654 \nL 183.184565 244.362654 \nL 183.184565 244.221194 \nL 183.252382 244.221194 \nL 183.320199 244.221194 \nL 183.320199 244.079735 \nL 183.388017 244.079735 \nL 183.591468 244.079735 \nL 183.659285 243.655356 \nL 183.79492 243.655356 \nL 183.79492 243.372437 \nL 183.862737 243.372437 \nL 183.930554 243.372437 \nL 183.930554 242.948058 \nL 183.998371 242.948058 \nL 184.201823 242.948058 \nL 184.201823 242.806598 \nL 184.26964 242.806598 \nL 184.744361 242.806598 \nL 184.744361 242.665139 \nL 184.812178 242.665139 \nL 184.947812 242.665139 \nL 184.947812 242.382219 \nL 185.01563 242.382219 \nL 185.354716 242.382219 \nL 185.422533 242.0993 \nL 185.558167 242.0993 \nL 185.558167 241.95784 \nL 185.625984 241.95784 \nL 185.693802 241.95784 \nL 185.761619 241.250542 \nL 185.829436 241.250542 \nL 185.897253 240.967623 \nL 186.032888 240.967623 \nL 186.032888 240.684704 \nL 186.100705 240.684704 \nL 186.168522 240.684704 \nL 186.236339 240.118865 \nL 186.304157 240.118865 \nL 186.304157 239.977406 \nL 186.371974 239.977406 \nL 186.439791 239.977406 \nL 186.439791 239.835946 \nL 186.507608 239.835946 \nL 186.846694 239.835946 \nL 186.846694 239.553027 \nL 186.914511 239.553027 \nL 186.982329 239.553027 \nL 187.050146 239.270108 \nL 187.253597 239.270108 \nL 187.321415 238.987188 \nL 187.389232 238.987188 \nL 187.389232 238.845729 \nL 187.457049 238.845729 \nL 187.524866 238.845729 \nL 187.592684 238.56281 \nL 187.93177 238.56281 \nL 187.93177 238.27989 \nL 187.999587 238.27989 \nL 188.203038 238.27989 \nL 188.203038 237.996971 \nL 188.270856 237.996971 \nL 188.338673 237.996971 \nL 188.338673 237.855511 \nL 188.40649 237.855511 \nL 188.474307 237.855511 \nL 188.474307 237.714052 \nL 188.542124 237.714052 \nL 188.677759 237.714052 \nL 188.677759 237.572592 \nL 188.745576 237.572592 \nL 188.813393 237.572592 \nL 188.881211 237.289673 \nL 189.084662 237.289673 \nL 189.084662 237.148213 \nL 189.152479 237.148213 \nL 189.220297 237.148213 \nL 189.288114 236.440915 \nL 189.423748 236.440915 \nL 189.491565 236.157996 \nL 189.559383 236.157996 \nL 189.6272 235.733617 \nL 189.695017 235.733617 \nL 189.695017 235.450698 \nL 189.762834 235.450698 \nL 189.830651 235.450698 \nL 189.830651 235.309238 \nL 189.898469 235.309238 \nL 190.169737 235.309238 \nL 190.237555 234.7434 \nL 190.305372 234.7434 \nL 190.373189 234.460481 \nL 190.441006 234.460481 \nL 190.441006 234.319021 \nL 190.508824 234.319021 \nL 190.576641 234.319021 \nL 190.644458 233.894642 \nL 190.780092 233.894642 \nL 190.780092 233.753182 \nL 190.84791 233.753182 \nL 191.865168 233.753182 \nL 191.865168 233.611723 \nL 191.932985 233.611723 \nL 192.000802 233.611723 \nL 192.068619 233.328804 \nL 192.407705 233.328804 \nL 192.407705 233.045884 \nL 192.475523 233.045884 \nL 192.950243 233.045884 \nL 192.950243 232.904425 \nL 193.01806 232.904425 \nL 193.085877 232.904425 \nL 193.153695 232.480046 \nL 193.289329 232.480046 \nL 193.357146 232.197127 \nL 193.492781 232.197127 \nL 193.492781 231.914207 \nL 193.560598 231.914207 \nL 193.628415 231.914207 \nL 193.628415 231.772748 \nL 193.696232 231.772748 \nL 193.76405 231.772748 \nL 193.76405 231.489828 \nL 193.831867 231.489828 \nL 194.035318 231.489828 \nL 194.035318 231.348369 \nL 194.103136 231.348369 \nL 194.23877 231.348369 \nL 194.306587 230.78253 \nL 194.374404 230.78253 \nL 194.442222 230.075232 \nL 194.577856 230.075232 \nL 194.577856 229.792313 \nL 194.645673 229.792313 \nL 194.781308 229.792313 \nL 194.781308 229.509394 \nL 194.849125 229.509394 \nL 194.916942 229.509394 \nL 194.984759 229.226475 \nL 195.120394 229.226475 \nL 195.120394 228.802096 \nL 195.188211 228.802096 \nL 195.256028 228.802096 \nL 195.323845 228.377717 \nL 195.391663 228.377717 \nL 195.391663 228.094798 \nL 195.45948 228.094798 \nL 195.527297 228.094798 \nL 195.527297 227.953338 \nL 195.595114 227.953338 \nL 195.730749 227.953338 \nL 195.798566 227.387499 \nL 195.866383 227.387499 \nL 195.866383 227.24604 \nL 195.9342 227.24604 \nL 196.002018 227.24604 \nL 196.002018 226.680201 \nL 196.069835 226.680201 \nL 196.341104 226.680201 \nL 196.341104 226.114363 \nL 196.408921 226.114363 \nL 196.476738 226.114363 \nL 196.476738 225.831444 \nL 196.544555 225.831444 \nL 196.68019 225.831444 \nL 196.68019 225.689984 \nL 196.748007 225.689984 \nL 197.290544 225.689984 \nL 197.290544 225.548524 \nL 197.358362 225.548524 \nL 197.561813 225.548524 \nL 197.561813 225.407065 \nL 197.629631 225.407065 \nL 197.697448 225.407065 \nL 197.765265 224.841226 \nL 198.37562 224.841226 \nL 198.443437 223.851009 \nL 198.85034 223.851009 \nL 198.85034 223.709549 \nL 198.918158 223.709549 \nL 199.053792 223.709549 \nL 199.053792 223.56809 \nL 199.121609 223.56809 \nL 199.189426 223.56809 \nL 199.189426 223.42663 \nL 199.257244 223.42663 \nL 199.325061 223.42663 \nL 199.325061 223.143711 \nL 199.392878 223.143711 \nL 199.460695 223.143711 \nL 199.460695 222.860792 \nL 199.528512 222.860792 \nL 200.545771 222.860792 \nL 200.613588 222.294953 \nL 200.884857 222.294953 \nL 200.884857 221.587655 \nL 200.952674 221.587655 \nL 201.29176 221.587655 \nL 201.359577 221.304736 \nL 201.902115 221.304736 \nL 201.902115 221.021817 \nL 201.969932 221.021817 \nL 202.241201 221.021817 \nL 202.309018 220.738897 \nL 202.783738 220.738897 \nL 202.851556 220.314518 \nL 202.919373 220.314518 \nL 202.919373 220.173059 \nL 202.98719 220.173059 \nL 203.122825 220.173059 \nL 203.190642 219.60722 \nL 203.461911 219.60722 \nL 203.461911 219.465761 \nL 203.529728 219.465761 \nL 203.868814 219.465761 \nL 203.868814 219.182841 \nL 203.936631 219.182841 \nL 204.140083 219.182841 \nL 204.2079 218.899922 \nL 204.343534 218.899922 \nL 204.411351 218.617003 \nL 204.818255 218.617003 \nL 204.818255 218.475543 \nL 204.886072 218.475543 \nL 205.42861 218.475543 \nL 205.42861 218.192624 \nL 205.496427 218.192624 \nL 205.564244 218.192624 \nL 205.564244 218.051165 \nL 205.632061 218.051165 \nL 206.242416 218.051165 \nL 206.310233 217.768245 \nL 206.513685 217.768245 \nL 206.513685 217.626786 \nL 206.581502 217.626786 \nL 206.717137 217.626786 \nL 206.784954 217.060947 \nL 206.852771 217.060947 \nL 206.920588 216.636568 \nL 207.259674 216.636568 \nL 207.259674 216.495109 \nL 207.327491 216.495109 \nL 207.395309 216.495109 \nL 207.395309 216.353649 \nL 207.463126 216.353649 \nL 207.530943 216.353649 \nL 207.59876 215.787811 \nL 207.666578 215.787811 \nL 207.734395 215.363432 \nL 208.073481 215.363432 \nL 208.073481 215.080512 \nL 208.141298 215.080512 \nL 208.209115 215.080512 \nL 208.209115 214.939053 \nL 208.276932 214.939053 \nL 208.34475 214.939053 \nL 208.34475 214.656134 \nL 208.412567 214.656134 \nL 209.022922 214.656134 \nL 209.022922 214.373214 \nL 209.090739 214.373214 \nL 209.226373 214.373214 \nL 209.226373 214.231755 \nL 209.294191 214.231755 \nL 209.836728 214.231755 \nL 209.836728 214.090295 \nL 209.904545 214.090295 \nL 209.972363 214.090295 \nL 210.04018 213.807376 \nL 210.311449 213.807376 \nL 210.311449 213.524457 \nL 210.379266 213.524457 \nL 210.5149 213.524457 \nL 210.582718 213.241537 \nL 210.718352 213.241537 \nL 210.718352 213.100078 \nL 210.786169 213.100078 \nL 210.921804 213.100078 \nL 210.989621 212.534239 \nL 211.464341 212.534239 \nL 211.464341 212.39278 \nL 211.532158 212.39278 \nL 211.599976 212.39278 \nL 211.599976 212.25132 \nL 211.667793 212.25132 \nL 211.871245 212.25132 \nL 211.871245 212.10986 \nL 211.939062 212.10986 \nL 212.278148 212.10986 \nL 212.345965 211.402562 \nL 212.413782 211.402562 \nL 212.413782 210.978183 \nL 212.481599 210.978183 \nL 212.549417 210.978183 \nL 212.617234 210.695264 \nL 212.820685 210.695264 \nL 212.820685 210.553805 \nL 212.888503 210.553805 \nL 212.95632 210.553805 \nL 212.95632 210.412345 \nL 213.024137 210.412345 \nL 213.498858 210.412345 \nL 213.498858 210.270885 \nL 213.566675 210.270885 \nL 214.041395 210.270885 \nL 214.041395 210.129426 \nL 214.109212 210.129426 \nL 214.244847 210.129426 \nL 214.312664 209.705047 \nL 214.516116 209.705047 \nL 214.516116 209.280668 \nL 214.583933 209.280668 \nL 214.719567 209.280668 \nL 214.719567 209.139208 \nL 214.787385 209.139208 \nL 214.923019 209.139208 \nL 214.990836 208.856289 \nL 215.126471 208.856289 \nL 215.126471 208.71483 \nL 215.194288 208.71483 \nL 215.601191 208.71483 \nL 215.601191 208.57337 \nL 215.669008 208.57337 \nL 216.008094 208.57337 \nL 216.008094 208.43191 \nL 216.075912 208.43191 \nL 216.211546 208.43191 \nL 216.211546 208.290451 \nL 216.279363 208.290451 \nL 216.686266 208.290451 \nL 216.754084 207.866072 \nL 216.889718 207.866072 \nL 216.889718 207.724612 \nL 216.957535 207.724612 \nL 217.09317 207.724612 \nL 217.160987 207.441693 \nL 218.110428 207.441693 \nL 218.110428 207.300233 \nL 218.178245 207.300233 \nL 218.381697 207.300233 \nL 218.449514 206.734395 \nL 218.517331 206.734395 \nL 218.585148 206.451476 \nL 218.720783 206.451476 \nL 218.7886 206.027097 \nL 219.466772 206.027097 \nL 219.466772 205.885637 \nL 219.534589 205.885637 \nL 219.602406 205.885637 \nL 219.602406 205.744177 \nL 219.670224 205.744177 \nL 219.805858 205.744177 \nL 219.873675 205.319799 \nL 219.941492 205.319799 \nL 219.941492 205.178339 \nL 220.00931 205.178339 \nL 220.077127 205.178339 \nL 220.077127 205.036879 \nL 220.144944 205.036879 \nL 220.280579 205.036879 \nL 220.348396 204.75396 \nL 220.416213 204.75396 \nL 220.416213 204.612501 \nL 220.48403 204.612501 \nL 220.619665 204.612501 \nL 220.619665 204.329581 \nL 220.687482 204.329581 \nL 220.890933 204.329581 \nL 220.890933 204.188122 \nL 220.958751 204.188122 \nL 221.297837 204.188122 \nL 221.297837 204.046662 \nL 221.365654 204.046662 \nL 221.636923 204.046662 \nL 221.636923 203.905202 \nL 221.70474 203.905202 \nL 221.840374 203.905202 \nL 221.840374 203.480824 \nL 221.908192 203.480824 \nL 222.111643 203.480824 \nL 222.111643 203.056445 \nL 222.17946 203.056445 \nL 222.247278 203.056445 \nL 222.247278 202.773525 \nL 222.315095 202.773525 \nL 222.789815 202.773525 \nL 222.789815 202.632066 \nL 222.857632 202.632066 \nL 222.92545 202.632066 \nL 222.993267 202.349147 \nL 223.061084 202.349147 \nL 223.128901 202.066227 \nL 223.264536 202.066227 \nL 223.264536 201.641848 \nL 223.332353 201.641848 \nL 223.467987 201.641848 \nL 223.535805 201.358929 \nL 223.603622 201.358929 \nL 223.603622 201.21747 \nL 223.671439 201.21747 \nL 223.739256 201.21747 \nL 223.739256 200.793091 \nL 223.807073 200.793091 \nL 223.942708 200.793091 \nL 223.942708 200.651631 \nL 224.010525 200.651631 \nL 224.281794 200.651631 \nL 224.349611 200.368712 \nL 224.553063 200.368712 \nL 224.553063 200.085793 \nL 224.62088 200.085793 \nL 224.688697 200.085793 \nL 224.688697 199.944333 \nL 224.756514 199.944333 \nL 224.892149 199.944333 \nL 224.959966 199.661414 \nL 225.027783 199.661414 \nL 225.0956 199.378495 \nL 225.163418 199.378495 \nL 225.163418 199.237035 \nL 225.231235 199.237035 \nL 225.299052 199.237035 \nL 225.299052 199.095575 \nL 225.366869 199.095575 \nL 225.84159 199.095575 \nL 225.84159 198.812656 \nL 225.909407 198.812656 \nL 226.045041 198.812656 \nL 226.112859 198.529737 \nL 226.180676 198.529737 \nL 226.180676 198.388277 \nL 226.248493 198.388277 \nL 226.384127 198.388277 \nL 226.451945 198.105358 \nL 226.587579 198.105358 \nL 226.587579 197.963898 \nL 226.655396 197.963898 \nL 226.791031 197.963898 \nL 226.858848 197.539519 \nL 227.062299 197.539519 \nL 227.130117 197.2566 \nL 227.469203 197.2566 \nL 227.469203 197.115141 \nL 227.53702 197.115141 \nL 228.350826 197.115141 \nL 228.350826 196.690762 \nL 228.418644 196.690762 \nL 229.910622 196.690762 \nL 229.910622 196.549302 \nL 229.978439 196.549302 \nL 230.046257 196.549302 \nL 230.046257 196.407842 \nL 230.114074 196.407842 \nL 230.181891 196.407842 \nL 230.181891 196.124923 \nL 230.249708 196.124923 \nL 230.792246 196.124923 \nL 230.792246 195.983464 \nL 230.860063 195.983464 \nL 230.995698 195.983464 \nL 230.995698 195.842004 \nL 231.063515 195.842004 \nL 231.470418 195.842004 \nL 231.470418 195.700544 \nL 231.538235 195.700544 \nL 231.809504 195.700544 \nL 231.809504 195.559085 \nL 231.877321 195.559085 \nL 232.012956 195.559085 \nL 232.012956 195.276166 \nL 232.080773 195.276166 \nL 232.216407 195.276166 \nL 232.284225 194.993246 \nL 232.555493 194.993246 \nL 232.555493 194.710327 \nL 232.623311 194.710327 \nL 232.826762 194.710327 \nL 232.826762 194.568867 \nL 232.894579 194.568867 \nL 233.165848 194.568867 \nL 233.165848 194.427408 \nL 233.233666 194.427408 \nL 233.437117 194.427408 \nL 233.437117 194.144489 \nL 233.504934 194.144489 \nL 233.572752 194.144489 \nL 233.572752 194.003029 \nL 233.640569 194.003029 \nL 233.708386 194.003029 \nL 233.708386 193.861569 \nL 233.776203 193.861569 \nL 233.84402 193.861569 \nL 233.84402 193.72011 \nL 233.911838 193.72011 \nL 233.979655 193.72011 \nL 234.047472 193.43719 \nL 234.115289 193.43719 \nL 234.115289 193.295731 \nL 234.183106 193.295731 \nL 235.403816 193.295731 \nL 235.403816 193.012812 \nL 235.471633 193.012812 \nL 235.607268 193.012812 \nL 235.675085 192.729892 \nL 235.742902 192.729892 \nL 235.742902 192.588433 \nL 235.810719 192.588433 \nL 236.081988 192.588433 \nL 236.081988 192.446973 \nL 236.149806 192.446973 \nL 236.421074 192.446973 \nL 236.421074 192.164054 \nL 236.488892 192.164054 \nL 236.692343 192.164054 \nL 236.692343 192.022594 \nL 236.76016 192.022594 \nL 236.827978 192.022594 \nL 236.895795 191.598215 \nL 237.370515 191.598215 \nL 237.370515 191.456756 \nL 237.438333 191.456756 \nL 237.641784 191.456756 \nL 237.641784 191.315296 \nL 237.709601 191.315296 \nL 237.913053 191.315296 \nL 237.98087 190.749458 \nL 238.455591 190.749458 \nL 238.455591 190.607998 \nL 238.523408 190.607998 \nL 238.591225 190.607998 \nL 238.591225 190.466538 \nL 238.659042 190.466538 \nL 238.998128 190.466538 \nL 238.998128 190.325079 \nL 239.065946 190.325079 \nL 239.6763 190.325079 \nL 239.6763 190.183619 \nL 239.744118 190.183619 \nL 240.557924 190.183619 \nL 240.557924 189.9007 \nL 240.625741 189.9007 \nL 240.761376 189.9007 \nL 240.761376 189.75924 \nL 240.829193 189.75924 \nL 240.89701 189.75924 \nL 240.89701 189.617781 \nL 240.964827 189.617781 \nL 241.168279 189.617781 \nL 241.168279 189.334861 \nL 241.236096 189.334861 \nL 241.710817 189.334861 \nL 241.710817 189.193402 \nL 241.778634 189.193402 \nL 241.846451 189.193402 \nL 241.846451 189.051942 \nL 241.914268 189.051942 \nL 241.982086 189.051942 \nL 241.982086 188.910483 \nL 242.049903 188.910483 \nL 242.253354 188.910483 \nL 242.253354 188.627563 \nL 242.321172 188.627563 \nL 242.388989 188.627563 \nL 242.388989 188.486104 \nL 242.456806 188.486104 \nL 242.59244 188.486104 \nL 242.59244 188.344644 \nL 242.660258 188.344644 \nL 242.931526 188.344644 \nL 242.931526 188.061725 \nL 242.999344 188.061725 \nL 243.33843 188.061725 \nL 243.33843 187.778806 \nL 243.406247 187.778806 \nL 244.152236 187.778806 \nL 244.152236 187.637346 \nL 244.220053 187.637346 \nL 244.491322 187.637346 \nL 244.491322 187.354427 \nL 244.55914 187.354427 \nL 244.762591 187.354427 \nL 244.762591 187.212967 \nL 244.830408 187.212967 \nL 244.898226 187.212967 \nL 244.898226 187.071508 \nL 244.966043 187.071508 \nL 245.169494 187.071508 \nL 245.169494 186.930048 \nL 245.237312 186.930048 \nL 245.440763 186.930048 \nL 245.440763 186.788588 \nL 245.50858 186.788588 \nL 245.847667 186.788588 \nL 245.915484 186.505669 \nL 246.186753 186.505669 \nL 246.186753 186.364209 \nL 246.25457 186.364209 \nL 246.322387 186.364209 \nL 246.322387 186.22275 \nL 246.390204 186.22275 \nL 247.136193 186.22275 \nL 247.136193 185.939831 \nL 247.204011 185.939831 \nL 247.339645 185.939831 \nL 247.339645 185.798371 \nL 247.407462 185.798371 \nL 247.543097 185.798371 \nL 247.543097 185.656911 \nL 247.610914 185.656911 \nL 247.814366 185.656911 \nL 247.814366 185.373992 \nL 247.882183 185.373992 \nL 248.560355 185.373992 \nL 248.560355 185.091073 \nL 248.628172 185.091073 \nL 248.763807 185.091073 \nL 248.763807 184.808154 \nL 248.831624 184.808154 \nL 248.899441 184.808154 \nL 248.899441 184.666694 \nL 248.967258 184.666694 \nL 249.848882 184.666694 \nL 249.848882 184.525234 \nL 249.916699 184.525234 \nL 249.984516 184.525234 \nL 249.984516 184.383775 \nL 250.052333 184.383775 \nL 250.187968 184.383775 \nL 250.187968 184.242315 \nL 250.255785 184.242315 \nL 250.323602 184.242315 \nL 250.39142 183.959396 \nL 250.527054 183.959396 \nL 250.527054 183.817936 \nL 250.594871 183.817936 \nL 250.662688 183.817936 \nL 250.662688 183.676477 \nL 250.730506 183.676477 \nL 251.001774 183.676477 \nL 251.001774 183.535017 \nL 251.069592 183.535017 \nL 251.137409 183.535017 \nL 251.205226 182.686259 \nL 251.408678 182.686259 \nL 251.408678 182.26188 \nL 251.476495 182.26188 \nL 251.612129 182.26188 \nL 251.612129 182.120421 \nL 251.679947 182.120421 \nL 251.815581 182.120421 \nL 251.815581 181.978961 \nL 251.883398 181.978961 \nL 252.56157 181.978961 \nL 252.629387 181.696042 \nL 252.900656 181.696042 \nL 252.900656 181.554582 \nL 252.968474 181.554582 \nL 253.30756 181.554582 \nL 253.30756 181.271663 \nL 253.375377 181.271663 \nL 253.443194 181.271663 \nL 253.443194 181.130203 \nL 253.511011 181.130203 \nL 253.78228 181.130203 \nL 253.78228 180.988744 \nL 253.850097 180.988744 \nL 254.460452 180.988744 \nL 254.460452 180.847284 \nL 254.528269 180.847284 \nL 254.731721 180.847284 \nL 254.731721 180.705825 \nL 254.799538 180.705825 \nL 254.867355 180.705825 \nL 254.867355 180.564365 \nL 254.935173 180.564365 \nL 255.409893 180.564365 \nL 255.409893 180.422905 \nL 255.47771 180.422905 \nL 256.155882 180.422905 \nL 256.155882 180.281446 \nL 256.2237 180.281446 \nL 256.291517 180.281446 \nL 256.291517 180.139986 \nL 256.359334 180.139986 \nL 257.240958 180.139986 \nL 257.240958 179.998526 \nL 257.308775 179.998526 \nL 257.715678 179.998526 \nL 257.715678 179.857067 \nL 257.783495 179.857067 \nL 258.122581 179.857067 \nL 258.122581 179.715607 \nL 258.190399 179.715607 \nL 258.461667 179.715607 \nL 258.529485 179.432688 \nL 258.665119 179.432688 \nL 258.732936 179.008309 \nL 258.868571 179.008309 \nL 258.868571 178.866849 \nL 258.936388 178.866849 \nL 259.750194 178.866849 \nL 259.818012 178.58393 \nL 259.953646 178.58393 \nL 260.021463 178.159551 \nL 260.157098 178.159551 \nL 260.224915 177.876632 \nL 260.292732 177.876632 \nL 260.360549 177.593713 \nL 260.496184 177.593713 \nL 260.496184 177.452253 \nL 260.564001 177.452253 \nL 260.631818 177.452253 \nL 260.631818 177.027874 \nL 260.699635 177.027874 \nL 261.106539 177.027874 \nL 261.106539 176.886415 \nL 261.174356 176.886415 \nL 261.30999 176.886415 \nL 261.30999 176.744955 \nL 261.377807 176.744955 \nL 261.445625 176.744955 \nL 261.445625 176.603496 \nL 261.513442 176.603496 \nL 262.05598 176.603496 \nL 262.05598 176.462036 \nL 262.123797 176.462036 \nL 262.801969 176.462036 \nL 262.801969 176.320576 \nL 262.869786 176.320576 \nL 262.937603 176.320576 \nL 262.937603 176.037657 \nL 263.005421 176.037657 \nL 263.208872 176.037657 \nL 263.276689 175.754738 \nL 263.954861 175.754738 \nL 264.022679 175.330359 \nL 264.158313 175.330359 \nL 264.158313 175.188899 \nL 264.22613 175.188899 \nL 264.361765 175.188899 \nL 264.429582 174.623061 \nL 264.565216 174.623061 \nL 264.633034 174.340142 \nL 264.700851 174.340142 \nL 264.700851 174.198682 \nL 264.768668 174.198682 \nL 264.904302 174.198682 \nL 264.904302 174.057222 \nL 264.97212 174.057222 \nL 265.039937 174.057222 \nL 265.107754 173.491384 \nL 265.175571 173.491384 \nL 265.175571 173.349924 \nL 265.243388 173.349924 \nL 265.582474 173.349924 \nL 265.582474 173.208465 \nL 265.650292 173.208465 \nL 265.853743 173.208465 \nL 265.853743 173.067005 \nL 265.921561 173.067005 \nL 266.328464 173.067005 \nL 266.328464 172.925545 \nL 266.396281 172.925545 \nL 266.735367 172.925545 \nL 266.735367 172.784086 \nL 266.803184 172.784086 \nL 266.938819 172.784086 \nL 266.938819 172.642626 \nL 267.006636 172.642626 \nL 267.14227 172.642626 \nL 267.14227 172.359707 \nL 267.210088 172.359707 \nL 267.413539 172.359707 \nL 267.413539 172.218247 \nL 267.481356 172.218247 \nL 267.549174 172.218247 \nL 267.616991 171.935328 \nL 267.820442 171.935328 \nL 267.820442 171.652409 \nL 267.88826 171.652409 \nL 267.956077 171.652409 \nL 267.956077 171.510949 \nL 268.023894 171.510949 \nL 268.702066 171.510949 \nL 268.769883 170.945111 \nL 269.176787 170.945111 \nL 269.176787 170.662191 \nL 269.244604 170.662191 \nL 269.312421 170.662191 \nL 269.312421 170.379272 \nL 269.380238 170.379272 \nL 269.854959 170.379272 \nL 269.854959 169.954893 \nL 269.922776 169.954893 \nL 270.05841 169.954893 \nL 270.126228 169.671974 \nL 270.261862 169.671974 \nL 270.261862 169.530515 \nL 270.329679 169.530515 \nL 270.533131 169.530515 \nL 270.533131 169.389055 \nL 270.600948 169.389055 \nL 271.211303 169.389055 \nL 271.211303 169.247595 \nL 271.27912 169.247595 \nL 271.618206 169.247595 \nL 271.618206 169.106136 \nL 271.686023 169.106136 \nL 271.821658 169.106136 \nL 271.821658 168.823216 \nL 271.889475 168.823216 \nL 272.364195 168.823216 \nL 272.364195 168.681757 \nL 272.432013 168.681757 \nL 272.635464 168.681757 \nL 272.635464 168.540297 \nL 272.703281 168.540297 \nL 273.178002 168.540297 \nL 273.178002 168.398838 \nL 273.245819 168.398838 \nL 273.584905 168.398838 \nL 273.584905 167.974459 \nL 273.652722 167.974459 \nL 273.991808 167.974459 \nL 274.059626 167.40862 \nL 274.127443 167.40862 \nL 274.127443 167.125701 \nL 274.19526 167.125701 \nL 274.330895 167.125701 \nL 274.330895 166.984241 \nL 274.398712 166.984241 \nL 274.466529 166.984241 \nL 274.534346 166.559862 \nL 274.669981 166.559862 \nL 274.669981 166.276943 \nL 274.737798 166.276943 \nL 275.212518 166.276943 \nL 275.212518 166.135484 \nL 275.280335 166.135484 \nL 275.822873 166.135484 \nL 275.822873 165.994024 \nL 275.89069 165.994024 \nL 276.026325 165.994024 \nL 276.094142 165.428186 \nL 276.772314 165.428186 \nL 276.772314 165.286726 \nL 276.840131 165.286726 \nL 277.518303 165.286726 \nL 277.518303 165.003807 \nL 277.586121 165.003807 \nL 277.721755 165.003807 \nL 277.721755 164.720887 \nL 277.789572 164.720887 \nL 278.467744 164.720887 \nL 278.467744 164.579428 \nL 278.535561 164.579428 \nL 279.417185 164.579428 \nL 279.417185 164.437968 \nL 279.485002 164.437968 \nL 279.55282 164.437968 \nL 279.55282 164.155049 \nL 279.620637 164.155049 \nL 279.688454 164.155049 \nL 279.688454 164.013589 \nL 279.756271 164.013589 \nL 279.959723 164.013589 \nL 279.959723 163.73067 \nL 280.02754 163.73067 \nL 280.434443 163.73067 \nL 280.434443 163.58921 \nL 280.502261 163.58921 \nL 280.976981 163.58921 \nL 280.976981 163.164832 \nL 281.044798 163.164832 \nL 281.383884 163.164832 \nL 281.383884 163.023372 \nL 281.451702 163.023372 \nL 282.062056 163.023372 \nL 282.062056 162.881912 \nL 282.129874 162.881912 \nL 282.808046 162.881912 \nL 282.808046 162.457533 \nL 282.875863 162.457533 \nL 283.079315 162.457533 \nL 283.079315 162.316074 \nL 283.147132 162.316074 \nL 283.418401 162.316074 \nL 283.418401 162.033155 \nL 283.486218 162.033155 \nL 284.096573 162.033155 \nL 284.096573 161.891695 \nL 284.16439 161.891695 \nL 284.232207 161.891695 \nL 284.300024 161.325856 \nL 284.367842 161.325856 \nL 284.367842 161.184397 \nL 284.435659 161.184397 \nL 284.571293 161.184397 \nL 284.571293 161.042937 \nL 284.63911 161.042937 \nL 284.706928 161.042937 \nL 284.706928 160.618558 \nL 284.774745 160.618558 \nL 285.046014 160.618558 \nL 285.046014 160.477099 \nL 285.113831 160.477099 \nL 285.249465 160.477099 \nL 285.249465 160.335639 \nL 285.317282 160.335639 \nL 285.3851 160.335639 \nL 285.3851 160.19418 \nL 285.452917 160.19418 \nL 285.520734 160.19418 \nL 285.520734 160.05272 \nL 285.588551 160.05272 \nL 285.995455 160.05272 \nL 285.995455 159.91126 \nL 286.063272 159.91126 \nL 286.131089 159.91126 \nL 286.131089 159.769801 \nL 286.198906 159.769801 \nL 286.402358 159.769801 \nL 286.402358 159.628341 \nL 286.470175 159.628341 \nL 286.605809 159.628341 \nL 286.605809 159.345422 \nL 286.673627 159.345422 \nL 286.877078 159.345422 \nL 286.877078 159.203962 \nL 286.944895 159.203962 \nL 287.487433 159.203962 \nL 287.487433 159.062503 \nL 287.55525 159.062503 \nL 287.758702 159.062503 \nL 287.758702 158.921043 \nL 287.826519 158.921043 \nL 288.436874 158.921043 \nL 288.504691 158.638124 \nL 288.708143 158.638124 \nL 288.708143 158.496664 \nL 288.77596 158.496664 \nL 288.911595 158.496664 \nL 288.979412 158.213745 \nL 289.115046 158.213745 \nL 289.182863 157.647906 \nL 289.250681 157.647906 \nL 289.318498 157.364987 \nL 289.386315 157.364987 \nL 289.386315 157.223527 \nL 289.454132 157.223527 \nL 291.353014 157.223527 \nL 291.353014 156.799149 \nL 291.420831 156.799149 \nL 291.895552 156.799149 \nL 291.963369 155.950391 \nL 292.031186 155.950391 \nL 292.031186 155.808931 \nL 292.099003 155.808931 \nL 292.302455 155.808931 \nL 292.302455 155.667472 \nL 292.370272 155.667472 \nL 292.573724 155.667472 \nL 292.573724 155.384552 \nL 292.641541 155.384552 \nL 292.709358 155.384552 \nL 292.709358 155.243093 \nL 292.777175 155.243093 \nL 292.91281 155.243093 \nL 292.91281 155.101633 \nL 292.980627 155.101633 \nL 293.116262 155.101633 \nL 293.116262 154.960174 \nL 293.184079 154.960174 \nL 293.590982 154.960174 \nL 293.590982 154.818714 \nL 293.658799 154.818714 \nL 294.269154 154.818714 \nL 294.269154 154.677254 \nL 294.336971 154.677254 \nL 294.404789 154.677254 \nL 294.404789 154.394335 \nL 294.472606 154.394335 \nL 294.540423 154.394335 \nL 294.540423 154.252875 \nL 294.60824 154.252875 \nL 294.743875 154.252875 \nL 294.743875 154.111416 \nL 294.811692 154.111416 \nL 295.82895 154.111416 \nL 295.82895 153.969956 \nL 295.896767 153.969956 \nL 295.964584 153.969956 \nL 295.964584 153.828497 \nL 296.032402 153.828497 \nL 296.168036 153.828497 \nL 296.168036 153.687037 \nL 296.235853 153.687037 \nL 297.388746 153.687037 \nL 297.388746 153.545577 \nL 297.456563 153.545577 \nL 298.134735 153.545577 \nL 298.202552 153.262658 \nL 298.541638 153.262658 \nL 298.609456 152.979739 \nL 298.677273 152.979739 \nL 298.677273 152.838279 \nL 298.74509 152.838279 \nL 299.151993 152.838279 \nL 299.151993 152.69682 \nL 299.21981 152.69682 \nL 299.355445 152.69682 \nL 299.423262 152.4139 \nL 299.762348 152.4139 \nL 299.762348 152.272441 \nL 299.830165 152.272441 \nL 299.897982 152.272441 \nL 299.897982 152.130981 \nL 299.9658 152.130981 \nL 300.915241 152.130981 \nL 300.915241 151.848062 \nL 300.983058 151.848062 \nL 301.050875 151.848062 \nL 301.050875 151.565143 \nL 301.118692 151.565143 \nL 301.593413 151.565143 \nL 301.593413 151.423683 \nL 301.66123 151.423683 \nL 301.932499 151.423683 \nL 302.000316 151.140764 \nL 303.424477 151.140764 \nL 303.424477 150.999304 \nL 303.492295 150.999304 \nL 304.984273 150.999304 \nL 305.05209 150.716385 \nL 305.865897 150.716385 \nL 305.865897 150.574925 \nL 305.933714 150.574925 \nL 307.764779 150.574925 \nL 307.832596 150.292006 \nL 308.917671 150.292006 \nL 308.917671 150.150546 \nL 308.985489 150.150546 \nL 309.256757 150.150546 \nL 309.256757 149.867627 \nL 309.324575 149.867627 \nL 309.799295 149.867627 \nL 309.799295 149.726168 \nL 309.867112 149.726168 \nL 310.002747 149.726168 \nL 310.002747 149.443248 \nL 310.070564 149.443248 \nL 310.341833 149.443248 \nL 310.341833 149.301789 \nL 310.40965 149.301789 \nL 310.477467 149.301789 \nL 310.545284 149.018869 \nL 310.748736 149.018869 \nL 310.748736 148.87741 \nL 310.816553 148.87741 \nL 310.952188 148.87741 \nL 310.952188 148.73595 \nL 311.020005 148.73595 \nL 311.63036 148.73595 \nL 311.63036 148.311571 \nL 311.698177 148.311571 \nL 312.308532 148.311571 \nL 312.308532 148.170112 \nL 312.376349 148.170112 \nL 312.511983 148.170112 \nL 312.579801 147.887193 \nL 312.647618 147.887193 \nL 312.647618 147.745733 \nL 312.715435 147.745733 \nL 313.461424 147.745733 \nL 313.461424 147.462814 \nL 313.529242 147.462814 \nL 313.868328 147.462814 \nL 313.868328 147.321354 \nL 313.936145 147.321354 \nL 314.343048 147.321354 \nL 314.410865 147.038435 \nL 314.682134 147.038435 \nL 314.682134 146.896975 \nL 314.749951 146.896975 \nL 314.817769 146.896975 \nL 314.885586 146.614056 \nL 315.292489 146.614056 \nL 315.292489 146.472596 \nL 315.360306 146.472596 \nL 315.76721 146.472596 \nL 315.76721 146.331137 \nL 315.835027 146.331137 \nL 316.581016 146.331137 \nL 316.648833 146.048217 \nL 316.71665 146.048217 \nL 316.71665 145.906758 \nL 316.784468 145.906758 \nL 316.852285 145.906758 \nL 316.852285 145.765298 \nL 316.920102 145.765298 \nL 316.987919 145.765298 \nL 316.987919 145.623839 \nL 317.055737 145.623839 \nL 317.394823 145.623839 \nL 317.394823 145.482379 \nL 317.46264 145.482379 \nL 317.93736 145.482379 \nL 317.93736 145.340919 \nL 318.005177 145.340919 \nL 318.276446 145.340919 \nL 318.276446 145.19946 \nL 318.344263 145.19946 \nL 319.15807 145.19946 \nL 319.15807 145.058 \nL 319.225887 145.058 \nL 319.361522 145.058 \nL 319.429339 144.775081 \nL 319.700608 144.775081 \nL 319.700608 144.633621 \nL 319.768425 144.633621 \nL 320.37878 144.633621 \nL 320.37878 144.492162 \nL 320.446597 144.492162 \nL 320.514414 144.492162 \nL 320.514414 144.350702 \nL 320.582231 144.350702 \nL 320.785683 144.350702 \nL 320.8535 144.067783 \nL 321.667307 144.067783 \nL 321.667307 143.784863 \nL 321.735124 143.784863 \nL 321.938576 143.784863 \nL 321.938576 143.643404 \nL 322.006393 143.643404 \nL 323.023651 143.643404 \nL 323.023651 143.501944 \nL 323.091468 143.501944 \nL 323.362737 143.501944 \nL 323.362737 143.360485 \nL 323.430554 143.360485 \nL 323.498371 143.360485 \nL 323.498371 143.219025 \nL 323.566189 143.219025 \nL 324.040909 143.219025 \nL 324.040909 143.077565 \nL 324.108726 143.077565 \nL 324.176544 143.077565 \nL 324.176544 142.794646 \nL 324.244361 142.794646 \nL 324.583447 142.794646 \nL 324.651264 142.511727 \nL 324.719081 142.511727 \nL 324.719081 142.370267 \nL 324.786898 142.370267 \nL 325.125984 142.370267 \nL 325.193802 142.087348 \nL 325.46507 142.087348 \nL 325.46507 141.945888 \nL 325.532888 141.945888 \nL 326.278877 141.945888 \nL 326.346694 141.662969 \nL 326.753597 141.662969 \nL 326.753597 141.52151 \nL 326.821415 141.52151 \nL 327.499587 141.52151 \nL 327.499587 141.38005 \nL 327.567404 141.38005 \nL 327.90649 141.38005 \nL 327.90649 141.23859 \nL 327.974307 141.23859 \nL 328.652479 141.23859 \nL 328.652479 140.814211 \nL 328.720297 140.814211 \nL 330.890447 140.814211 \nL 330.958264 140.531292 \nL 331.026082 140.531292 \nL 331.093899 140.248373 \nL 331.568619 140.248373 \nL 331.636437 139.965454 \nL 331.772071 139.965454 \nL 331.772071 139.823994 \nL 331.839888 139.823994 \nL 332.246791 139.823994 \nL 332.246791 139.682534 \nL 332.314609 139.682534 \nL 332.382426 139.682534 \nL 332.450243 139.399615 \nL 333.26405 139.399615 \nL 333.331867 138.833777 \nL 333.399684 138.833777 \nL 333.399684 138.267938 \nL 333.467501 138.267938 \nL 333.806587 138.267938 \nL 333.806587 138.126479 \nL 333.874404 138.126479 \nL 333.942222 138.126479 \nL 334.010039 137.843559 \nL 334.077856 137.843559 \nL 334.145673 137.56064 \nL 334.349125 137.56064 \nL 334.349125 137.277721 \nL 334.416942 137.277721 \nL 334.823845 137.277721 \nL 334.823845 137.136261 \nL 334.891663 137.136261 \nL 335.027297 137.136261 \nL 335.027297 136.994802 \nL 335.095114 136.994802 \nL 335.298566 136.994802 \nL 335.298566 136.853342 \nL 335.366383 136.853342 \nL 335.976738 136.853342 \nL 335.976738 136.570423 \nL 336.044555 136.570423 \nL 337.400899 136.570423 \nL 337.400899 136.428963 \nL 337.468717 136.428963 \nL 337.604351 136.428963 \nL 337.604351 136.287504 \nL 337.672168 136.287504 \nL 338.418158 136.287504 \nL 338.418158 136.146044 \nL 338.485975 136.146044 \nL 339.910136 136.146044 \nL 339.910136 135.863125 \nL 339.977953 135.863125 \nL 340.181405 135.863125 \nL 340.181405 135.721665 \nL 340.249222 135.721665 \nL 340.723943 135.721665 \nL 340.723943 135.580205 \nL 340.79176 135.580205 \nL 340.927394 135.580205 \nL 340.927394 135.438746 \nL 340.995211 135.438746 \nL 341.537749 135.438746 \nL 341.537749 135.297286 \nL 341.605566 135.297286 \nL 342.826276 135.297286 \nL 342.826276 135.014367 \nL 342.894093 135.014367 \nL 343.097545 135.014367 \nL 343.097545 134.589988 \nL 343.165362 134.589988 \nL 343.300997 134.589988 \nL 343.300997 134.448529 \nL 343.368814 134.448529 \nL 344.589524 134.448529 \nL 344.589524 134.307069 \nL 344.657341 134.307069 \nL 344.725158 134.307069 \nL 344.725158 134.165609 \nL 344.792975 134.165609 \nL 344.860792 134.165609 \nL 344.860792 134.02415 \nL 344.92861 134.02415 \nL 345.267696 134.02415 \nL 345.335513 133.599771 \nL 345.538965 133.599771 \nL 345.538965 133.458311 \nL 345.606782 133.458311 \nL 346.420588 133.458311 \nL 346.420588 133.316852 \nL 346.488405 133.316852 \nL 346.62404 133.316852 \nL 346.62404 133.175392 \nL 346.691857 133.175392 \nL 346.827491 133.175392 \nL 346.827491 133.033932 \nL 346.895309 133.033932 \nL 347.030943 133.033932 \nL 347.030943 132.609553 \nL 347.09876 132.609553 \nL 348.794191 132.609553 \nL 348.794191 132.468094 \nL 348.862008 132.468094 \nL 349.404545 132.468094 \nL 349.404545 132.326634 \nL 349.472363 132.326634 \nL 350.150535 132.326634 \nL 350.150535 132.185175 \nL 350.218352 132.185175 \nL 350.828707 132.185175 \nL 350.828707 131.902255 \nL 350.896524 131.902255 \nL 351.099976 131.902255 \nL 351.099976 131.760796 \nL 351.167793 131.760796 \nL 351.371245 131.760796 \nL 351.371245 131.477876 \nL 351.439062 131.477876 \nL 351.845965 131.477876 \nL 351.845965 131.194957 \nL 351.913782 131.194957 \nL 352.185051 131.194957 \nL 352.185051 131.053498 \nL 352.252868 131.053498 \nL 352.388503 131.053498 \nL 352.388503 130.912038 \nL 352.45632 130.912038 \nL 352.795406 130.912038 \nL 352.795406 130.770578 \nL 352.863223 130.770578 \nL 352.998858 130.770578 \nL 352.998858 130.487659 \nL 353.066675 130.487659 \nL 353.405761 130.487659 \nL 353.405761 130.3462 \nL 353.473578 130.3462 \nL 353.67703 130.3462 \nL 353.67703 130.20474 \nL 353.744847 130.20474 \nL 353.880481 130.20474 \nL 353.880481 130.06328 \nL 353.948298 130.06328 \nL 354.083933 130.06328 \nL 354.083933 129.921821 \nL 354.15175 129.921821 \nL 354.287385 129.921821 \nL 354.355202 129.638901 \nL 354.626471 129.638901 \nL 354.626471 129.497442 \nL 354.694288 129.497442 \nL 355.236825 129.497442 \nL 355.236825 129.355982 \nL 355.304643 129.355982 \nL 355.440277 129.355982 \nL 355.440277 129.214523 \nL 355.508094 129.214523 \nL 355.914998 129.214523 \nL 355.914998 129.073063 \nL 355.982815 129.073063 \nL 356.321901 129.073063 \nL 356.389718 128.790144 \nL 357.135707 128.790144 \nL 357.135707 128.648684 \nL 357.203525 128.648684 \nL 357.542611 128.648684 \nL 357.542611 128.507224 \nL 357.610428 128.507224 \nL 358.085148 128.507224 \nL 358.085148 128.224305 \nL 358.152965 128.224305 \nL 358.356417 128.224305 \nL 358.356417 128.082846 \nL 358.424234 128.082846 \nL 358.76332 128.082846 \nL 358.76332 127.941386 \nL 358.831138 127.941386 \nL 359.034589 127.941386 \nL 359.034589 127.799926 \nL 359.102406 127.799926 \nL 359.170224 127.799926 \nL 359.170224 127.658467 \nL 359.238041 127.658467 \nL 359.644944 127.658467 \nL 359.712761 127.375547 \nL 360.255299 127.375547 \nL 360.323116 127.092628 \nL 360.526568 127.092628 \nL 360.526568 126.668249 \nL 360.594385 126.668249 \nL 360.730019 126.668249 \nL 360.730019 126.52679 \nL 360.797837 126.52679 \nL 361.136923 126.52679 \nL 361.20474 126.24387 \nL 361.272557 126.24387 \nL 361.272557 126.102411 \nL 361.340374 126.102411 \nL 361.67946 126.102411 \nL 361.67946 125.960951 \nL 361.747278 125.960951 \nL 361.950729 125.960951 \nL 361.950729 125.678032 \nL 362.018546 125.678032 \nL 362.493267 125.678032 \nL 362.493267 125.536572 \nL 362.561084 125.536572 \nL 362.967987 125.536572 \nL 362.967987 125.395113 \nL 363.035805 125.395113 \nL 363.307073 125.395113 \nL 363.307073 125.253653 \nL 363.374891 125.253653 \nL 363.849611 125.253653 \nL 363.849611 125.112194 \nL 363.917428 125.112194 \nL 363.985246 125.112194 \nL 364.053063 124.829274 \nL 364.12088 124.829274 \nL 364.12088 124.687815 \nL 364.188697 124.687815 \nL 364.459966 124.687815 \nL 364.459966 124.546355 \nL 364.527783 124.546355 \nL 364.663418 124.546355 \nL 364.663418 124.404895 \nL 364.731235 124.404895 \nL 364.866869 124.404895 \nL 364.866869 124.263436 \nL 364.934686 124.263436 \nL 365.273772 124.263436 \nL 365.273772 124.121976 \nL 365.34159 124.121976 \nL 365.545041 124.121976 \nL 365.612859 123.839057 \nL 365.748493 123.839057 \nL 365.748493 123.697597 \nL 365.81631 123.697597 \nL 366.358848 123.697597 \nL 366.358848 123.556138 \nL 366.426665 123.556138 \nL 366.562299 123.556138 \nL 366.562299 123.273218 \nL 366.630117 123.273218 \nL 367.443923 123.273218 \nL 367.443923 123.131759 \nL 367.51174 123.131759 \nL 368.393364 123.131759 \nL 368.393364 122.990299 \nL 368.461181 122.990299 \nL 369.546257 122.990299 \nL 369.546257 122.84884 \nL 369.614074 122.84884 \nL 370.224429 122.84884 \nL 370.224429 122.70738 \nL 370.292246 122.70738 \nL 370.360063 122.70738 \nL 370.360063 122.56592 \nL 370.42788 122.56592 \nL 370.631332 122.56592 \nL 370.631332 122.424461 \nL 370.699149 122.424461 \nL 371.716407 122.424461 \nL 371.716407 122.141541 \nL 371.784225 122.141541 \nL 371.852042 122.141541 \nL 371.852042 121.717163 \nL 371.919859 121.717163 \nL 372.123311 121.717163 \nL 372.191128 121.292784 \nL 372.326762 121.292784 \nL 372.326762 121.151324 \nL 372.394579 121.151324 \nL 372.530214 121.151324 \nL 372.598031 120.726945 \nL 372.937117 120.726945 \nL 372.937117 120.585486 \nL 373.004934 120.585486 \nL 373.818741 120.585486 \nL 373.818741 120.444026 \nL 373.886558 120.444026 \nL 374.157827 120.444026 \nL 374.157827 120.302566 \nL 374.225644 120.302566 \nL 375.242902 120.302566 \nL 375.242902 120.161107 \nL 375.310719 120.161107 \nL 375.921074 120.161107 \nL 375.921074 120.019647 \nL 375.988892 120.019647 \nL 376.395795 120.019647 \nL 376.463612 119.736728 \nL 376.667064 119.736728 \nL 376.667064 119.453809 \nL 376.734881 119.453809 \nL 376.938333 119.453809 \nL 376.938333 119.312349 \nL 377.00615 119.312349 \nL 377.48087 119.312349 \nL 377.548687 119.02943 \nL 378.091225 119.02943 \nL 378.091225 118.88797 \nL 378.159042 118.88797 \nL 378.22686 118.88797 \nL 378.22686 118.746511 \nL 378.294677 118.746511 \nL 378.362494 118.746511 \nL 378.362494 118.605051 \nL 378.430311 118.605051 \nL 379.040666 118.605051 \nL 379.040666 118.463591 \nL 379.108483 118.463591 \nL 379.311935 118.463591 \nL 379.311935 118.322132 \nL 379.379752 118.322132 \nL 379.718838 118.322132 \nL 379.718838 118.180672 \nL 379.786655 118.180672 \nL 380.193559 118.180672 \nL 380.193559 118.039212 \nL 380.261376 118.039212 \nL 380.329193 118.039212 \nL 380.329193 117.897753 \nL 380.39701 117.897753 \nL 380.736096 117.897753 \nL 380.736096 117.756293 \nL 380.803913 117.756293 \nL 381.007365 117.756293 \nL 381.007365 117.614834 \nL 381.075182 117.614834 \nL 381.278634 117.614834 \nL 381.278634 117.473374 \nL 381.346451 117.473374 \nL 381.753354 117.473374 \nL 381.753354 117.331914 \nL 381.821172 117.331914 \nL 381.888989 117.331914 \nL 381.888989 117.190455 \nL 381.956806 117.190455 \nL 383.041881 117.190455 \nL 383.041881 117.048995 \nL 383.109699 117.048995 \nL 383.245333 117.048995 \nL 383.245333 116.766076 \nL 383.31315 116.766076 \nL 383.448785 116.766076 \nL 383.448785 116.624616 \nL 383.516602 116.624616 \nL 383.787871 116.624616 \nL 383.787871 116.483157 \nL 383.855688 116.483157 \nL 384.126957 116.483157 \nL 384.126957 116.341697 \nL 384.194774 116.341697 \nL 384.398226 116.341697 \nL 384.398226 116.200237 \nL 384.466043 116.200237 \nL 384.805129 116.200237 \nL 384.805129 116.058778 \nL 384.872946 116.058778 \nL 385.076398 116.058778 \nL 385.076398 115.917318 \nL 385.144215 115.917318 \nL 385.279849 115.917318 \nL 385.279849 115.775859 \nL 385.347667 115.775859 \nL 385.483301 115.775859 \nL 385.483301 115.634399 \nL 385.551118 115.634399 \nL 385.686753 115.634399 \nL 385.686753 115.35148 \nL 385.75457 115.35148 \nL 386.025839 115.35148 \nL 386.025839 115.21002 \nL 386.093656 115.21002 \nL 386.161473 115.21002 \nL 386.161473 115.06856 \nL 386.22929 115.06856 \nL 386.97528 115.06856 \nL 386.97528 114.927101 \nL 387.043097 114.927101 \nL 387.314366 114.927101 \nL 387.314366 114.644182 \nL 387.382183 114.644182 \nL 388.874161 114.644182 \nL 388.874161 114.361262 \nL 388.941979 114.361262 \nL 390.36614 114.361262 \nL 390.36614 114.219803 \nL 390.433957 114.219803 \nL 390.501774 114.219803 \nL 390.501774 114.078343 \nL 390.569592 114.078343 \nL 390.705226 114.078343 \nL 390.705226 113.936883 \nL 390.773043 113.936883 \nL 390.976495 113.936883 \nL 390.976495 113.795424 \nL 391.044312 113.795424 \nL 391.315581 113.795424 \nL 391.315581 113.653964 \nL 391.383398 113.653964 \nL 391.790301 113.653964 \nL 391.858119 113.229585 \nL 391.993753 113.229585 \nL 391.993753 113.088126 \nL 392.06157 113.088126 \nL 392.129387 113.088126 \nL 392.197205 112.663747 \nL 392.671925 112.663747 \nL 392.671925 112.522287 \nL 392.739742 112.522287 \nL 392.875377 112.522287 \nL 392.875377 112.380828 \nL 392.943194 112.380828 \nL 393.078828 112.380828 \nL 393.078828 112.239368 \nL 393.146646 112.239368 \nL 393.214463 112.239368 \nL 393.214463 112.097908 \nL 393.28228 112.097908 \nL 393.350097 112.097908 \nL 393.350097 111.67353 \nL 393.417914 111.67353 \nL 393.757 111.67353 \nL 393.757 111.53207 \nL 393.824818 111.53207 \nL 393.892635 111.53207 \nL 393.892635 111.39061 \nL 393.960452 111.39061 \nL 394.096087 111.39061 \nL 394.096087 111.249151 \nL 394.163904 111.249151 \nL 394.231721 111.249151 \nL 394.231721 111.107691 \nL 394.299538 111.107691 \nL 395.384614 111.107691 \nL 395.384614 110.824772 \nL 395.452431 110.824772 \nL 395.520248 110.824772 \nL 395.520248 110.541853 \nL 395.588065 110.541853 \nL 395.994968 110.541853 \nL 395.994968 110.258933 \nL 396.062786 110.258933 \nL 396.401872 110.258933 \nL 396.401872 110.117474 \nL 396.469689 110.117474 \nL 396.67314 110.117474 \nL 396.67314 109.834554 \nL 396.740958 109.834554 \nL 396.876592 109.834554 \nL 396.876592 109.693095 \nL 396.944409 109.693095 \nL 397.147861 109.693095 \nL 397.215678 109.410176 \nL 397.554764 109.410176 \nL 397.622581 109.127256 \nL 397.690399 109.127256 \nL 397.758216 108.844337 \nL 398.029485 108.844337 \nL 398.029485 108.702877 \nL 398.097302 108.702877 \nL 398.436388 108.702877 \nL 398.436388 108.561418 \nL 398.504205 108.561418 \nL 398.572022 108.561418 \nL 398.572022 108.419958 \nL 398.63984 108.419958 \nL 399.182377 108.419958 \nL 399.182377 108.278499 \nL 399.250194 108.278499 \nL 399.521463 108.278499 \nL 399.521463 108.137039 \nL 399.589281 108.137039 \nL 399.724915 108.137039 \nL 399.792732 107.85412 \nL 399.860549 107.85412 \nL 399.860549 107.71266 \nL 399.928367 107.71266 \nL 400.199635 107.71266 \nL 400.199635 107.429741 \nL 400.267453 107.429741 \nL 400.33527 107.429741 \nL 400.33527 107.288281 \nL 400.403087 107.288281 \nL 400.945625 107.288281 \nL 400.945625 107.146822 \nL 401.013442 107.146822 \nL 401.216894 107.146822 \nL 401.216894 106.863902 \nL 401.284711 106.863902 \nL 401.962883 106.863902 \nL 401.962883 106.722443 \nL 402.0307 106.722443 \nL 402.437603 106.722443 \nL 402.437603 106.580983 \nL 402.505421 106.580983 \nL 402.912324 106.580983 \nL 402.912324 106.439524 \nL 402.980141 106.439524 \nL 403.658313 106.439524 \nL 403.658313 106.298064 \nL 403.72613 106.298064 \nL 403.861765 106.298064 \nL 403.929582 105.873685 \nL 405.828464 105.873685 \nL 405.828464 105.732225 \nL 405.896281 105.732225 \nL 406.438819 105.732225 \nL 406.438819 105.449306 \nL 406.506636 105.449306 \nL 409.015873 105.449306 \nL 409.08369 105.166387 \nL 409.626228 105.166387 \nL 409.694045 104.742008 \nL 409.829679 104.742008 \nL 409.829679 104.600548 \nL 409.897496 104.600548 \nL 410.3044 104.600548 \nL 410.3044 104.317629 \nL 410.372217 104.317629 \nL 410.507851 104.317629 \nL 410.507851 104.17617 \nL 410.575668 104.17617 \nL 410.711303 104.17617 \nL 410.711303 104.03471 \nL 410.77912 104.03471 \nL 411.660744 104.03471 \nL 411.728561 103.610331 \nL 411.796378 103.610331 \nL 411.796378 103.468872 \nL 411.864195 103.468872 \nL 412.067647 103.468872 \nL 412.067647 103.327412 \nL 412.135464 103.327412 \nL 412.47455 103.327412 \nL 412.542368 103.044493 \nL 413.627443 103.044493 \nL 413.627443 102.903033 \nL 413.69526 102.903033 \nL 413.830895 102.903033 \nL 413.830895 102.761573 \nL 413.898712 102.761573 \nL 413.966529 102.761573 \nL 413.966529 102.620114 \nL 414.034346 102.620114 \nL 414.373432 102.620114 \nL 414.373432 102.478654 \nL 414.441249 102.478654 \nL 414.780335 102.478654 \nL 414.780335 102.054275 \nL 414.848153 102.054275 \nL 414.983787 102.054275 \nL 414.983787 101.912816 \nL 415.051604 101.912816 \nL 415.797594 101.912816 \nL 415.797594 101.771356 \nL 415.865411 101.771356 \nL 416.068862 101.771356 \nL 416.068862 101.629896 \nL 416.13668 101.629896 \nL 416.272314 101.629896 \nL 416.272314 101.488437 \nL 416.340131 101.488437 \nL 416.407948 101.488437 \nL 416.475766 101.205518 \nL 416.950486 101.205518 \nL 416.950486 101.064058 \nL 417.018303 101.064058 \nL 417.493024 101.064058 \nL 417.493024 100.922598 \nL 417.560841 100.922598 \nL 417.628658 100.922598 \nL 417.628658 100.781139 \nL 417.696475 100.781139 \nL 417.967744 100.781139 \nL 417.967744 100.639679 \nL 418.035561 100.639679 \nL 418.645916 100.639679 \nL 418.645916 100.498219 \nL 418.713734 100.498219 \nL 418.849368 100.498219 \nL 418.849368 100.2153 \nL 418.917185 100.2153 \nL 418.985002 100.2153 \nL 418.985002 99.932381 \nL 419.05282 99.932381 \nL 419.391906 99.932381 \nL 419.459723 99.649462 \nL 419.730992 99.649462 \nL 419.730992 99.508002 \nL 419.798809 99.508002 \nL 420.409164 99.508002 \nL 420.409164 99.366543 \nL 420.476981 99.366543 \nL 420.544798 99.366543 \nL 420.544798 99.225083 \nL 420.612615 99.225083 \nL 420.816067 99.225083 \nL 420.816067 99.083623 \nL 420.883884 99.083623 \nL 421.290788 99.083623 \nL 421.290788 98.942164 \nL 421.358605 98.942164 \nL 421.562056 98.942164 \nL 421.562056 98.800704 \nL 421.629874 98.800704 \nL 423.054035 98.800704 \nL 423.054035 98.659244 \nL 423.121852 98.659244 \nL 423.800024 98.659244 \nL 423.800024 98.517785 \nL 423.867842 98.517785 \nL 424.274745 98.517785 \nL 424.274745 98.234866 \nL 424.342562 98.234866 \nL 424.410379 98.234866 \nL 424.410379 98.093406 \nL 424.478196 98.093406 \nL 425.156368 98.093406 \nL 425.156368 97.951946 \nL 425.224186 97.951946 \nL 426.512713 97.951946 \nL 426.512713 97.810487 \nL 426.58053 97.810487 \nL 427.597788 97.810487 \nL 427.597788 97.669027 \nL 427.665605 97.669027 \nL 428.682863 97.669027 \nL 428.750681 97.386108 \nL 429.49667 97.386108 \nL 429.49667 97.244648 \nL 429.564487 97.244648 \nL 429.632304 97.244648 \nL 429.632304 97.103189 \nL 429.700122 97.103189 \nL 429.903573 97.103189 \nL 429.903573 96.961729 \nL 429.97139 96.961729 \nL 430.71738 96.961729 \nL 430.71738 96.820269 \nL 430.785197 96.820269 \nL 432.141541 96.820269 \nL 432.141541 96.67881 \nL 432.209358 96.67881 \nL 432.480627 96.67881 \nL 432.480627 96.53735 \nL 432.548444 96.53735 \nL 432.819713 96.53735 \nL 432.819713 96.39589 \nL 432.88753 96.39589 \nL 433.023165 96.39589 \nL 433.023165 96.254431 \nL 433.090982 96.254431 \nL 433.63352 96.254431 \nL 433.63352 96.112971 \nL 433.701337 96.112971 \nL 433.904789 96.112971 \nL 433.972606 95.688592 \nL 435.193316 95.688592 \nL 435.193316 95.547133 \nL 435.261133 95.547133 \nL 435.532402 95.547133 \nL 435.532402 95.405673 \nL 435.600219 95.405673 \nL 435.939305 95.405673 \nL 435.939305 95.264213 \nL 436.007122 95.264213 \nL 436.210574 95.264213 \nL 436.210574 95.122754 \nL 436.278391 95.122754 \nL 436.54966 95.122754 \nL 436.54966 94.839835 \nL 436.617477 94.839835 \nL 437.092197 94.839835 \nL 437.092197 94.698375 \nL 437.160015 94.698375 \nL 438.991079 94.698375 \nL 439.058896 94.415456 \nL 439.194531 94.415456 \nL 439.194531 94.273996 \nL 439.262348 94.273996 \nL 441.432499 94.273996 \nL 441.500316 93.708158 \nL 441.703768 93.708158 \nL 441.703768 93.425238 \nL 441.771585 93.425238 \nL 442.585391 93.425238 \nL 442.585391 93.283779 \nL 442.653209 93.283779 \nL 442.721026 93.283779 \nL 442.721026 93.142319 \nL 442.788843 93.142319 \nL 443.602649 93.142319 \nL 443.602649 92.8594 \nL 443.670467 92.8594 \nL 444.687725 92.8594 \nL 444.687725 92.576481 \nL 444.755542 92.576481 \nL 445.840617 92.576481 \nL 445.840617 92.435021 \nL 445.908435 92.435021 \nL 446.247521 92.435021 \nL 446.247521 92.293561 \nL 446.315338 92.293561 \nL 446.518789 92.293561 \nL 446.518789 92.152102 \nL 446.586607 92.152102 \nL 447.061327 92.152102 \nL 447.061327 92.010642 \nL 447.129144 92.010642 \nL 447.332596 92.010642 \nL 447.332596 91.869183 \nL 447.400413 91.869183 \nL 448.349854 91.869183 \nL 448.349854 91.727723 \nL 448.417671 91.727723 \nL 449.367112 91.727723 \nL 449.367112 91.586263 \nL 449.43493 91.586263 \nL 450.045284 91.586263 \nL 450.045284 91.444804 \nL 450.113102 91.444804 \nL 450.38437 91.444804 \nL 450.38437 91.303344 \nL 450.452188 91.303344 \nL 451.198177 91.303344 \nL 451.198177 91.161884 \nL 451.265994 91.161884 \nL 451.60508 91.161884 \nL 451.60508 91.020425 \nL 451.672897 91.020425 \nL 452.011983 91.020425 \nL 452.011983 90.878965 \nL 452.079801 90.878965 \nL 453.978683 90.878965 \nL 453.978683 90.737506 \nL 454.0465 90.737506 \nL 454.182134 90.737506 \nL 454.182134 90.596046 \nL 454.249951 90.596046 \nL 454.928123 90.596046 \nL 454.928123 90.454586 \nL 454.995941 90.454586 \nL 455.470661 90.454586 \nL 455.470661 90.313127 \nL 455.538478 90.313127 \nL 455.809747 90.313127 \nL 455.809747 90.171667 \nL 455.877564 90.171667 \nL 455.945382 90.171667 \nL 455.945382 90.030208 \nL 456.013199 90.030208 \nL 456.759188 90.030208 \nL 456.759188 89.888748 \nL 456.827005 89.888748 \nL 457.979898 89.888748 \nL 457.979898 89.747288 \nL 458.047715 89.747288 \nL 458.115532 89.747288 \nL 458.115532 89.605829 \nL 458.18335 89.605829 \nL 459.268425 89.605829 \nL 459.268425 89.464369 \nL 459.336242 89.464369 \nL 460.285683 89.464369 \nL 460.285683 89.322909 \nL 460.3535 89.322909 \nL 460.760404 89.322909 \nL 460.760404 89.18145 \nL 460.828221 89.18145 \nL 461.235124 89.18145 \nL 461.235124 88.898531 \nL 461.302941 88.898531 \nL 461.506393 88.898531 \nL 461.506393 88.757071 \nL 461.57421 88.757071 \nL 461.642027 88.757071 \nL 461.642027 88.615611 \nL 461.709844 88.615611 \nL 461.845479 88.615611 \nL 461.845479 88.474152 \nL 461.913296 88.474152 \nL 462.591468 88.474152 \nL 462.591468 88.332692 \nL 462.659285 88.332692 \nL 463.066189 88.332692 \nL 463.066189 88.191232 \nL 463.134006 88.191232 \nL 463.473092 88.191232 \nL 463.473092 88.049773 \nL 463.540909 88.049773 \nL 463.879995 88.049773 \nL 463.879995 87.908313 \nL 463.947812 87.908313 \nL 464.829436 87.908313 \nL 464.829436 87.766854 \nL 464.897253 87.766854 \nL 465.304157 87.766854 \nL 465.304157 87.625394 \nL 465.371974 87.625394 \nL 465.439791 87.625394 \nL 465.439791 87.342475 \nL 465.507608 87.342475 \nL 467.203038 87.342475 \nL 467.203038 87.201015 \nL 467.270856 87.201015 \nL 467.474307 87.201015 \nL 467.474307 87.059555 \nL 467.542124 87.059555 \nL 468.152479 87.059555 \nL 468.152479 86.776636 \nL 468.220297 86.776636 \nL 468.355931 86.776636 \nL 468.355931 86.635177 \nL 468.423748 86.635177 \nL 468.695017 86.635177 \nL 468.695017 86.493717 \nL 468.762834 86.493717 \nL 468.898469 86.493717 \nL 468.898469 86.352257 \nL 468.966286 86.352257 \nL 471.814609 86.352257 \nL 471.814609 86.210798 \nL 471.882426 86.210798 \nL 472.085877 86.210798 \nL 472.085877 86.069338 \nL 472.153695 86.069338 \nL 472.696232 86.069338 \nL 472.696232 85.927879 \nL 472.76405 85.927879 \nL 473.645673 85.927879 \nL 473.645673 85.786419 \nL 473.713491 85.786419 \nL 475.951458 85.786419 \nL 475.951458 85.644959 \nL 476.019276 85.644959 \nL 476.697448 85.644959 \nL 476.697448 85.5035 \nL 476.765265 85.5035 \nL 477.239985 85.5035 \nL 477.239985 85.36204 \nL 477.307803 85.36204 \nL 477.443437 85.36204 \nL 477.443437 85.22058 \nL 477.511254 85.22058 \nL 477.782523 85.22058 \nL 477.85034 84.937661 \nL 478.392878 84.937661 \nL 478.392878 84.654742 \nL 478.460695 84.654742 \nL 478.528512 84.654742 \nL 478.528512 84.513282 \nL 478.59633 84.513282 \nL 479.138867 84.513282 \nL 479.138867 84.371823 \nL 479.206684 84.371823 \nL 479.952674 84.371823 \nL 479.952674 84.230363 \nL 480.020491 84.230363 \nL 481.105566 84.230363 \nL 481.105566 84.088903 \nL 481.173384 84.088903 \nL 481.376835 84.088903 \nL 481.376835 83.947444 \nL 481.444652 83.947444 \nL 482.190642 83.947444 \nL 482.190642 83.805984 \nL 482.258459 83.805984 \nL 482.868814 83.805984 \nL 482.868814 83.664525 \nL 482.936631 83.664525 \nL 483.68262 83.664525 \nL 483.68262 83.523065 \nL 483.750438 83.523065 \nL 484.496427 83.523065 \nL 484.496427 83.381605 \nL 484.564244 83.381605 \nL 484.767696 83.381605 \nL 484.767696 83.240146 \nL 484.835513 83.240146 \nL 485.174599 83.240146 \nL 485.174599 83.098686 \nL 485.242416 83.098686 \nL 485.378051 83.098686 \nL 485.378051 82.957226 \nL 485.445868 82.957226 \nL 485.649319 82.957226 \nL 485.649319 82.815767 \nL 485.717137 82.815767 \nL 486.666578 82.815767 \nL 486.666578 82.674307 \nL 486.734395 82.674307 \nL 487.005664 82.674307 \nL 487.005664 82.532848 \nL 487.073481 82.532848 \nL 489.447083 82.532848 \nL 489.447083 82.391388 \nL 489.5149 82.391388 \nL 489.989621 82.391388 \nL 489.989621 82.249928 \nL 490.057438 82.249928 \nL 490.26089 82.249928 \nL 490.26089 82.108469 \nL 490.328707 82.108469 \nL 491.617234 82.108469 \nL 491.617234 81.967009 \nL 491.685051 81.967009 \nL 492.091954 81.967009 \nL 492.091954 81.82555 \nL 492.159772 81.82555 \nL 492.295406 81.82555 \nL 492.295406 81.68409 \nL 492.363223 81.68409 \nL 492.905761 81.68409 \nL 492.905761 81.54263 \nL 492.973578 81.54263 \nL 493.109212 81.54263 \nL 493.17703 81.259711 \nL 493.990836 81.259711 \nL 493.990836 80.976792 \nL 494.058653 80.976792 \nL 494.87246 80.976792 \nL 494.87246 80.835332 \nL 494.940277 80.835332 \nL 495.889718 80.835332 \nL 495.889718 80.693873 \nL 495.957535 80.693873 \nL 496.635707 80.693873 \nL 496.635707 80.552413 \nL 496.703525 80.552413 \nL 497.246062 80.552413 \nL 497.246062 80.410953 \nL 497.313879 80.410953 \nL 498.26332 80.410953 \nL 498.26332 80.269494 \nL 498.331138 80.269494 \nL 499.077127 80.269494 \nL 499.077127 80.128034 \nL 499.144944 80.128034 \nL 499.280579 80.128034 \nL 499.280579 79.986574 \nL 499.348396 79.986574 \nL 499.890933 79.986574 \nL 499.890933 79.845115 \nL 499.958751 79.845115 \nL 500.094385 79.845115 \nL 500.094385 79.703655 \nL 500.162202 79.703655 \nL 500.297837 79.703655 \nL 500.297837 79.562196 \nL 500.365654 79.562196 \nL 500.70474 79.562196 \nL 500.70474 79.420736 \nL 500.772557 79.420736 \nL 500.908192 79.420736 \nL 500.908192 79.279276 \nL 500.976009 79.279276 \nL 501.043826 79.279276 \nL 501.043826 79.137817 \nL 501.111643 79.137817 \nL 501.721998 79.137817 \nL 501.721998 78.996357 \nL 501.789815 78.996357 \nL 502.874891 78.996357 \nL 502.874891 78.571978 \nL 502.942708 78.571978 \nL 503.417428 78.571978 \nL 503.417428 78.430519 \nL 503.485246 78.430519 \nL 503.756514 78.430519 \nL 503.756514 78.289059 \nL 503.824332 78.289059 \nL 504.434686 78.289059 \nL 504.434686 78.147599 \nL 504.502504 78.147599 \nL 505.519762 78.147599 \nL 505.519762 78.00614 \nL 505.587579 78.00614 \nL 506.943923 78.00614 \nL 506.943923 77.86468 \nL 507.01174 77.86468 \nL 507.215192 77.86468 \nL 507.215192 77.72322 \nL 507.283009 77.72322 \nL 507.418644 77.72322 \nL 507.418644 77.440301 \nL 507.486461 77.440301 \nL 507.961181 77.440301 \nL 507.961181 77.298842 \nL 508.028999 77.298842 \nL 508.300267 77.298842 \nL 508.300267 77.157382 \nL 508.368085 77.157382 \nL 508.503719 77.157382 \nL 508.503719 77.015922 \nL 508.571536 77.015922 \nL 511.555493 77.015922 \nL 511.555493 76.874463 \nL 511.623311 76.874463 \nL 512.301483 76.874463 \nL 512.301483 76.733003 \nL 512.3693 76.733003 \nL 515.353257 76.733003 \nL 515.353257 76.591544 \nL 515.421074 76.591544 \nL 516.777419 76.591544 \nL 516.777419 76.450084 \nL 516.845236 76.450084 \nL 516.913053 76.450084 \nL 516.913053 76.308624 \nL 516.98087 76.308624 \nL 517.930311 76.308624 \nL 517.930311 76.167165 \nL 517.998128 76.167165 \nL 519.015386 76.167165 \nL 519.083204 75.884245 \nL 519.761376 75.884245 \nL 519.761376 75.742786 \nL 519.829193 75.742786 \nL 520.303913 75.742786 \nL 520.303913 75.601326 \nL 520.371731 75.601326 \nL 520.507365 75.601326 \nL 520.507365 75.459867 \nL 520.575182 75.459867 \nL 520.643 75.459867 \nL 520.643 75.318407 \nL 520.710817 75.318407 \nL 521.049903 75.318407 \nL 521.049903 75.176947 \nL 521.11772 75.176947 \nL 521.388989 75.176947 \nL 521.388989 74.894028 \nL 521.456806 74.894028 \nL 522.134978 74.894028 \nL 522.134978 74.752568 \nL 522.202795 74.752568 \nL 522.677516 74.752568 \nL 522.677516 74.611109 \nL 522.745333 74.611109 \nL 523.016602 74.611109 \nL 523.016602 74.469649 \nL 523.084419 74.469649 \nL 524.712032 74.469649 \nL 524.712032 74.32819 \nL 524.779849 74.32819 \nL 525.051118 74.32819 \nL 525.051118 74.18673 \nL 525.118935 74.18673 \nL 526.610914 74.18673 \nL 526.610914 74.04527 \nL 526.678731 74.04527 \nL 527.153452 74.04527 \nL 527.153452 73.903811 \nL 527.221269 73.903811 \nL 528.238527 73.903811 \nL 528.238527 73.762351 \nL 528.306344 73.762351 \nL 529.323602 73.762351 \nL 529.323602 73.620891 \nL 529.39142 73.620891 \nL 530.001774 73.620891 \nL 530.001774 73.479432 \nL 530.069592 73.479432 \nL 530.205226 73.479432 \nL 530.205226 73.337972 \nL 530.273043 73.337972 \nL 530.408678 73.337972 \nL 530.408678 73.196513 \nL 530.476495 73.196513 \nL 531.765022 73.196513 \nL 531.765022 72.913593 \nL 531.832839 72.913593 \nL 532.104108 72.913593 \nL 532.104108 72.772134 \nL 532.171925 72.772134 \nL 532.375377 72.772134 \nL 532.375377 72.630674 \nL 532.443194 72.630674 \nL 533.392635 72.630674 \nL 533.392635 72.489215 \nL 533.460452 72.489215 \nL 533.596087 72.489215 \nL 533.596087 72.347755 \nL 533.663904 72.347755 \nL 533.867355 72.347755 \nL 533.867355 72.206295 \nL 533.935173 72.206295 \nL 535.901872 72.206295 \nL 535.901872 72.064836 \nL 535.969689 72.064836 \nL 536.444409 72.064836 \nL 536.444409 71.923376 \nL 536.512227 71.923376 \nL 537.258216 71.923376 \nL 537.258216 71.640457 \nL 537.326033 71.640457 \nL 541.05598 71.640457 \nL 541.05598 71.498997 \nL 541.123797 71.498997 \nL 541.598517 71.498997 \nL 541.598517 71.357538 \nL 541.666334 71.357538 \nL 543.700851 71.357538 \nL 543.700851 71.216078 \nL 543.768668 71.216078 \nL 543.836485 71.216078 \nL 543.836485 71.074618 \nL 543.904302 71.074618 \nL 545.057195 71.074618 \nL 545.057195 70.933159 \nL 545.125012 70.933159 \nL 545.735367 70.933159 \nL 545.735367 70.791699 \nL 545.803184 70.791699 \nL 546.549174 70.791699 \nL 546.549174 70.650239 \nL 546.616991 70.650239 \nL 546.752625 70.650239 \nL 546.820442 70.36732 \nL 547.837701 70.36732 \nL 547.837701 70.225861 \nL 547.905518 70.225861 \nL 550.414754 70.225861 \nL 550.482572 69.942941 \nL 551.49983 69.942941 \nL 551.49983 69.801482 \nL 551.567647 69.801482 \nL 552.584905 69.801482 \nL 552.584905 69.660022 \nL 552.652722 69.660022 \nL 553.263077 69.660022 \nL 553.263077 69.518562 \nL 553.330895 69.518562 \nL 554.076884 69.518562 \nL 554.076884 69.377103 \nL 554.144701 69.377103 \nL 554.212518 69.377103 \nL 554.212518 69.235643 \nL 554.280335 69.235643 \nL 554.755056 69.235643 \nL 554.755056 69.094184 \nL 554.822873 69.094184 \nL 556.179217 69.094184 \nL 556.179217 68.669805 \nL 556.247035 68.669805 \nL 556.586121 68.669805 \nL 556.586121 68.528345 \nL 556.653938 68.528345 \nL 559.502261 68.528345 \nL 559.502261 68.386886 \nL 559.570078 68.386886 \nL 559.841347 68.386886 \nL 559.841347 68.245426 \nL 559.909164 68.245426 \nL 560.044798 68.245426 \nL 560.044798 68.103966 \nL 560.112615 68.103966 \nL 560.858605 68.103966 \nL 560.858605 67.962507 \nL 560.926422 67.962507 \nL 563.232207 67.962507 \nL 563.232207 67.821047 \nL 563.300024 67.821047 \nL 563.367842 67.821047 \nL 563.367842 67.679587 \nL 563.435659 67.679587 \nL 565.063272 67.679587 \nL 565.131089 67.396668 \nL 565.334541 67.396668 \nL 565.334541 67.255209 \nL 565.402358 67.255209 \nL 566.012713 67.255209 \nL 566.012713 67.113749 \nL 566.08053 67.113749 \nL 566.962154 67.113749 \nL 566.962154 66.972289 \nL 567.029971 66.972289 \nL 568.047229 66.972289 \nL 568.047229 66.83083 \nL 568.115046 66.83083 \nL 568.521949 66.83083 \nL 568.521949 66.68937 \nL 568.589767 66.68937 \nL 568.657584 66.68937 \nL 568.657584 66.54791 \nL 568.725401 66.54791 \nL 574.896767 66.54791 \nL 574.964584 66.264991 \nL 575.371488 66.264991 \nL 575.371488 65.840612 \nL 575.439305 65.840612 \nL 576.456563 65.840612 \nL 576.52438 65.557693 \nL 579.033617 65.557693 \nL 579.033617 65.416233 \nL 579.101434 65.416233 \nL 586.222241 65.416233 \nL 586.222241 65.274774 \nL 586.290058 65.274774 \nL 587.307316 65.274774 \nL 587.307316 65.133314 \nL 587.375134 65.133314 \nL 589.341833 65.133314 \nL 589.341833 64.991855 \nL 589.40965 64.991855 \nL 591.579801 64.991855 \nL 591.579801 64.850395 \nL 591.647618 64.850395 \nL 593.275231 64.850395 \nL 593.275231 64.708935 \nL 593.343048 64.708935 \nL 593.478683 64.708935 \nL 593.478683 64.567476 \nL 593.5465 64.567476 \nL 595.445382 64.567476 \nL 595.445382 64.426016 \nL 595.513199 64.426016 \nL 597.954618 64.426016 \nL 597.954618 64.143097 \nL 598.022436 64.143097 \nL 598.564973 64.143097 \nL 598.564973 64.001637 \nL 598.63279 64.001637 \nL 598.700608 64.001637 \nL 598.700608 63.860178 \nL 598.768425 63.860178 \nL 601.684565 63.860178 \nL 601.684565 63.718718 \nL 601.752382 63.718718 \nL 602.091468 63.718718 \nL 602.091468 63.577258 \nL 602.159285 63.577258 \nL 603.719081 63.577258 \nL 603.719081 63.435799 \nL 603.786898 63.435799 \nL 604.532888 63.435799 \nL 604.600705 63.01142 \nL 607.516845 63.01142 \nL 607.516845 62.86996 \nL 607.584662 62.86996 \nL 609.008824 62.86996 \nL 609.008824 62.728501 \nL 609.076641 62.728501 \nL 609.212275 62.728501 \nL 609.212275 62.587041 \nL 609.280092 62.587041 \nL 609.619178 62.587041 \nL 609.619178 62.445581 \nL 609.686996 62.445581 \nL 610.636437 62.445581 \nL 610.636437 62.304122 \nL 610.704254 62.304122 \nL 611.04334 62.304122 \nL 611.04334 62.162662 \nL 611.111157 62.162662 \nL 614.705469 62.162662 \nL 614.705469 62.021203 \nL 614.773286 62.021203 \nL 616.197448 62.021203 \nL 616.265265 61.596824 \nL 618.435416 61.596824 \nL 618.435416 61.455364 \nL 618.503233 61.455364 \nL 620.130846 61.455364 \nL 620.130846 61.313904 \nL 620.198663 61.313904 \nL 621.01247 61.313904 \nL 621.01247 61.172445 \nL 621.080287 61.172445 \nL 623.318255 61.172445 \nL 623.318255 61.030985 \nL 623.386072 61.030985 \nL 623.792975 61.030985 \nL 623.792975 60.889526 \nL 623.860792 60.889526 \nL 633.558653 60.889526 \nL 633.558653 60.748066 \nL 633.626471 60.748066 \nL 635.525352 60.748066 \nL 635.525352 60.606606 \nL 635.59317 60.606606 \nL 636.203525 60.606606 \nL 636.203525 60.465147 \nL 636.271342 60.465147 \nL 638.577127 60.465147 \nL 638.577127 60.323687 \nL 638.644944 60.323687 \nL 639.865654 60.323687 \nL 639.865654 60.182227 \nL 639.933471 60.182227 \nL 640.001288 60.182227 \nL 640.001288 60.040768 \nL 640.069105 60.040768 \nL 641.764536 60.040768 \nL 641.764536 59.899308 \nL 641.832353 59.899308 \nL 642.035805 59.899308 \nL 642.035805 59.757849 \nL 642.103622 59.757849 \nL 642.171439 59.757849 \nL 642.171439 59.616389 \nL 642.239256 59.616389 \nL 644.002504 59.616389 \nL 644.002504 59.474929 \nL 644.070321 59.474929 \nL 644.34159 59.474929 \nL 644.34159 59.33347 \nL 644.409407 59.33347 \nL 647.935902 59.33347 \nL 647.935902 59.19201 \nL 648.003719 59.19201 \nL 651.055493 59.19201 \nL 651.055493 59.050551 \nL 651.123311 59.050551 \nL 653.496913 59.050551 \nL 653.496913 58.909091 \nL 653.56473 58.909091 \nL 653.768182 58.909091 \nL 653.768182 58.909091 \n\" style\u003d\"fill:none;stroke:#8cbfd0;stroke-linecap:square;stroke-width:3.0;\"/\u003e\n   \u003c/g\u003e\n   \u003cg id\u003d\"line2d_2\"\u003e\n    \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 121.131818 373.090909 \nL 653.768182 58.909091 \n\" style\u003d\"fill:none;stroke:#d6ebf2;stroke-dasharray:6.000000,6.000000;stroke-dashoffset:0.0;stroke-width:2.0;\"/\u003e\n   \u003c/g\u003e\n   \u003cg id\u003d\"matplotlib.axis_1\"\u003e\n    \u003cg id\u003d\"xtick_1\"\u003e\n     \u003cg id\u003d\"line2d_3\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 121.131818 388.8 \nL 121.131818 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_1\"\u003e\n      \u003c!-- 0.0 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 31.78125 66.40625 \nQ 24.171875 66.40625 20.328125 58.90625 \nQ 16.5 51.421875 16.5 36.375 \nQ 16.5 21.390625 20.328125 13.890625 \nQ 24.171875 6.390625 31.78125 6.390625 \nQ 39.453125 6.390625 43.28125 13.890625 \nQ 47.125 21.390625 47.125 36.375 \nQ 47.125 51.421875 43.28125 58.90625 \nQ 39.453125 66.40625 31.78125 66.40625 \nM 31.78125 74.21875 \nQ 44.046875 74.21875 50.515625 64.515625 \nQ 56.984375 54.828125 56.984375 36.375 \nQ 56.984375 17.96875 50.515625 8.265625 \nQ 44.046875 -1.421875 31.78125 -1.421875 \nQ 19.53125 -1.421875 13.0625 8.265625 \nQ 6.59375 17.96875 6.59375 36.375 \nQ 6.59375 54.828125 13.0625 64.515625 \nQ 19.53125 74.21875 31.78125 74.21875 \n\" id\u003d\"BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cpath d\u003d\"M 10.6875 12.40625 \nL 21 12.40625 \nL 21 0 \nL 10.6875 0 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-2e\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(113.180255682 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_2\"\u003e\n     \u003cg id\u003d\"line2d_4\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 174.395455 388.8 \nL 174.395455 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_2\"\u003e\n      \u003c!-- 0.1 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 12.40625 8.296875 \nL 28.515625 8.296875 \nL 28.515625 63.921875 \nL 10.984375 60.40625 \nL 10.984375 69.390625 \nL 28.421875 72.90625 \nL 38.28125 72.90625 \nL 38.28125 8.296875 \nL 54.390625 8.296875 \nL 54.390625 0 \nL 12.40625 0 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-31\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(166.443892045 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-31\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_3\"\u003e\n     \u003cg id\u003d\"line2d_5\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 227.659091 388.8 \nL 227.659091 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_3\"\u003e\n      \u003c!-- 0.2 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 19.1875 8.296875 \nL 53.609375 8.296875 \nL 53.609375 0 \nL 7.328125 0 \nL 7.328125 8.296875 \nQ 12.9375 14.109375 22.625 23.890625 \nQ 32.328125 33.6875 34.8125 36.53125 \nQ 39.546875 41.84375 41.421875 45.53125 \nQ 43.3125 49.21875 43.3125 52.78125 \nQ 43.3125 58.59375 39.234375 62.25 \nQ 35.15625 65.921875 28.609375 65.921875 \nQ 23.96875 65.921875 18.8125 64.3125 \nQ 13.671875 62.703125 7.8125 59.421875 \nL 7.8125 69.390625 \nQ 13.765625 71.78125 18.9375 73 \nQ 24.125 74.21875 28.421875 74.21875 \nQ 39.75 74.21875 46.484375 68.546875 \nQ 53.21875 62.890625 53.21875 53.421875 \nQ 53.21875 48.921875 51.53125 44.890625 \nQ 49.859375 40.875 45.40625 35.40625 \nQ 44.1875 33.984375 37.640625 27.21875 \nQ 31.109375 20.453125 19.1875 8.296875 \n\" id\u003d\"BitstreamVeraSans-Roman-32\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(219.707528409 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-32\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_4\"\u003e\n     \u003cg id\u003d\"line2d_6\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 280.922727 388.8 \nL 280.922727 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_4\"\u003e\n      \u003c!-- 0.3 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 40.578125 39.3125 \nQ 47.65625 37.796875 51.625 33 \nQ 55.609375 28.21875 55.609375 21.1875 \nQ 55.609375 10.40625 48.1875 4.484375 \nQ 40.765625 -1.421875 27.09375 -1.421875 \nQ 22.515625 -1.421875 17.65625 -0.515625 \nQ 12.796875 0.390625 7.625 2.203125 \nL 7.625 11.71875 \nQ 11.71875 9.328125 16.59375 8.109375 \nQ 21.484375 6.890625 26.8125 6.890625 \nQ 36.078125 6.890625 40.9375 10.546875 \nQ 45.796875 14.203125 45.796875 21.1875 \nQ 45.796875 27.640625 41.28125 31.265625 \nQ 36.765625 34.90625 28.71875 34.90625 \nL 20.21875 34.90625 \nL 20.21875 43.015625 \nL 29.109375 43.015625 \nQ 36.375 43.015625 40.234375 45.921875 \nQ 44.09375 48.828125 44.09375 54.296875 \nQ 44.09375 59.90625 40.109375 62.90625 \nQ 36.140625 65.921875 28.71875 65.921875 \nQ 24.65625 65.921875 20.015625 65.03125 \nQ 15.375 64.15625 9.8125 62.3125 \nL 9.8125 71.09375 \nQ 15.4375 72.65625 20.34375 73.4375 \nQ 25.25 74.21875 29.59375 74.21875 \nQ 40.828125 74.21875 47.359375 69.109375 \nQ 53.90625 64.015625 53.90625 55.328125 \nQ 53.90625 49.265625 50.4375 45.09375 \nQ 46.96875 40.921875 40.578125 39.3125 \n\" id\u003d\"BitstreamVeraSans-Roman-33\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(272.971164773 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-33\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_5\"\u003e\n     \u003cg id\u003d\"line2d_7\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 334.186364 388.8 \nL 334.186364 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_5\"\u003e\n      \u003c!-- 0.4 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 37.796875 64.3125 \nL 12.890625 25.390625 \nL 37.796875 25.390625 \nz\nM 35.203125 72.90625 \nL 47.609375 72.90625 \nL 47.609375 25.390625 \nL 58.015625 25.390625 \nL 58.015625 17.1875 \nL 47.609375 17.1875 \nL 47.609375 0 \nL 37.796875 0 \nL 37.796875 17.1875 \nL 4.890625 17.1875 \nL 4.890625 26.703125 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-34\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(326.234801136 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-34\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_6\"\u003e\n     \u003cg id\u003d\"line2d_8\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 387.45 388.8 \nL 387.45 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_6\"\u003e\n      \u003c!-- 0.5 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 10.796875 72.90625 \nL 49.515625 72.90625 \nL 49.515625 64.59375 \nL 19.828125 64.59375 \nL 19.828125 46.734375 \nQ 21.96875 47.46875 24.109375 47.828125 \nQ 26.265625 48.1875 28.421875 48.1875 \nQ 40.625 48.1875 47.75 41.5 \nQ 54.890625 34.8125 54.890625 23.390625 \nQ 54.890625 11.625 47.5625 5.09375 \nQ 40.234375 -1.421875 26.90625 -1.421875 \nQ 22.3125 -1.421875 17.546875 -0.640625 \nQ 12.796875 0.140625 7.71875 1.703125 \nL 7.71875 11.625 \nQ 12.109375 9.234375 16.796875 8.0625 \nQ 21.484375 6.890625 26.703125 6.890625 \nQ 35.15625 6.890625 40.078125 11.328125 \nQ 45.015625 15.765625 45.015625 23.390625 \nQ 45.015625 31 40.078125 35.4375 \nQ 35.15625 39.890625 26.703125 39.890625 \nQ 22.75 39.890625 18.8125 39.015625 \nQ 14.890625 38.140625 10.796875 36.28125 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-35\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(379.4984375 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-35\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_7\"\u003e\n     \u003cg id\u003d\"line2d_9\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 440.713636 388.8 \nL 440.713636 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_7\"\u003e\n      \u003c!-- 0.6 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 33.015625 40.375 \nQ 26.375 40.375 22.484375 35.828125 \nQ 18.609375 31.296875 18.609375 23.390625 \nQ 18.609375 15.53125 22.484375 10.953125 \nQ 26.375 6.390625 33.015625 6.390625 \nQ 39.65625 6.390625 43.53125 10.953125 \nQ 47.40625 15.53125 47.40625 23.390625 \nQ 47.40625 31.296875 43.53125 35.828125 \nQ 39.65625 40.375 33.015625 40.375 \nM 52.59375 71.296875 \nL 52.59375 62.3125 \nQ 48.875 64.0625 45.09375 64.984375 \nQ 41.3125 65.921875 37.59375 65.921875 \nQ 27.828125 65.921875 22.671875 59.328125 \nQ 17.53125 52.734375 16.796875 39.40625 \nQ 19.671875 43.65625 24.015625 45.921875 \nQ 28.375 48.1875 33.59375 48.1875 \nQ 44.578125 48.1875 50.953125 41.515625 \nQ 57.328125 34.859375 57.328125 23.390625 \nQ 57.328125 12.15625 50.6875 5.359375 \nQ 44.046875 -1.421875 33.015625 -1.421875 \nQ 20.359375 -1.421875 13.671875 8.265625 \nQ 6.984375 17.96875 6.984375 36.375 \nQ 6.984375 53.65625 15.1875 63.9375 \nQ 23.390625 74.21875 37.203125 74.21875 \nQ 40.921875 74.21875 44.703125 73.484375 \nQ 48.484375 72.75 52.59375 71.296875 \n\" id\u003d\"BitstreamVeraSans-Roman-36\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(432.762073864 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-36\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_8\"\u003e\n     \u003cg id\u003d\"line2d_10\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 493.977273 388.8 \nL 493.977273 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_8\"\u003e\n      \u003c!-- 0.7 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 8.203125 72.90625 \nL 55.078125 72.90625 \nL 55.078125 68.703125 \nL 28.609375 0 \nL 18.3125 0 \nL 43.21875 64.59375 \nL 8.203125 64.59375 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-37\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(486.025710227 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-37\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_9\"\u003e\n     \u003cg id\u003d\"line2d_11\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 547.240909 388.8 \nL 547.240909 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_9\"\u003e\n      \u003c!-- 0.8 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 31.78125 34.625 \nQ 24.75 34.625 20.71875 30.859375 \nQ 16.703125 27.09375 16.703125 20.515625 \nQ 16.703125 13.921875 20.71875 10.15625 \nQ 24.75 6.390625 31.78125 6.390625 \nQ 38.8125 6.390625 42.859375 10.171875 \nQ 46.921875 13.96875 46.921875 20.515625 \nQ 46.921875 27.09375 42.890625 30.859375 \nQ 38.875 34.625 31.78125 34.625 \nM 21.921875 38.8125 \nQ 15.578125 40.375 12.03125 44.71875 \nQ 8.5 49.078125 8.5 55.328125 \nQ 8.5 64.0625 14.71875 69.140625 \nQ 20.953125 74.21875 31.78125 74.21875 \nQ 42.671875 74.21875 48.875 69.140625 \nQ 55.078125 64.0625 55.078125 55.328125 \nQ 55.078125 49.078125 51.53125 44.71875 \nQ 48 40.375 41.703125 38.8125 \nQ 48.828125 37.15625 52.796875 32.3125 \nQ 56.78125 27.484375 56.78125 20.515625 \nQ 56.78125 9.90625 50.3125 4.234375 \nQ 43.84375 -1.421875 31.78125 -1.421875 \nQ 19.734375 -1.421875 13.25 4.234375 \nQ 6.78125 9.90625 6.78125 20.515625 \nQ 6.78125 27.484375 10.78125 32.3125 \nQ 14.796875 37.15625 21.921875 38.8125 \nM 18.3125 54.390625 \nQ 18.3125 48.734375 21.84375 45.5625 \nQ 25.390625 42.390625 31.78125 42.390625 \nQ 38.140625 42.390625 41.71875 45.5625 \nQ 45.3125 48.734375 45.3125 54.390625 \nQ 45.3125 60.0625 41.71875 63.234375 \nQ 38.140625 66.40625 31.78125 66.40625 \nQ 25.390625 66.40625 21.84375 63.234375 \nQ 18.3125 60.0625 18.3125 54.390625 \n\" id\u003d\"BitstreamVeraSans-Roman-38\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(539.289346591 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-38\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_10\"\u003e\n     \u003cg id\u003d\"line2d_12\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 600.504545 388.8 \nL 600.504545 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_10\"\u003e\n      \u003c!-- 0.9 --\u003e\n      \u003cdefs\u003e\n       \u003cpath d\u003d\"M 10.984375 1.515625 \nL 10.984375 10.5 \nQ 14.703125 8.734375 18.5 7.8125 \nQ 22.3125 6.890625 25.984375 6.890625 \nQ 35.75 6.890625 40.890625 13.453125 \nQ 46.046875 20.015625 46.78125 33.40625 \nQ 43.953125 29.203125 39.59375 26.953125 \nQ 35.25 24.703125 29.984375 24.703125 \nQ 19.046875 24.703125 12.671875 31.3125 \nQ 6.296875 37.9375 6.296875 49.421875 \nQ 6.296875 60.640625 12.9375 67.421875 \nQ 19.578125 74.21875 30.609375 74.21875 \nQ 43.265625 74.21875 49.921875 64.515625 \nQ 56.59375 54.828125 56.59375 36.375 \nQ 56.59375 19.140625 48.40625 8.859375 \nQ 40.234375 -1.421875 26.421875 -1.421875 \nQ 22.703125 -1.421875 18.890625 -0.6875 \nQ 15.09375 0.046875 10.984375 1.515625 \nM 30.609375 32.421875 \nQ 37.25 32.421875 41.125 36.953125 \nQ 45.015625 41.5 45.015625 49.421875 \nQ 45.015625 57.28125 41.125 61.84375 \nQ 37.25 66.40625 30.609375 66.40625 \nQ 23.96875 66.40625 20.09375 61.84375 \nQ 16.21875 57.28125 16.21875 49.421875 \nQ 16.21875 41.5 20.09375 36.953125 \nQ 23.96875 32.421875 30.609375 32.421875 \n\" id\u003d\"BitstreamVeraSans-Roman-39\"/\u003e\n      \u003c/defs\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(592.552982955 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-39\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"xtick_11\"\u003e\n     \u003cg id\u003d\"line2d_13\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 653.768182 388.8 \nL 653.768182 43.2 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_11\"\u003e\n      \u003c!-- 1.0 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(645.816619318 400.3984375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-31\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"text_12\"\u003e\n     \u003c!-- False Positive Rate (1 - Specificity) --\u003e\n     \u003cdefs\u003e\n      \u003cpath id\u003d\"BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cpath d\u003d\"M 18.109375 8.203125 \nL 18.109375 -20.796875 \nL 9.078125 -20.796875 \nL 9.078125 54.6875 \nL 18.109375 54.6875 \nL 18.109375 46.390625 \nQ 20.953125 51.265625 25.265625 53.625 \nQ 29.59375 56 35.59375 56 \nQ 45.5625 56 51.78125 48.09375 \nQ 58.015625 40.1875 58.015625 27.296875 \nQ 58.015625 14.40625 51.78125 6.484375 \nQ 45.5625 -1.421875 35.59375 -1.421875 \nQ 29.59375 -1.421875 25.265625 0.953125 \nQ 20.953125 3.328125 18.109375 8.203125 \nM 48.6875 27.296875 \nQ 48.6875 37.203125 44.609375 42.84375 \nQ 40.53125 48.484375 33.40625 48.484375 \nQ 26.265625 48.484375 22.1875 42.84375 \nQ 18.109375 37.203125 18.109375 27.296875 \nQ 18.109375 17.390625 22.1875 11.75 \nQ 26.265625 6.109375 33.40625 6.109375 \nQ 40.53125 6.109375 44.609375 11.75 \nQ 48.6875 17.390625 48.6875 27.296875 \n\" id\u003d\"BitstreamVeraSans-Roman-70\"/\u003e\n      \u003cpath d\u003d\"M 8.015625 75.875 \nL 15.828125 75.875 \nQ 23.140625 64.359375 26.78125 53.3125 \nQ 30.421875 42.28125 30.421875 31.390625 \nQ 30.421875 20.453125 26.78125 9.375 \nQ 23.140625 -1.703125 15.828125 -13.1875 \nL 8.015625 -13.1875 \nQ 14.5 -2 17.703125 9.0625 \nQ 20.90625 20.125 20.90625 31.390625 \nQ 20.90625 42.671875 17.703125 53.65625 \nQ 14.5 64.65625 8.015625 75.875 \n\" id\u003d\"BitstreamVeraSans-Roman-29\"/\u003e\n      \u003cpath d\u003d\"M 31 75.875 \nQ 24.46875 64.65625 21.28125 53.65625 \nQ 18.109375 42.671875 18.109375 31.390625 \nQ 18.109375 20.125 21.3125 9.0625 \nQ 24.515625 -2 31 -13.1875 \nL 23.1875 -13.1875 \nQ 15.875 -1.703125 12.234375 9.375 \nQ 8.59375 20.453125 8.59375 31.390625 \nQ 8.59375 42.28125 12.203125 53.3125 \nQ 15.828125 64.359375 23.1875 75.875 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-28\"/\u003e\n      \u003cpath d\u003d\"M 30.609375 48.390625 \nQ 23.390625 48.390625 19.1875 42.75 \nQ 14.984375 37.109375 14.984375 27.296875 \nQ 14.984375 17.484375 19.15625 11.84375 \nQ 23.34375 6.203125 30.609375 6.203125 \nQ 37.796875 6.203125 41.984375 11.859375 \nQ 46.1875 17.53125 46.1875 27.296875 \nQ 46.1875 37.015625 41.984375 42.703125 \nQ 37.796875 48.390625 30.609375 48.390625 \nM 30.609375 56 \nQ 42.328125 56 49.015625 48.375 \nQ 55.71875 40.765625 55.71875 27.296875 \nQ 55.71875 13.875 49.015625 6.21875 \nQ 42.328125 -1.421875 30.609375 -1.421875 \nQ 18.84375 -1.421875 12.171875 6.21875 \nQ 5.515625 13.875 5.515625 27.296875 \nQ 5.515625 40.765625 12.171875 48.375 \nQ 18.84375 56 30.609375 56 \n\" id\u003d\"BitstreamVeraSans-Roman-6f\"/\u003e\n      \u003cpath d\u003d\"M 9.421875 75.984375 \nL 18.40625 75.984375 \nL 18.40625 0 \nL 9.421875 0 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-6c\"/\u003e\n      \u003cpath d\u003d\"M 19.671875 64.796875 \nL 19.671875 37.40625 \nL 32.078125 37.40625 \nQ 38.96875 37.40625 42.71875 40.96875 \nQ 46.484375 44.53125 46.484375 51.125 \nQ 46.484375 57.671875 42.71875 61.234375 \nQ 38.96875 64.796875 32.078125 64.796875 \nz\nM 9.8125 72.90625 \nL 32.078125 72.90625 \nQ 44.34375 72.90625 50.609375 67.359375 \nQ 56.890625 61.8125 56.890625 51.125 \nQ 56.890625 40.328125 50.609375 34.8125 \nQ 44.34375 29.296875 32.078125 29.296875 \nL 19.671875 29.296875 \nL 19.671875 0 \nL 9.8125 0 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-50\"/\u003e\n      \u003cpath d\u003d\"M 9.8125 72.90625 \nL 51.703125 72.90625 \nL 51.703125 64.59375 \nL 19.671875 64.59375 \nL 19.671875 43.109375 \nL 48.578125 43.109375 \nL 48.578125 34.8125 \nL 19.671875 34.8125 \nL 19.671875 0 \nL 9.8125 0 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-46\"/\u003e\n      \u003cpath d\u003d\"M 44.390625 34.1875 \nQ 47.5625 33.109375 50.5625 29.59375 \nQ 53.5625 26.078125 56.59375 19.921875 \nL 66.609375 0 \nL 56 0 \nL 46.6875 18.703125 \nQ 43.0625 26.03125 39.671875 28.421875 \nQ 36.28125 30.8125 30.421875 30.8125 \nL 19.671875 30.8125 \nL 19.671875 0 \nL 9.8125 0 \nL 9.8125 72.90625 \nL 32.078125 72.90625 \nQ 44.578125 72.90625 50.734375 67.671875 \nQ 56.890625 62.453125 56.890625 51.90625 \nQ 56.890625 45.015625 53.6875 40.46875 \nQ 50.484375 35.9375 44.390625 34.1875 \nM 19.671875 64.796875 \nL 19.671875 38.921875 \nL 32.078125 38.921875 \nQ 39.203125 38.921875 42.84375 42.21875 \nQ 46.484375 45.515625 46.484375 51.90625 \nQ 46.484375 58.296875 42.84375 61.546875 \nQ 39.203125 64.796875 32.078125 64.796875 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-52\"/\u003e\n      \u003cpath d\u003d\"M 53.515625 70.515625 \nL 53.515625 60.890625 \nQ 47.90625 63.578125 42.921875 64.890625 \nQ 37.9375 66.21875 33.296875 66.21875 \nQ 25.25 66.21875 20.875 63.09375 \nQ 16.5 59.96875 16.5 54.203125 \nQ 16.5 49.359375 19.40625 46.890625 \nQ 22.3125 44.4375 30.421875 42.921875 \nL 36.375 41.703125 \nQ 47.40625 39.59375 52.65625 34.296875 \nQ 57.90625 29 57.90625 20.125 \nQ 57.90625 9.515625 50.796875 4.046875 \nQ 43.703125 -1.421875 29.984375 -1.421875 \nQ 24.8125 -1.421875 18.96875 -0.25 \nQ 13.140625 0.921875 6.890625 3.21875 \nL 6.890625 13.375 \nQ 12.890625 10.015625 18.65625 8.296875 \nQ 24.421875 6.59375 29.984375 6.59375 \nQ 38.421875 6.59375 43.015625 9.90625 \nQ 47.609375 13.234375 47.609375 19.390625 \nQ 47.609375 24.75 44.3125 27.78125 \nQ 41.015625 30.8125 33.5 32.328125 \nL 27.484375 33.5 \nQ 16.453125 35.6875 11.515625 40.375 \nQ 6.59375 45.0625 6.59375 53.421875 \nQ 6.59375 63.09375 13.40625 68.65625 \nQ 20.21875 74.21875 32.171875 74.21875 \nQ 37.3125 74.21875 42.625 73.28125 \nQ 47.953125 72.359375 53.515625 70.515625 \n\" id\u003d\"BitstreamVeraSans-Roman-53\"/\u003e\n      \u003cpath d\u003d\"M 9.421875 54.6875 \nL 18.40625 54.6875 \nL 18.40625 0 \nL 9.421875 0 \nz\nM 9.421875 75.984375 \nL 18.40625 75.984375 \nL 18.40625 64.59375 \nL 9.421875 64.59375 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cpath d\u003d\"M 4.890625 31.390625 \nL 31.203125 31.390625 \nL 31.203125 23.390625 \nL 4.890625 23.390625 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-2d\"/\u003e\n      \u003cpath d\u003d\"M 48.78125 52.59375 \nL 48.78125 44.1875 \nQ 44.96875 46.296875 41.140625 47.34375 \nQ 37.3125 48.390625 33.40625 48.390625 \nQ 24.65625 48.390625 19.8125 42.84375 \nQ 14.984375 37.3125 14.984375 27.296875 \nQ 14.984375 17.28125 19.8125 11.734375 \nQ 24.65625 6.203125 33.40625 6.203125 \nQ 37.3125 6.203125 41.140625 7.25 \nQ 44.96875 8.296875 48.78125 10.40625 \nL 48.78125 2.09375 \nQ 45.015625 0.34375 40.984375 -0.53125 \nQ 36.96875 -1.421875 32.421875 -1.421875 \nQ 20.0625 -1.421875 12.78125 6.34375 \nQ 5.515625 14.109375 5.515625 27.296875 \nQ 5.515625 40.671875 12.859375 48.328125 \nQ 20.21875 56 33.015625 56 \nQ 37.15625 56 41.109375 55.140625 \nQ 45.0625 54.296875 48.78125 52.59375 \n\" id\u003d\"BitstreamVeraSans-Roman-63\"/\u003e\n      \u003cpath d\u003d\"M 32.171875 -5.078125 \nQ 28.375 -14.84375 24.75 -17.8125 \nQ 21.140625 -20.796875 15.09375 -20.796875 \nL 7.90625 -20.796875 \nL 7.90625 -13.28125 \nL 13.1875 -13.28125 \nQ 16.890625 -13.28125 18.9375 -11.515625 \nQ 21 -9.765625 23.484375 -3.21875 \nL 25.09375 0.875 \nL 2.984375 54.6875 \nL 12.5 54.6875 \nL 29.59375 11.921875 \nL 46.6875 54.6875 \nL 56.203125 54.6875 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-79\"/\u003e\n      \u003cpath d\u003d\"M 56.203125 29.59375 \nL 56.203125 25.203125 \nL 14.890625 25.203125 \nQ 15.484375 15.921875 20.484375 11.0625 \nQ 25.484375 6.203125 34.421875 6.203125 \nQ 39.59375 6.203125 44.453125 7.46875 \nQ 49.3125 8.734375 54.109375 11.28125 \nL 54.109375 2.78125 \nQ 49.265625 0.734375 44.1875 -0.34375 \nQ 39.109375 -1.421875 33.890625 -1.421875 \nQ 20.796875 -1.421875 13.15625 6.1875 \nQ 5.515625 13.8125 5.515625 26.8125 \nQ 5.515625 40.234375 12.765625 48.109375 \nQ 20.015625 56 32.328125 56 \nQ 43.359375 56 49.78125 48.890625 \nQ 56.203125 41.796875 56.203125 29.59375 \nM 47.21875 32.234375 \nQ 47.125 39.59375 43.09375 43.984375 \nQ 39.0625 48.390625 32.421875 48.390625 \nQ 24.90625 48.390625 20.390625 44.140625 \nQ 15.875 39.890625 15.1875 32.171875 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cpath d\u003d\"M 18.3125 70.21875 \nL 18.3125 54.6875 \nL 36.8125 54.6875 \nL 36.8125 47.703125 \nL 18.3125 47.703125 \nL 18.3125 18.015625 \nQ 18.3125 11.328125 20.140625 9.421875 \nQ 21.96875 7.515625 27.59375 7.515625 \nL 36.8125 7.515625 \nL 36.8125 0 \nL 27.59375 0 \nQ 17.1875 0 13.234375 3.875 \nQ 9.28125 7.765625 9.28125 18.015625 \nL 9.28125 47.703125 \nL 2.6875 47.703125 \nL 2.6875 54.6875 \nL 9.28125 54.6875 \nL 9.28125 70.21875 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-74\"/\u003e\n      \u003cpath d\u003d\"M 37.109375 75.984375 \nL 37.109375 68.5 \nL 28.515625 68.5 \nQ 23.6875 68.5 21.796875 66.546875 \nQ 19.921875 64.59375 19.921875 59.515625 \nL 19.921875 54.6875 \nL 34.71875 54.6875 \nL 34.71875 47.703125 \nL 19.921875 47.703125 \nL 19.921875 0 \nL 10.890625 0 \nL 10.890625 47.703125 \nL 2.296875 47.703125 \nL 2.296875 54.6875 \nL 10.890625 54.6875 \nL 10.890625 58.5 \nQ 10.890625 67.625 15.140625 71.796875 \nQ 19.390625 75.984375 28.609375 75.984375 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-66\"/\u003e\n      \u003cpath d\u003d\"M 34.28125 27.484375 \nQ 23.390625 27.484375 19.1875 25 \nQ 14.984375 22.515625 14.984375 16.5 \nQ 14.984375 11.71875 18.140625 8.90625 \nQ 21.296875 6.109375 26.703125 6.109375 \nQ 34.1875 6.109375 38.703125 11.40625 \nQ 43.21875 16.703125 43.21875 25.484375 \nL 43.21875 27.484375 \nz\nM 52.203125 31.203125 \nL 52.203125 0 \nL 43.21875 0 \nL 43.21875 8.296875 \nQ 40.140625 3.328125 35.546875 0.953125 \nQ 30.953125 -1.421875 24.3125 -1.421875 \nQ 15.921875 -1.421875 10.953125 3.296875 \nQ 6 8.015625 6 15.921875 \nQ 6 25.140625 12.171875 29.828125 \nQ 18.359375 34.515625 30.609375 34.515625 \nL 43.21875 34.515625 \nL 43.21875 35.40625 \nQ 43.21875 41.609375 39.140625 45 \nQ 35.0625 48.390625 27.6875 48.390625 \nQ 23 48.390625 18.546875 47.265625 \nQ 14.109375 46.140625 10.015625 43.890625 \nL 10.015625 52.203125 \nQ 14.9375 54.109375 19.578125 55.046875 \nQ 24.21875 56 28.609375 56 \nQ 40.484375 56 46.34375 49.84375 \nQ 52.203125 43.703125 52.203125 31.203125 \n\" id\u003d\"BitstreamVeraSans-Roman-61\"/\u003e\n      \u003cpath d\u003d\"M 44.28125 53.078125 \nL 44.28125 44.578125 \nQ 40.484375 46.53125 36.375 47.5 \nQ 32.28125 48.484375 27.875 48.484375 \nQ 21.1875 48.484375 17.84375 46.4375 \nQ 14.5 44.390625 14.5 40.28125 \nQ 14.5 37.15625 16.890625 35.375 \nQ 19.28125 33.59375 26.515625 31.984375 \nL 29.59375 31.296875 \nQ 39.15625 29.25 43.1875 25.515625 \nQ 47.21875 21.78125 47.21875 15.09375 \nQ 47.21875 7.46875 41.1875 3.015625 \nQ 35.15625 -1.421875 24.609375 -1.421875 \nQ 20.21875 -1.421875 15.453125 -0.5625 \nQ 10.6875 0.296875 5.421875 2 \nL 5.421875 11.28125 \nQ 10.40625 8.6875 15.234375 7.390625 \nQ 20.0625 6.109375 24.8125 6.109375 \nQ 31.15625 6.109375 34.5625 8.28125 \nQ 37.984375 10.453125 37.984375 14.40625 \nQ 37.984375 18.0625 35.515625 20.015625 \nQ 33.0625 21.96875 24.703125 23.78125 \nL 21.578125 24.515625 \nQ 13.234375 26.265625 9.515625 29.90625 \nQ 5.8125 33.546875 5.8125 39.890625 \nQ 5.8125 47.609375 11.28125 51.796875 \nQ 16.75 56 26.8125 56 \nQ 31.78125 56 36.171875 55.265625 \nQ 40.578125 54.546875 44.28125 53.078125 \n\" id\u003d\"BitstreamVeraSans-Roman-73\"/\u003e\n      \u003cpath d\u003d\"M 2.984375 54.6875 \nL 12.5 54.6875 \nL 29.59375 8.796875 \nL 46.6875 54.6875 \nL 56.203125 54.6875 \nL 35.6875 0 \nL 23.484375 0 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-76\"/\u003e\n     \u003c/defs\u003e\n     \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(283.494375 416.59625)scale(0.12 -0.12)\"\u003e\n      \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-46\"/\u003e\n      \u003cuse x\u003d\"57.37890625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-61\"/\u003e\n      \u003cuse x\u003d\"118.658203125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-6c\"/\u003e\n      \u003cuse x\u003d\"146.44140625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-73\"/\u003e\n      \u003cuse x\u003d\"198.541015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cuse x\u003d\"260.064453125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cuse x\u003d\"291.8515625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-50\"/\u003e\n      \u003cuse x\u003d\"352.107421875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-6f\"/\u003e\n      \u003cuse x\u003d\"413.2890625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-73\"/\u003e\n      \u003cuse x\u003d\"465.388671875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"493.171875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-74\"/\u003e\n      \u003cuse x\u003d\"532.380859375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"560.1640625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-76\"/\u003e\n      \u003cuse x\u003d\"619.34375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cuse x\u003d\"680.8671875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cuse x\u003d\"712.654296875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-52\"/\u003e\n      \u003cuse x\u003d\"782.10546875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-61\"/\u003e\n      \u003cuse x\u003d\"843.384765625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-74\"/\u003e\n      \u003cuse x\u003d\"882.59375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cuse x\u003d\"944.1171875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cuse x\u003d\"975.904296875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-28\"/\u003e\n      \u003cuse x\u003d\"1014.91796875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-31\"/\u003e\n      \u003cuse x\u003d\"1078.54101562\" xlink:href\u003d\"#BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cuse x\u003d\"1110.328125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2d\"/\u003e\n      \u003cuse x\u003d\"1146.41210938\" xlink:href\u003d\"#BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cuse x\u003d\"1178.19921875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-53\"/\u003e\n      \u003cuse x\u003d\"1241.67578125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-70\"/\u003e\n      \u003cuse x\u003d\"1305.15234375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cuse x\u003d\"1366.67578125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-63\"/\u003e\n      \u003cuse x\u003d\"1421.65625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"1449.43945312\" xlink:href\u003d\"#BitstreamVeraSans-Roman-66\"/\u003e\n      \u003cuse x\u003d\"1484.64453125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"1512.42773438\" xlink:href\u003d\"#BitstreamVeraSans-Roman-63\"/\u003e\n      \u003cuse x\u003d\"1567.40820312\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"1595.19140625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-74\"/\u003e\n      \u003cuse x\u003d\"1634.40039062\" xlink:href\u003d\"#BitstreamVeraSans-Roman-79\"/\u003e\n      \u003cuse x\u003d\"1693.58007812\" xlink:href\u003d\"#BitstreamVeraSans-Roman-29\"/\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n   \u003c/g\u003e\n   \u003cg id\u003d\"matplotlib.axis_2\"\u003e\n    \u003cg id\u003d\"ytick_1\"\u003e\n     \u003cg id\u003d\"line2d_14\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 373.090909 \nL 680.4 373.090909 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_13\"\u003e\n      \u003c!-- 0.0 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 375.850284091)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_2\"\u003e\n     \u003cg id\u003d\"line2d_15\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 341.672727 \nL 680.4 341.672727 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_14\"\u003e\n      \u003c!-- 0.1 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 344.432102273)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-31\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_3\"\u003e\n     \u003cg id\u003d\"line2d_16\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 310.254545 \nL 680.4 310.254545 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_15\"\u003e\n      \u003c!-- 0.2 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 313.013920455)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-32\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_4\"\u003e\n     \u003cg id\u003d\"line2d_17\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 278.836364 \nL 680.4 278.836364 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_16\"\u003e\n      \u003c!-- 0.3 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 281.595738636)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-33\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_5\"\u003e\n     \u003cg id\u003d\"line2d_18\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 247.418182 \nL 680.4 247.418182 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_17\"\u003e\n      \u003c!-- 0.4 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 250.177556818)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-34\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_6\"\u003e\n     \u003cg id\u003d\"line2d_19\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 216 \nL 680.4 216 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_18\"\u003e\n      \u003c!-- 0.5 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 218.759375)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-35\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_7\"\u003e\n     \u003cg id\u003d\"line2d_20\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 184.581818 \nL 680.4 184.581818 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_19\"\u003e\n      \u003c!-- 0.6 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 187.341193182)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-36\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_8\"\u003e\n     \u003cg id\u003d\"line2d_21\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 153.163636 \nL 680.4 153.163636 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_20\"\u003e\n      \u003c!-- 0.7 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 155.923011364)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-37\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_9\"\u003e\n     \u003cg id\u003d\"line2d_22\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 121.745455 \nL 680.4 121.745455 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_21\"\u003e\n      \u003c!-- 0.8 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 124.504829545)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-38\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_10\"\u003e\n     \u003cg id\u003d\"line2d_23\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 90.327273 \nL 680.4 90.327273 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_22\"\u003e\n      \u003c!-- 0.9 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 93.0866477273)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-39\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"ytick_11\"\u003e\n     \u003cg id\u003d\"line2d_24\"\u003e\n      \u003cpath clip-path\u003d\"url(#p5e94ce4765)\" d\u003d\"M 94.5 58.909091 \nL 680.4 58.909091 \n\" style\u003d\"fill:none;stroke:#999999;stroke-linecap:square;\"/\u003e\n     \u003c/g\u003e\n     \u003cg id\u003d\"text_23\"\u003e\n      \u003c!-- 1.0 --\u003e\n      \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(74.596875 61.6684659091)scale(0.1 -0.1)\"\u003e\n       \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-31\"/\u003e\n       \u003cuse x\u003d\"63.623046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-2e\"/\u003e\n       \u003cuse x\u003d\"95.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-30\"/\u003e\n      \u003c/g\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n    \u003cg id\u003d\"text_24\"\u003e\n     \u003c!-- True Positive Rate (Sensitivity) --\u003e\n     \u003cdefs\u003e\n      \u003cpath d\u003d\"M 54.890625 33.015625 \nL 54.890625 0 \nL 45.90625 0 \nL 45.90625 32.71875 \nQ 45.90625 40.484375 42.875 44.328125 \nQ 39.84375 48.1875 33.796875 48.1875 \nQ 26.515625 48.1875 22.3125 43.546875 \nQ 18.109375 38.921875 18.109375 30.90625 \nL 18.109375 0 \nL 9.078125 0 \nL 9.078125 54.6875 \nL 18.109375 54.6875 \nL 18.109375 46.1875 \nQ 21.34375 51.125 25.703125 53.5625 \nQ 30.078125 56 35.796875 56 \nQ 45.21875 56 50.046875 50.171875 \nQ 54.890625 44.34375 54.890625 33.015625 \n\" id\u003d\"BitstreamVeraSans-Roman-6e\"/\u003e\n      \u003cpath d\u003d\"M 41.109375 46.296875 \nQ 39.59375 47.171875 37.8125 47.578125 \nQ 36.03125 48 33.890625 48 \nQ 26.265625 48 22.1875 43.046875 \nQ 18.109375 38.09375 18.109375 28.8125 \nL 18.109375 0 \nL 9.078125 0 \nL 9.078125 54.6875 \nL 18.109375 54.6875 \nL 18.109375 46.1875 \nQ 20.953125 51.171875 25.484375 53.578125 \nQ 30.03125 56 36.53125 56 \nQ 37.453125 56 38.578125 55.875 \nQ 39.703125 55.765625 41.0625 55.515625 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-72\"/\u003e\n      \u003cpath d\u003d\"M 8.5 21.578125 \nL 8.5 54.6875 \nL 17.484375 54.6875 \nL 17.484375 21.921875 \nQ 17.484375 14.15625 20.5 10.265625 \nQ 23.53125 6.390625 29.59375 6.390625 \nQ 36.859375 6.390625 41.078125 11.03125 \nQ 45.3125 15.671875 45.3125 23.6875 \nL 45.3125 54.6875 \nL 54.296875 54.6875 \nL 54.296875 0 \nL 45.3125 0 \nL 45.3125 8.40625 \nQ 42.046875 3.421875 37.71875 1 \nQ 33.40625 -1.421875 27.6875 -1.421875 \nQ 18.265625 -1.421875 13.375 4.4375 \nQ 8.5 10.296875 8.5 21.578125 \n\" id\u003d\"BitstreamVeraSans-Roman-75\"/\u003e\n      \u003cpath d\u003d\"M -0.296875 72.90625 \nL 61.375 72.90625 \nL 61.375 64.59375 \nL 35.5 64.59375 \nL 35.5 0 \nL 25.59375 0 \nL 25.59375 64.59375 \nL -0.296875 64.59375 \nz\n\" id\u003d\"BitstreamVeraSans-Roman-54\"/\u003e\n     \u003c/defs\u003e\n     \u003cg style\u003d\"fill:#999999;\" transform\u003d\"translate(67.10125 308.480625)rotate(-90.0)scale(0.12 -0.12)\"\u003e\n      \u003cuse xlink:href\u003d\"#BitstreamVeraSans-Roman-54\"/\u003e\n      \u003cuse x\u003d\"60.865234375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-72\"/\u003e\n      \u003cuse x\u003d\"101.978515625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-75\"/\u003e\n      \u003cuse x\u003d\"165.357421875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cuse x\u003d\"226.880859375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cuse x\u003d\"258.66796875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-50\"/\u003e\n      \u003cuse x\u003d\"318.923828125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-6f\"/\u003e\n      \u003cuse x\u003d\"380.10546875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-73\"/\u003e\n      \u003cuse x\u003d\"432.205078125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"459.98828125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-74\"/\u003e\n      \u003cuse x\u003d\"499.197265625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"526.98046875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-76\"/\u003e\n      \u003cuse x\u003d\"586.16015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cuse x\u003d\"647.68359375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cuse x\u003d\"679.470703125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-52\"/\u003e\n      \u003cuse x\u003d\"748.921875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-61\"/\u003e\n      \u003cuse x\u003d\"810.201171875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-74\"/\u003e\n      \u003cuse x\u003d\"849.41015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cuse x\u003d\"910.93359375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-20\"/\u003e\n      \u003cuse x\u003d\"942.720703125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-28\"/\u003e\n      \u003cuse x\u003d\"981.734375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-53\"/\u003e\n      \u003cuse x\u003d\"1045.2109375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-65\"/\u003e\n      \u003cuse x\u003d\"1106.734375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-6e\"/\u003e\n      \u003cuse x\u003d\"1170.11328125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-73\"/\u003e\n      \u003cuse x\u003d\"1222.21289062\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"1249.99609375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-74\"/\u003e\n      \u003cuse x\u003d\"1289.20507812\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"1316.98828125\" xlink:href\u003d\"#BitstreamVeraSans-Roman-76\"/\u003e\n      \u003cuse x\u003d\"1376.16796875\" xlink:href\u003d\"#BitstreamVeraSans-Roman-69\"/\u003e\n      \u003cuse x\u003d\"1403.95117188\" xlink:href\u003d\"#BitstreamVeraSans-Roman-74\"/\u003e\n      \u003cuse x\u003d\"1443.16015625\" xlink:href\u003d\"#BitstreamVeraSans-Roman-79\"/\u003e\n      \u003cuse x\u003d\"1502.33984375\" xlink:href\u003d\"#BitstreamVeraSans-Roman-29\"/\u003e\n     \u003c/g\u003e\n    \u003c/g\u003e\n   \u003c/g\u003e\n  \u003c/g\u003e\n \u003c/g\u003e\n \u003cdefs\u003e\n  \u003cclipPath id\u003d\"p5e94ce4765\"\u003e\n   \u003crect height\u003d\"345.6\" width\u003d\"585.9\" x\u003d\"94.5\" y\u003d\"43.2\"/\u003e\n  \u003c/clipPath\u003e\n \u003c/defs\u003e\n\u003c/svg\u003e\n\u003c/div\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 11:53:15 PM",
      "dateStarted": "Apr 16, 2016 11:53:54 PM",
      "dateFinished": "Apr 16, 2016 11:53:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### **Part 5: Reduce feature dimension via feature hashing**\n#### ** (5a) Hash function **\n#### As we just saw, using a one-hot-encoding featurization can yield a model with good statistical accuracy.  However, the number of distinct categories across all features is quite large -- recall that we observed 233K categories in the training data in Part (3c).  Moreover, the full Kaggle training dataset includes more than 33M distinct categories, and the Kaggle dataset itself is just a small subset of Criteo\u0027s labeled data.  Hence, featurizing via a one-hot-encoding representation would lead to a very large feature vector. To reduce the dimensionality of the feature space, we will use feature hashing.\n####Below is the hash function that we will use for this part of the lab.  We will first use this hash function with the three sample data points from Part (1a) to gain some intuition.  Specifically, run code to hash the three sample points using two different values for `numBuckets` and observe the resulting hashed feature dictionaries.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:55:09 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460876034647_-670454943",
      "id": "20160416-235354_500169199",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003e\u003cstrong\u003ePart 5: Reduce feature dimension via feature hashing\u003c/strong\u003e\u003c/h3\u003e\n\u003ch4\u003e\u003cem\u003e\u003c/em\u003e (5a) Hash function \u003cem\u003e\u003c/em\u003e\u003c/h4\u003e\n\u003ch4\u003eAs we just saw, using a one-hot-encoding featurization can yield a model with good statistical accuracy.  However, the number of distinct categories across all features is quite large \u0026ndash; recall that we observed 233K categories in the training data in Part (3c).  Moreover, the full Kaggle training dataset includes more than 33M distinct categories, and the Kaggle dataset itself is just a small subset of Criteo\u0027s labeled data.  Hence, featurizing via a one-hot-encoding representation would lead to a very large feature vector. To reduce the dimensionality of the feature space, we will use feature hashing.\u003c/h4\u003e\n\u003ch4\u003eBelow is the hash function that we will use for this part of the lab.  We will first use this hash function with the three sample data points from Part (1a) to gain some intuition.  Specifically, run code to hash the three sample points using two different values for \u003ccode\u003enumBuckets\u003c/code\u003e and observe the resulting hashed feature dictionaries.\u003c/h4\u003e\n"
      },
      "dateCreated": "Apr 16, 2016 11:53:54 PM",
      "dateStarted": "Apr 16, 2016 11:55:07 PM",
      "dateFinished": "Apr 16, 2016 11:55:07 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom collections import defaultdict\nimport hashlib\n\ndef hashFunction(numBuckets, rawFeats, printMapping\u003dFalse):\n    \"\"\"Calculate a feature dictionary for an observation\u0027s features based on hashing.\n\n    Note:\n        Use printMapping\u003dTrue for debug purposes and to better understand how the hashing works.\n\n    Args:\n        numBuckets (int): Number of buckets to use as features.\n        rawFeats (list of (int, str)): A list of features for an observation.  Represented as\n            (featureID, value) tuples.\n        printMapping (bool, optional): If true, the mappings of featureString to index will be\n            printed.\n\n    Returns:\n        dict of int to float:  The keys will be integers which represent the buckets that the\n            features have been hashed to.  The value for a given key will contain the count of the\n            (featureID, value) tuples that have hashed to that key.\n    \"\"\"\n    mapping \u003d {}\n    for ind, category in rawFeats:\n        featureString \u003d category + str(ind)\n        mapping[featureString] \u003d int(int(hashlib.md5(featureString).hexdigest(), 16) % numBuckets)\n    if(printMapping): print mapping\n    sparseFeatures \u003d defaultdict(float)\n    for bucket in mapping.values():\n        sparseFeatures[bucket] +\u003d 1.0\n    return dict(sparseFeatures)\n\n# Reminder of the sample values:\n# sampleOne \u003d [(0, \u0027mouse\u0027), (1, \u0027black\u0027)]\n# sampleTwo \u003d [(0, \u0027cat\u0027), (1, \u0027tabby\u0027), (2, \u0027mouse\u0027)]\n# sampleThree \u003d  [(0, \u0027bear\u0027), (1, \u0027black\u0027), (2, \u0027salmon\u0027)]",
      "authenticationInfo": {},
      "dateUpdated": "Apr 16, 2016 11:55:40 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460876107066_1131476047",
      "id": "20160416-235507_468733801",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Apr 16, 2016 11:55:07 PM",
      "dateStarted": "Apr 16, 2016 11:55:40 PM",
      "dateFinished": "Apr 16, 2016 11:55:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460876140271_1129983024",
      "id": "20160416-235540_500557927",
      "dateCreated": "Apr 16, 2016 11:55:40 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "MIDS261_HW12_SAYER",
  "id": "2BG2CFG5Q",
  "angularObjects": {
    "2BJQ6FHHP": [],
    "2BGRW6C4J": [],
    "2BGKQTBYD": [],
    "2BG1BVAJS": [],
    "2BGM85J9M": [],
    "2BJNA4MZA": [],
    "2BHU464XB": [],
    "2BFP1M4H7": [],
    "2BGDV32KZ": [],
    "2BFD99HRH": [],
    "2BGH4BHKH": [],
    "2BFT3DN6T": [],
    "2BGWUQQ45": [],
    "2BH1MUBXN": [],
    "2BFDQFFRT": [],
    "2BHHDGXWE": [],
    "2BGA7GG6M": [],
    "2BH9MA1YR": []
  },
  "config": {},
  "info": {}
}